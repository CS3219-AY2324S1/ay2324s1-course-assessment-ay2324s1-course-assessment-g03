import * as pulumi from "@pulumi/pulumi";
/**
 * `mongodbatlas.Organization` provides programmatic management (including creation) of a MongoDB Atlas Organization resource.
 *
 * > **IMPORTANT NOTE:**  When you establish an Atlas organization using this resource, it automatically generates a set of initial public and private Programmatic API Keys. These key values are vital to store because you'll need to use them to grant access to the newly created Atlas organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Organization("test", {
 *     description: "test API key from Org Creation Test",
 *     orgOwnerId: "6205e5fffff79cde6f",
 *     roleNames: ["ORG_OWNER"],
 * });
 * ```
 *
 * ## Import
 *
 * Organization must be imported using organization ID, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/organization:Organization my_org 5d09d6a59ccf6445652a444a
 * ```
 *  For more information see[MongoDB Atlas Admin API Organization](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Organizations/operation/createOrganization)
 *
 * Documentation for more information.
 */
export declare class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationState, opts?: pulumi.CustomResourceOptions): Organization;
    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Organization;
    readonly description: pulumi.Output<string>;
    /**
     * (Optional) Unique 24-hexadecimal digit string that identifies the federation to link the newly created organization to. If specified, the proposed Organization Owner of the new organization must have the Organization Owner role in an organization associated with the federation.
     */
    readonly federationSettingsId: pulumi.Output<string | undefined>;
    /**
     * The name of the organization you want to create. (Cannot be changed via this Provider after creation.)
     */
    readonly name: pulumi.Output<string>;
    /**
     * The organization id.
     */
    readonly orgId: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key.  This is only required when authenticating with Programmatic API Keys. [MongoDB Atlas Admin API - Get User By Username](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/MongoDB-Cloud-Users/operation/getUserByUsername)
     */
    readonly orgOwnerId: pulumi.Output<string>;
    readonly privateKey: pulumi.Output<string>;
    /**
     * Public API key value set for the specified organization API key.
     */
    readonly publicKey: pulumi.Output<string>;
    /**
     * List of Organization roles that the Programmatic API key needs to have. Ensure that you provide at least one role and ensure all roles are valid for the Organization.  You must specify an array even if you are only associating a single role with the Programmatic API key. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles that you can assign to a Programmatic API key.
     */
    readonly roleNames: pulumi.Output<string[]>;
    /**
     * Create a Organization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Organization resources.
 */
export interface OrganizationState {
    description?: pulumi.Input<string>;
    /**
     * (Optional) Unique 24-hexadecimal digit string that identifies the federation to link the newly created organization to. If specified, the proposed Organization Owner of the new organization must have the Organization Owner role in an organization associated with the federation.
     */
    federationSettingsId?: pulumi.Input<string>;
    /**
     * The name of the organization you want to create. (Cannot be changed via this Provider after creation.)
     */
    name?: pulumi.Input<string>;
    /**
     * The organization id.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key.  This is only required when authenticating with Programmatic API Keys. [MongoDB Atlas Admin API - Get User By Username](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/MongoDB-Cloud-Users/operation/getUserByUsername)
     */
    orgOwnerId?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * Public API key value set for the specified organization API key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * List of Organization roles that the Programmatic API key needs to have. Ensure that you provide at least one role and ensure all roles are valid for the Organization.  You must specify an array even if you are only associating a single role with the Programmatic API key. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles that you can assign to a Programmatic API key.
     */
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a Organization resource.
 */
export interface OrganizationArgs {
    description: pulumi.Input<string>;
    /**
     * (Optional) Unique 24-hexadecimal digit string that identifies the federation to link the newly created organization to. If specified, the proposed Organization Owner of the new organization must have the Organization Owner role in an organization associated with the federation.
     */
    federationSettingsId?: pulumi.Input<string>;
    /**
     * The name of the organization you want to create. (Cannot be changed via this Provider after creation.)
     */
    name?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key.  This is only required when authenticating with Programmatic API Keys. [MongoDB Atlas Admin API - Get User By Username](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/MongoDB-Cloud-Users/operation/getUserByUsername)
     */
    orgOwnerId: pulumi.Input<string>;
    /**
     * List of Organization roles that the Programmatic API key needs to have. Ensure that you provide at least one role and ensure all roles are valid for the Organization.  You must specify an array even if you are only associating a single role with the Programmatic API key. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles that you can assign to a Programmatic API key.
     */
    roleNames: pulumi.Input<pulumi.Input<string>[]>;
}
