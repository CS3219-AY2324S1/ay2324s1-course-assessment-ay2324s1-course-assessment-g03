"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedDatabaseInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 * ### S With MongoDB Atlas Cluster As Storage Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.FederatedDatabaseInstance("test", {
 *     projectId: "PROJECT ID",
 *     storageDatabases: [{
 *         collections: [{
 *             dataSources: [{
 *                 collection: "COLLECTION IN THE CLUSTER",
 *                 database: "DB IN THE CLUSTER",
 *                 storeName: "CLUSTER NAME",
 *             }],
 *             name: "NAME OF THE COLLECTION",
 *         }],
 *         name: "VirtualDatabase0",
 *     }],
 *     storageStores: [{
 *         clusterName: "CLUSTER NAME",
 *         name: "STORE 1 NAME",
 *         projectId: "PROJECT ID",
 *         provider: "atlas",
 *         readPreference: {
 *             mode: "secondary",
 *         },
 *     }],
 * });
 * ```
 * ### S With Amazon S3 Bucket As Storage Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.FederatedDatabaseInstance("test", {
 *     cloudProviderConfig: {
 *         aws: {
 *             roleId: "AWS ROLE ID",
 *             testS3Bucket: "S3 BUCKET NAME",
 *         },
 *     },
 *     projectId: "PROJECT ID",
 *     storageDatabases: [{
 *         collections: [{
 *             dataSources: [
 *                 {
 *                     collection: "COLLECTION IN THE CLUSTER",
 *                     database: "DB IN THE CLUSTER",
 *                     storeName: "CLUSTER NAME",
 *                 },
 *                 {
 *                     path: "S3 BUCKET PATH",
 *                     storeName: "S3 BUCKET NAME",
 *                 },
 *             ],
 *             name: "NAME OF THE COLLECTION",
 *         }],
 *         name: "VirtualDatabase0",
 *     }],
 *     storageStores: [
 *         {
 *             clusterName: "CLUSTER NAME",
 *             name: "STORE 1 NAME",
 *             projectId: "PROJECT ID",
 *             provider: "atlas",
 *             readPreference: {
 *                 mode: "secondary",
 *             },
 *         },
 *         {
 *             bucket: "STORE 2 NAME",
 *             delimiter: "/",
 *             name: "S3 BUCKET NAME",
 *             prefix: "S3 BUCKET PREFIX",
 *             provider: "s3",
 *             region: "AWS REGION",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * - The Federated Database Instance can be imported using project ID, name of the instance, in the format `project_id`--`name`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/federatedDatabaseInstance:FederatedDatabaseInstance mongodbatlas_federated_database_instance.example 1112222b3bf99403840e8934--test
 * ```
 *
 *  - The Federated Database Instance can be imported using project ID, name of the instance and name of the AWS S3 bucket, in the format `project_id`--`name`--`aws_test_s3_bucket`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/federatedDatabaseInstance:FederatedDatabaseInstance mongodbatlas_federated_database_instance.example 1112222b3bf99403840e8934--test--s3-test
 * ```
 *
 *  See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Data-Federation) Documentation for more information.
 */
class FederatedDatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing FederatedDatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FederatedDatabaseInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FederatedDatabaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedDatabaseInstance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cloudProviderConfig"] = state ? state.cloudProviderConfig : undefined;
            resourceInputs["dataProcessRegion"] = state ? state.dataProcessRegion : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageDatabases"] = state ? state.storageDatabases : undefined;
            resourceInputs["storageStores"] = state ? state.storageStores : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["cloudProviderConfig"] = args ? args.cloudProviderConfig : undefined;
            resourceInputs["dataProcessRegion"] = args ? args.dataProcessRegion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["storageDatabases"] = args ? args.storageDatabases : undefined;
            resourceInputs["storageStores"] = args ? args.storageStores : undefined;
            resourceInputs["hostnames"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedDatabaseInstance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FederatedDatabaseInstance = FederatedDatabaseInstance;
/** @internal */
FederatedDatabaseInstance.__pulumiType = 'mongodbatlas:index/federatedDatabaseInstance:FederatedDatabaseInstance';
//# sourceMappingURL=federatedDatabaseInstance.js.map