"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrivatelinkEndpointsServiceServerlessOutput = exports.getPrivatelinkEndpointsServiceServerless = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `privatelinkEndpointsServiceServerless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example with AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("testServerlessInstance", {
 *     projectId: "<PROJECT_ID>",
 *     providerSettingsBackingProviderName: "AWS",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST_1",
 *     continuousBackupEnabled: true,
 * });
 * const testPrivatelinkEndpointsServiceServerless = mongodbatlas.getPrivatelinkEndpointsServiceServerlessOutput({
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 * });
 * const testPrivatelinkEndpointServerless = new mongodbatlas.PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     providerName: "AWS",
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: "test-db",
 *     endpointId: testPrivatelinkEndpointServerless.endpointId,
 *     providerName: "AWS",
 *     comment: "New serverless endpoint",
 * });
 * ```
 *
 * ## Example with AZURE
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("testServerlessInstance", {
 *     projectId: "<PROJECT_ID>",
 *     providerSettingsBackingProviderName: "AZURE",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST",
 *     continuousBackupEnabled: true,
 * });
 * const testPrivatelinkEndpointsServiceServerless = mongodbatlas.getPrivatelinkEndpointsServiceServerlessOutput({
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 * });
 * const testPrivatelinkEndpointServerless = new mongodbatlas.PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     providerName: "AZURE",
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: "test-db",
 *     endpointId: testPrivatelinkEndpointServerless.endpointId,
 *     providerName: "AZURE",
 *     comment: "New serverless endpoint",
 * });
 * ```
 */
function getPrivatelinkEndpointsServiceServerless(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getPrivatelinkEndpointsServiceServerless:getPrivatelinkEndpointsServiceServerless", {
        "instanceName": args.instanceName,
        "itemsPerPage": args.itemsPerPage,
        "pageNum": args.pageNum,
        "projectId": args.projectId,
    }, opts);
}
exports.getPrivatelinkEndpointsServiceServerless = getPrivatelinkEndpointsServiceServerless;
/**
 * `privatelinkEndpointsServiceServerless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example with AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("testServerlessInstance", {
 *     projectId: "<PROJECT_ID>",
 *     providerSettingsBackingProviderName: "AWS",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST_1",
 *     continuousBackupEnabled: true,
 * });
 * const testPrivatelinkEndpointsServiceServerless = mongodbatlas.getPrivatelinkEndpointsServiceServerlessOutput({
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 * });
 * const testPrivatelinkEndpointServerless = new mongodbatlas.PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     providerName: "AWS",
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: "test-db",
 *     endpointId: testPrivatelinkEndpointServerless.endpointId,
 *     providerName: "AWS",
 *     comment: "New serverless endpoint",
 * });
 * ```
 *
 * ## Example with AZURE
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("testServerlessInstance", {
 *     projectId: "<PROJECT_ID>",
 *     providerSettingsBackingProviderName: "AZURE",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST",
 *     continuousBackupEnabled: true,
 * });
 * const testPrivatelinkEndpointsServiceServerless = mongodbatlas.getPrivatelinkEndpointsServiceServerlessOutput({
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 * });
 * const testPrivatelinkEndpointServerless = new mongodbatlas.PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     providerName: "AZURE",
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: "test-db",
 *     endpointId: testPrivatelinkEndpointServerless.endpointId,
 *     providerName: "AZURE",
 *     comment: "New serverless endpoint",
 * });
 * ```
 */
function getPrivatelinkEndpointsServiceServerlessOutput(args, opts) {
    return pulumi.output(args).apply((a) => getPrivatelinkEndpointsServiceServerless(a, opts));
}
exports.getPrivatelinkEndpointsServiceServerlessOutput = getPrivatelinkEndpointsServiceServerlessOutput;
//# sourceMappingURL=getPrivatelinkEndpointsServiceServerless.js.map