"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.Organization` provides programmatic management (including creation) of a MongoDB Atlas Organization resource.
 *
 * > **IMPORTANT NOTE:**  When you establish an Atlas organization using this resource, it automatically generates a set of initial public and private Programmatic API Keys. These key values are vital to store because you'll need to use them to grant access to the newly created Atlas organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Organization("test", {
 *     description: "test API key from Org Creation Test",
 *     orgOwnerId: "6205e5fffff79cde6f",
 *     roleNames: ["ORG_OWNER"],
 * });
 * ```
 *
 * ## Import
 *
 * Organization must be imported using organization ID, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/organization:Organization my_org 5d09d6a59ccf6445652a444a
 * ```
 *  For more information see[MongoDB Atlas Admin API Organization](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Organizations/operation/createOrganization)
 *
 * Documentation for more information.
 */
class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Organization(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Organization.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["federationSettingsId"] = state ? state.federationSettingsId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["orgOwnerId"] = state ? state.orgOwnerId : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["roleNames"] = state ? state.roleNames : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.orgOwnerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgOwnerId'");
            }
            if ((!args || args.roleNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleNames'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["federationSettingsId"] = args ? args.federationSettingsId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgOwnerId"] = args ? args.orgOwnerId : undefined;
            resourceInputs["roleNames"] = args ? args.roleNames : undefined;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey", "publicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Organization.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Organization = Organization;
/** @internal */
Organization.__pulumiType = 'mongodbatlas:index/organization:Organization';
//# sourceMappingURL=organization.js.map