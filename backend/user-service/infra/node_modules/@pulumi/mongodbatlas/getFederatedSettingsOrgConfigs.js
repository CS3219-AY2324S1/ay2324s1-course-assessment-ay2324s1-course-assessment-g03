"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFederatedSettingsOrgConfigsOutput = exports.getFederatedSettingsOrgConfigs = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnections = new mongodbatlas.FederatedSettingsOrgConfig("orgConnections", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfigsOutput({
 *     federationSettingsId: orgConnections.id,
 * });
 * ```
 */
function getFederatedSettingsOrgConfigs(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getFederatedSettingsOrgConfigs:getFederatedSettingsOrgConfigs", {
        "federationSettingsId": args.federationSettingsId,
        "itemsPerPage": args.itemsPerPage,
        "pageNum": args.pageNum,
    }, opts);
}
exports.getFederatedSettingsOrgConfigs = getFederatedSettingsOrgConfigs;
/**
 * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnections = new mongodbatlas.FederatedSettingsOrgConfig("orgConnections", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfigsOutput({
 *     federationSettingsId: orgConnections.id,
 * });
 * ```
 */
function getFederatedSettingsOrgConfigsOutput(args, opts) {
    return pulumi.output(args).apply((a) => getFederatedSettingsOrgConfigs(a, opts));
}
exports.getFederatedSettingsOrgConfigsOutput = getFederatedSettingsOrgConfigsOutput;
//# sourceMappingURL=getFederatedSettingsOrgConfigs.js.map