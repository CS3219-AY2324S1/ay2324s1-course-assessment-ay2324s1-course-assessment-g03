"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * Serverless Instance can be imported using the group ID and serverless instance name, in the format `GROUP_ID-SERVERLESS_INSTANCE_NAME`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/serverlessInstance:ServerlessInstance my_serverless_instance 1112222b3bf99403840e8934-My Serverless Instance
 * ```
 *
 *  For more information see[MongoDB Atlas API - Serverless Instance](https://docs.atlas.mongodb.com/reference/api/serverless-instances/) Documentation.
 */
class ServerlessInstance extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServerlessInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServerlessInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessInstance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["connectionStringsPrivateEndpointSrvs"] = state ? state.connectionStringsPrivateEndpointSrvs : undefined;
            resourceInputs["connectionStringsStandardSrv"] = state ? state.connectionStringsStandardSrv : undefined;
            resourceInputs["continuousBackupEnabled"] = state ? state.continuousBackupEnabled : undefined;
            resourceInputs["createDate"] = state ? state.createDate : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["mongoDbVersion"] = state ? state.mongoDbVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerSettingsBackingProviderName"] = state ? state.providerSettingsBackingProviderName : undefined;
            resourceInputs["providerSettingsProviderName"] = state ? state.providerSettingsProviderName : undefined;
            resourceInputs["providerSettingsRegionName"] = state ? state.providerSettingsRegionName : undefined;
            resourceInputs["stateName"] = state ? state.stateName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationProtectionEnabled"] = state ? state.terminationProtectionEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerSettingsBackingProviderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerSettingsBackingProviderName'");
            }
            if ((!args || args.providerSettingsProviderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerSettingsProviderName'");
            }
            if ((!args || args.providerSettingsRegionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerSettingsRegionName'");
            }
            resourceInputs["continuousBackupEnabled"] = args ? args.continuousBackupEnabled : undefined;
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerSettingsBackingProviderName"] = args ? args.providerSettingsBackingProviderName : undefined;
            resourceInputs["providerSettingsProviderName"] = args ? args.providerSettingsProviderName : undefined;
            resourceInputs["providerSettingsRegionName"] = args ? args.providerSettingsRegionName : undefined;
            resourceInputs["stateName"] = args ? args.stateName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtectionEnabled"] = args ? args.terminationProtectionEnabled : undefined;
            resourceInputs["connectionStringsPrivateEndpointSrvs"] = undefined /*out*/;
            resourceInputs["connectionStringsStandardSrv"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["mongoDbVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessInstance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServerlessInstance = ServerlessInstance;
/** @internal */
ServerlessInstance.__pulumiType = 'mongodbatlas:index/serverlessInstance:ServerlessInstance';
//# sourceMappingURL=serverlessInstance.js.map