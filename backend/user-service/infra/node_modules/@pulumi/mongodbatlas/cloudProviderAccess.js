"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudProviderAccess = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccess("testRole", {
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AWS",
 * });
 * ```
 * ### With AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("testRole", {
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AWS",
 * });
 * ```
 * ### With Azure
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("testRole", {
 *     azureConfigs: [{
 *         atlasAzureAppId: "9f2deb0d-be22-4524-a403-df531868bac0",
 *         servicePrincipalId: "22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1",
 *         tenantId: "91402384-d71e-22f5-22dd-759e272cdc1c",
 *     }],
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AZURE",
 * });
 * ```
 * ## Authorize role
 *
 * Once the resource is created add the field `iam_assumed_role_arn` see [Set Up Unified AWS Access](https://docs.atlas.mongodb.com/security/set-up-unified-aws-access/#set-up-unified-aws-access) , and execute a new `pulumi up` this will create a PATCH request.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccess("testRole", {
 *     iamAssumedRoleArn: "arn:aws:iam::772401394250:role/test-user-role",
 *     projectId: "<PROJECT-ID>",
 *     providerName: "AWS",
 * });
 * ```
 *
 * ## Import
 *
 * The Cloud Provider Access resource can be imported using project ID and the provider name and mongodbatlas role id, in the format `project_id`-`provider_name`-`role_id`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/cloudProviderAccess:CloudProviderAccess my_role 1112222b3bf99403840e8934-AWS-5fc17d476f7a33224f5b224e
 * ```
 *  See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/cloud-provider-access-create-one-role/) Documentation for more information.
 */
class CloudProviderAccess extends pulumi.CustomResource {
    /**
     * Get an existing CloudProviderAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CloudProviderAccess(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudProviderAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProviderAccess.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["atlasAssumedRoleExternalId"] = state ? state.atlasAssumedRoleExternalId : undefined;
            resourceInputs["atlasAwsAccountArn"] = state ? state.atlasAwsAccountArn : undefined;
            resourceInputs["authorizedDate"] = state ? state.authorizedDate : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["featureUsages"] = state ? state.featureUsages : undefined;
            resourceInputs["iamAssumedRoleArn"] = state ? state.iamAssumedRoleArn : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["iamAssumedRoleArn"] = args ? args.iamAssumedRoleArn : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["atlasAssumedRoleExternalId"] = undefined /*out*/;
            resourceInputs["atlasAwsAccountArn"] = undefined /*out*/;
            resourceInputs["authorizedDate"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["featureUsages"] = undefined /*out*/;
            resourceInputs["roleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudProviderAccess.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CloudProviderAccess = CloudProviderAccess;
/** @internal */
CloudProviderAccess.__pulumiType = 'mongodbatlas:index/cloudProviderAccess:CloudProviderAccess';
//# sourceMappingURL=cloudProviderAccess.js.map