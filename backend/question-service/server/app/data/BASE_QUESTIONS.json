[
  {
    "id": "1",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function twoSum(nums: number[], target: number): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func twoSum(nums []int, target int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n \nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n \nConstraints:\n\n2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.\n\n \nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
    "difficulty": "Easy",
    "hints": [
      "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
      "So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
      "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,7,11,15]\n9", "[3,2,4]\n6", "[3,3]\n6"],
    "title": "Two Sum",
    "topic_tags": ["Array", "Hash Table"],
    "updated_at": 1695017039,
    "url": "https://leetcode.com/problems/two-sum/"
  },
  {
    "id": "26",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int removeDuplicates(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function removeDuplicates(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func removeDuplicates(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (remove-duplicates nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      }
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\nChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n\nCustom Judge:\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\nnums is sorted in non-decreasing order.\n\n",
    "difficulty": "Easy",
    "hints": [
      "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n\n",
      "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
      "Essentially, once an element is encountered, you simply need to bypass its duplicates and move on to the next unique element."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,2]", "[0,0,1,1,1,2,2,3,3,4]"],
    "title": "Remove Duplicates from Sorted Array",
    "topic_tags": ["Array", "Two Pointers"],
    "updated_at": 1695018977,
    "url": "https://leetcode.com/problems/remove-duplicates-from-sorted-array/"
  },
  {
    "id": "4",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double findMedianSortedArrays(List<int> nums1, List<int> nums2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\nfind_median_sorted_arrays(Nums1, Nums2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n\n  end\nend"
      }
    ],
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n \nExample 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\nExample 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n \nConstraints:\n\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3]\n[2]", "[1,2]\n[3,4]"],
    "title": "Median of Two Sorted Arrays",
    "topic_tags": ["Array", "Binary Search", "Divide and Conquer"],
    "updated_at": 1695017043,
    "url": "https://leetcode.com/problems/median-of-two-sorted-arrays/"
  },
  {
    "id": "37",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void solveSudoku(char** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void solveSudoku(List<List<String>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func solveSudoku(board [][]byte)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (solve-sudoku board)\n  (-> (listof (listof char?)) void?)\n\n  )"
      }
    ],
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n \nExample 1:\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n\n\n \nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
    ],
    "title": "Sudoku Solver",
    "topic_tags": ["Array", "Hash Table", "Backtracking", "Matrix"],
    "updated_at": 1695018985,
    "url": "https://leetcode.com/problems/sudoku-solver/"
  },
  {
    "id": "11",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxArea(int* height, int heightSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxArea(height: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxArea(List<int> height) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxArea(height []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n \nExample 1:\n\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\nExample 2:\n\nInput: height = [1,1]\nOutput: 1\n\n \nConstraints:\n\nn == height.length\n2 <= n <= 105\n0 <= height[i] <= 104\n\n",
    "difficulty": "Medium",
    "hints": [
      "If you simulate the problem, it will be O(n^2) which is not efficient.",
      "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
      "How can you calculate the amount of water at each step?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,8,6,2,5,4,8,3,7]", "[1,1]"],
    "title": "Container With Most Water",
    "topic_tags": ["Array", "Two Pointers", "Greedy"],
    "updated_at": 1695017099,
    "url": "https://leetcode.com/problems/container-with-most-water/"
  },
  {
    "id": "15",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function threeSum(nums: number[]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func threeSum(nums []int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n \nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n \nConstraints:\n\n3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n",
    "difficulty": "Medium",
    "hints": [
      "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
      "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
      "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-1,0,1,2,-1,-4]", "[0,1,1]", "[0,0,0]"],
    "title": "3Sum",
    "topic_tags": ["Array", "Two Pointers", "Sorting"],
    "updated_at": 1695017105,
    "url": "https://leetcode.com/problems/3sum/"
  },
  {
    "id": "257",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** binaryTreePaths(struct TreeNode* root, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<string> BinaryTreePaths(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string[]}\n */\nvar binaryTreePaths = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction binaryTreePaths(root: TreeNode | null): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return String[]\n     */\n    function binaryTreePaths($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun binaryTreePaths(root: TreeNode?): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<String> binaryTreePaths(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc binaryTreePaths(root *TreeNode) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {String[]}\ndef binary_tree_paths(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def binaryTreePaths(root: TreeNode): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn binary_tree_paths(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (binary-tree-paths root)\n  (-> (or/c tree-node? #f) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec binary_tree_paths(Root :: #tree_node{} | null) -> [unicode:unicode_binary()].\nbinary_tree_paths(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec binary_tree_paths(root :: TreeNode.t | nil) :: [String.t]\n  def binary_tree_paths(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\n \nExample 1:\n\n\nInput: root = [1,2,3,null,5]\nOutput: [\"1->2->5\",\"1->3\"]\n\nExample 2:\n\nInput: root = [1]\nOutput: [\"1\"]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 100].\n-100 <= Node.val <= 100\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,null,5]", "[1]"],
    "title": "Binary Tree Paths",
    "topic_tags": [
      "String",
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695094171,
    "url": "https://leetcode.com/problems/binary-tree-paths/"
  },
  {
    "id": "401",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> readBinaryWatch(int turnedOn) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> readBinaryWatch(int turnedOn) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** readBinaryWatch(int turnedOn, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> ReadBinaryWatch(int turnedOn) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} turnedOn\n * @return {string[]}\n */\nvar readBinaryWatch = function(turnedOn) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function readBinaryWatch(turnedOn: number): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $turnedOn\n     * @return String[]\n     */\n    function readBinaryWatch($turnedOn) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func readBinaryWatch(_ turnedOn: Int) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun readBinaryWatch(turnedOn: Int): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> readBinaryWatch(int turnedOn) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func readBinaryWatch(turnedOn int) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} turned_on\n# @return {String[]}\ndef read_binary_watch(turned_on)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def readBinaryWatch(turnedOn: Int): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn read_binary_watch(turned_on: i32) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (read-binary-watch turnedOn)\n  (-> exact-integer? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec read_binary_watch(TurnedOn :: integer()) -> [unicode:unicode_binary()].\nread_binary_watch(TurnedOn) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec read_binary_watch(turned_on :: integer) :: [String.t]\n  def read_binary_watch(turned_on) do\n\n  end\nend"
      }
    ],
    "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\nFor example, the below binary watch reads \"4:51\".\n\n\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\nThe hour must not contain a leading zero.\n\nFor example, \"01:00\" is not valid. It should be \"1:00\".\n\nThe minute must consist of two digits and may contain a leading zero.\n\nFor example, \"10:2\" is not valid. It should be \"10:02\".\n\n \nExample 1:\nInput: turnedOn = 1\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\nExample 2:\nInput: turnedOn = 9\nOutput: []\n\n \nConstraints:\n\n0 <= turnedOn <= 10\n\n",
    "difficulty": "Easy",
    "hints": [
      "Simplify by seeking for solutions that involve comparing bit counts.",
      "Consider calculating all possible times for comparison purposes."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["1", "9"],
    "title": "Binary Watch",
    "topic_tags": ["Backtracking", "Bit Manipulation"],
    "updated_at": 1695094309,
    "url": "https://leetcode.com/problems/binary-watch/"
  },
  {
    "id": "37",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void solveSudoku(char** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void solveSudoku(List<List<String>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func solveSudoku(board [][]byte)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (solve-sudoku board)\n  (-> (listof (listof char?)) void?)\n\n  )"
      }
    ],
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n \nExample 1:\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n\n\n \nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
    ],
    "title": "Sudoku Solver",
    "topic_tags": ["Array", "Hash Table", "Backtracking", "Matrix"],
    "updated_at": 1695018985,
    "url": "https://leetcode.com/problems/sudoku-solver/"
  },
  {
    "id": "51",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** solveNQueens(int n, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<string>> SolveNQueens(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function solveNQueens(n: number): string[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[][]\n     */\n    function solveNQueens($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func solveNQueens(_ n: Int) -> [[String]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun solveNQueens(n: Int): List<List<String>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<String>> solveNQueens(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func solveNQueens(n int) [][]string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {String[][]}\ndef solve_n_queens(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (solve-n-queens n)\n  (-> exact-integer? (listof (listof string?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec solve_n_queens(N :: integer()) -> [[unicode:unicode_binary()]].\nsolve_n_queens(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec solve_n_queens(n :: integer) :: [[String.t]]\n  def solve_n_queens(n) do\n\n  end\nend"
      }
    ],
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n \nExample 1:\n\n\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n\nExample 2:\n\nInput: n = 1\nOutput: [[\"Q\"]]\n\n \nConstraints:\n\n1 <= n <= 9\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["4", "1"],
    "title": "N-Queens",
    "topic_tags": ["Array", "Backtracking"],
    "updated_at": 1695018994,
    "url": "https://leetcode.com/problems/n-queens/"
  },
  {
    "id": "17",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** letterCombinations(char * digits, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function letterCombinations(digits: string): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> letterCombinations(String digits) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func letterCombinations(digits string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n\n  end\nend"
      }
    ],
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n \nExample 1:\n\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n\nExample 2:\n\nInput: digits = \"\"\nOutput: []\n\nExample 3:\n\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n\n \nConstraints:\n\n0 <= digits.length <= 4\ndigits[i] is a digit in the range ['2', '9'].\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"23\"", "\"\"", "\"2\""],
    "title": "Letter Combinations of a Phone Number",
    "topic_tags": ["Hash Table", "String", "Backtracking"],
    "updated_at": 1695017107,
    "url": "https://leetcode.com/problems/letter-combinations-of-a-phone-number/"
  },
  {
    "id": "22",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** generateParenthesis(int n, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function generateParenthesis(n: number): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> generateParenthesis(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func generateParenthesis(n int) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n\n  end\nend"
      }
    ],
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n \nExample 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nExample 2:\nInput: n = 1\nOutput: [\"()\"]\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Generate Parentheses",
    "topic_tags": ["String", "Dynamic Programming", "Backtracking"],
    "updated_at": 1695018975,
    "url": "https://leetcode.com/problems/generate-parentheses/"
  },
  {
    "id": "218",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getSkyline(buildings: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function getSkyline($buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> getSkyline(List<List<int>> buildings) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getSkyline(buildings [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef get_skyline(buildings)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\nget_skyline(Buildings) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\n  def get_skyline(buildings) do\n\n  end\nend"
      }
    ],
    "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n \nExample 1:\n\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\nExample 2:\n\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n \nConstraints:\n\n1 <= buildings.length <= 104\n0 <= lefti < righti <= 231 - 1\n1 <= heighti <= 231 - 1\nbuildings is sorted by lefti in non-decreasing order.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
      "[[0,2,3],[2,5,3]]"
    ],
    "title": "The Skyline Problem",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "updated_at": 1695094134,
    "url": "https://leetcode.com/problems/the-skyline-problem/"
  },
  {
    "id": "315",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countSmaller(int* nums, int numsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> CountSmaller(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar countSmaller = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function countSmaller(nums: number[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function countSmaller($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func countSmaller(_ nums: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun countSmaller(nums: IntArray): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> countSmaller(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func countSmaller(nums []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef count_smaller(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def countSmaller(nums: Array[Int]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn count_smaller(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (count-smaller nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec count_smaller(Nums :: [integer()]) -> [integer()].\ncount_smaller(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec count_smaller(nums :: [integer]) :: [integer]\n  def count_smaller(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n \nExample 1:\n\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n\nExample 2:\n\nInput: nums = [-1]\nOutput: [0]\n\nExample 3:\n\nInput: nums = [-1,-1]\nOutput: [0,0]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[5,2,6,1]", "[-1]", "[-1,-1]"],
    "title": "Count of Smaller Numbers After Self",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "updated_at": 1695094217,
    "url": "https://leetcode.com/problems/count-of-smaller-numbers-after-self/"
  },
  {
    "id": "307",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n        \n    }\n    \n    void update(int index, int val) {\n        \n    }\n    \n    int sumRange(int left, int right) {\n        \n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public void update(int index, int val) {\n        \n    }\n    \n    public int sumRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.update(index,val);\n * int param_2 = obj.sumRange(left,right);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def update(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def sumRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def update(self, index: int, val: int) -> None:\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} NumArray;\n\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n\nvoid numArrayUpdate(NumArray* obj, int index, int val) {\n  \n}\n\nint numArraySumRange(NumArray* obj, int left, int right) {\n  \n}\n\nvoid numArrayFree(NumArray* obj) {\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * numArrayUpdate(obj, index, val);\n \n * int param_2 = numArraySumRange(obj, left, right);\n \n * numArrayFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public void Update(int index, int val) {\n        \n    }\n    \n    public int SumRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.Update(index,val);\n * int param_2 = obj.SumRange(left,right);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nNumArray.prototype.update = function(index, val) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {number}\n */\nNumArray.prototype.sumRange = function(left, right) {\n    \n};\n\n/** \n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(index,val)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class NumArray {\n    constructor(nums: number[]) {\n\n    }\n\n    update(index: number, val: number): void {\n\n    }\n\n    sumRange(left: number, right: number): number {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(index,val)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class NumArray {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function update($index, $val) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function sumRange($left, $right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * $obj = NumArray($nums);\n * $obj->update($index, $val);\n * $ret_2 = $obj->sumRange($left, $right);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func update(_ index: Int, _ val: Int) {\n        \n    }\n    \n    func sumRange(_ left: Int, _ right: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * obj.update(index, val)\n * let ret_2: Int = obj.sumRange(left, right)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class NumArray(nums: IntArray) {\n\n    fun update(index: Int, `val`: Int) {\n        \n    }\n\n    fun sumRange(left: Int, right: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = NumArray(nums)\n * obj.update(index,`val`)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class NumArray {\n\n  NumArray(List<int> nums) {\n\n  }\n  \n  void update(int index, int val) {\n\n  }\n  \n  int sumRange(int left, int right) {\n\n  }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = NumArray(nums);\n * obj.update(index,val);\n * int param2 = obj.sumRange(left,right);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type NumArray struct {\n    \n}\n\n\nfunc Constructor(nums []int) NumArray {\n    \n}\n\n\nfunc (this *NumArray) Update(index int, val int)  {\n    \n}\n\n\nfunc (this *NumArray) SumRange(left int, right int) int {\n    \n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * obj.Update(index,val);\n * param_2 := obj.SumRange(left,right);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class NumArray\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def update(index, val)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Integer\n=end\n    def sum_range(left, right)\n        \n    end\n\n\nend\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray.new(nums)\n# obj.update(index, val)\n# param_2 = obj.sum_range(left, right)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class NumArray(_nums: Array[Int]) {\n\n    def update(index: Int, `val`: Int) {\n        \n    }\n\n    def sumRange(left: Int, right: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(index,`val`)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct NumArray {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumArray {\n\n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn update(&self, index: i32, val: i32) {\n        \n    }\n    \n    fn sum_range(&self, left: i32, right: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray::new(nums);\n * obj.update(index, val);\n * let ret_2: i32 = obj.sum_range(left, right);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define num-array%\n  (class object%\n    (super-new)\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      nums)\n    \n    ; update : exact-integer? exact-integer? -> void?\n    (define/public (update index val)\n\n      )\n    ; sum-range : exact-integer? exact-integer? -> exact-integer?\n    (define/public (sum-range left right)\n\n      )))\n\n;; Your num-array% object will be instantiated and called as such:\n;; (define obj (new num-array% [nums nums]))\n;; (send obj update index val)\n;; (define param_2 (send obj sum-range left right))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec num_array_init_(Nums :: [integer()]) -> any().\nnum_array_init_(Nums) ->\n  .\n\n-spec num_array_update(Index :: integer(), Val :: integer()) -> any().\nnum_array_update(Index, Val) ->\n  .\n\n-spec num_array_sum_range(Left :: integer(), Right :: integer()) -> integer().\nnum_array_sum_range(Left, Right) ->\n  .\n\n\n%% Your functions will be called as such:\n%% num_array_init_(Nums),\n%% num_array_update(Index, Val),\n%% Param_2 = num_array_sum_range(Left, Right),\n\n%% num_array_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule NumArray do\n  @spec init_(nums :: [integer]) :: any\n  def init_(nums) do\n\n  end\n\n  @spec update(index :: integer, val :: integer) :: any\n  def update(index, val) do\n\n  end\n\n  @spec sum_range(left :: integer, right :: integer) :: integer\n  def sum_range(left, right) do\n\n  end\nend\n\n# Your functions will be called as such:\n# NumArray.init_(nums)\n# NumArray.update(index, val)\n# param_2 = NumArray.sum_range(left, right)\n\n# NumArray.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Given an integer array nums, handle multiple queries of the following types:\n\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\nAt most 3 * 104 calls will be made to update and sumRange.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]\n[[[1,3,5]],[0,2],[1,2],[0,2]]"
    ],
    "title": "Range Sum Query - Mutable",
    "topic_tags": ["Array", "Design", "Binary Indexed Tree", "Segment Tree"],
    "updated_at": 1695094211,
    "url": "https://leetcode.com/problems/range-sum-query-mutable/"
  },
  {
    "id": "406",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def reconstructQueue(self, people):\n        \"\"\"\n        :type people: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** reconstructQueue(int** people, int peopleSize, int* peopleColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[][] ReconstructQueue(int[][] people) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} people\n * @return {number[][]}\n */\nvar reconstructQueue = function(people) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function reconstructQueue(people: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $people\n     * @return Integer[][]\n     */\n    function reconstructQueue($people) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func reconstructQueue(_ people: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun reconstructQueue(people: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> reconstructQueue(List<List<int>> people) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func reconstructQueue(people [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} people\n# @return {Integer[][]}\ndef reconstruct_queue(people)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn reconstruct_queue(people: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (reconstruct-queue people)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec reconstruct_queue(People :: [[integer()]]) -> [[integer()]].\nreconstruct_queue(People) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec reconstruct_queue(people :: [[integer]]) :: [[integer]]\n  def reconstruct_queue(people) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n \nExample 1:\n\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n\nExample 2:\n\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n\n \nConstraints:\n\n1 <= people.length <= 2000\n0 <= hi <= 106\n0 <= ki < people.length\nIt is guaranteed that the queue can be reconstructed.\n\n",
    "difficulty": "Medium",
    "hints": [
      "What can you say about the position of the shortest person? \r\nIf the position of the shortest person is i, how many people would be in front of the shortest person?",
      "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
      "[[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]"
    ],
    "title": "Queue Reconstruction by Height",
    "topic_tags": [
      "Array",
      "Greedy",
      "Binary Indexed Tree",
      "Segment Tree",
      "Sorting"
    ],
    "updated_at": 1695094317,
    "url": "https://leetcode.com/problems/queue-reconstruction-by-height/"
  },
  {
    "id": "35",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int searchInsert(int* nums, int numsSize, int target){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function searchInsert(nums: number[], target: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int searchInsert(List<int> nums, int target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func searchInsert(nums []int, target int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (search-insert nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\nsearch_insert(Nums, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n\n  end\nend"
      }
    ],
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExample 2:\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\nExample 3:\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums contains distinct values sorted in ascending order.\n-104 <= target <= 104\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3,5,6]\n5", "[1,3,5,6]\n2", "[1,3,5,6]\n7"],
    "title": "Search Insert Position",
    "topic_tags": ["Array", "Binary Search"],
    "updated_at": 1695018984,
    "url": "https://leetcode.com/problems/search-insert-position/"
  },
  {
    "id": "69",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int mySqrt(int x){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function mySqrt(x: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func mySqrt(_ x: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int mySqrt(int x) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func mySqrt(x int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n\n  end\nend"
      }
    ],
    "description": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\n\nFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n\n \nExample 1:\n\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n\nExample 2:\n\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n \nConstraints:\n\n0 <= x <= 231 - 1\n\n",
    "difficulty": "Easy",
    "hints": [
      "Try exploring all integers. (Credits: @annujoshi)",
      "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["4", "8"],
    "title": "Sqrt(x)",
    "topic_tags": ["Math", "Binary Search"],
    "updated_at": 1695019009,
    "url": "https://leetcode.com/problems/sqrtx/"
  },
  {
    "id": "4",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double findMedianSortedArrays(List<int> nums1, List<int> nums2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\nfind_median_sorted_arrays(Nums1, Nums2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n\n  end\nend"
      }
    ],
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n \nExample 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\nExample 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n \nConstraints:\n\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3]\n[2]", "[1,2]\n[3,4]"],
    "title": "Median of Two Sorted Arrays",
    "topic_tags": ["Array", "Binary Search", "Divide and Conquer"],
    "updated_at": 1695017043,
    "url": "https://leetcode.com/problems/median-of-two-sorted-arrays/"
  },
  {
    "id": "154",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int findMin(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int findMin(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int FindMin(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findMin(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMin($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findMin(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findMin(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int findMin(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findMin(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_min(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findMin(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_min(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-min nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_min(Nums :: [integer()]) -> integer().\nfind_min(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_min(nums :: [integer]) :: integer\n  def find_min(nums) do\n\n  end\nend"
      }
    ],
    "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.\n \nExample 1:\nInput: nums = [1,3,5]\nOutput: 1\nExample 2:\nInput: nums = [2,2,2,0,1]\nOutput: 0\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nnums is sorted and rotated between 1 and n times.\n\n \nFollow up: This problem is similar to Find Minimum in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?\n \n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3,5]", "[2,2,2,0,1]"],
    "title": "Find Minimum in Rotated Sorted Array II",
    "topic_tags": ["Array", "Binary Search"],
    "updated_at": 1695019661,
    "url": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/"
  },
  {
    "id": "33",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int search(int* nums, int numsSize, int target){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Search(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function search(nums: number[], target: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int search(List<int> nums, int target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func search(nums []int, target int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec search(Nums :: [integer()], Target :: integer()) -> integer().\nsearch(Nums, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n\n  end\nend"
      }
    ],
    "description": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n\n \nConstraints:\n\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nAll values of nums are unique.\nnums is an ascending array that is possibly rotated.\n-104 <= target <= 104\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[4,5,6,7,0,1,2]\n0", "[4,5,6,7,0,1,2]\n3", "[1]\n0"],
    "title": "Search in Rotated Sorted Array",
    "topic_tags": ["Array", "Binary Search"],
    "updated_at": 1695018983,
    "url": "https://leetcode.com/problems/search-in-rotated-sorted-array/"
  },
  {
    "id": "34",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function searchRange(nums: number[], target: number): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> searchRange(List<int> nums, int target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func searchRange(nums []int, target int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (search-range nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\nsearch_range(Nums, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nExample 3:\nInput: nums = [], target = 0\nOutput: [-1,-1]\n\n \nConstraints:\n\n0 <= nums.length <= 105\n-109 <= nums[i] <= 109\nnums is a non-decreasing array.\n-109 <= target <= 109\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[5,7,7,8,8,10]\n8", "[5,7,7,8,8,10]\n6", "[]\n0"],
    "title": "Find First and Last Position of Element in Sorted Array",
    "topic_tags": ["Array", "Binary Search"],
    "updated_at": 1695018984,
    "url": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"
  },
  {
    "id": "108",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode SortedArrayToBST(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction sortedArrayToBST(nums: number[]): TreeNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return TreeNode\n     */\n    function sortedArrayToBST($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun sortedArrayToBST(nums: IntArray): TreeNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  TreeNode? sortedArrayToBST(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sortedArrayToBST(nums []int) *TreeNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer[]} nums\n# @return {TreeNode}\ndef sorted_array_to_bst(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (sorted-array-to-bst nums)\n  (-> (listof exact-integer?) (or/c tree-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec sorted_array_to_bst(Nums :: [integer()]) -> #tree_node{} | null.\nsorted_array_to_bst(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec sorted_array_to_bst(nums :: [integer]) :: TreeNode.t | nil\n  def sorted_array_to_bst(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n \nExample 1:\n\n\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\n\nExample 2:\n\n\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in a strictly increasing order.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-10,-3,0,5,9]", "[1,3]"],
    "title": "Convert Sorted Array to Binary Search Tree",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019456,
    "url": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"
  },
  {
    "id": "501",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findMode(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int[] findMode(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMode(struct TreeNode* root, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int[] FindMode(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar findMode = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findMode(root: TreeNode | null): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function findMode($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findMode(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findMode(root: TreeNode?): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> findMode(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef find_mode(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def findMode(root: TreeNode): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_mode(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (find-mode root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec find_mode(Root :: #tree_node{} | null) -> [integer()].\nfind_mode(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec find_mode(root :: TreeNode.t | nil) :: [integer]\n  def find_mode(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n \nExample 1:\n\n\nInput: root = [1,null,2,2]\nOutput: [2]\n\nExample 2:\n\nInput: root = [0]\nOutput: [0]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105\n\n \nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,null,2,2]", "[0]"],
    "title": "Find Mode in Binary Search Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695094429,
    "url": "https://leetcode.com/problems/find-mode-in-binary-search-tree/"
  },
  {
    "id": "95",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction generateTrees(n: number): Array<TreeNode | null> {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<TreeNode?> generateTrees(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (generate-trees n)\n  (-> exact-integer? (listof (or/c tree-node? #f)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec generate_trees(N :: integer()) -> [#tree_node{} | null].\ngenerate_trees(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec generate_trees(n :: integer) :: [TreeNode.t | nil]\n  def generate_trees(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n \nExample 1:\n\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Unique Binary Search Trees II",
    "topic_tags": [
      "Dynamic Programming",
      "Backtracking",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/unique-binary-search-trees-ii/"
  },
  {
    "id": "96",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int numTrees(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int numTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def numTrees(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int numTrees(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int NumTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function numTrees(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun numTrees(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int numTrees(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func numTrees(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n \nExample 1:\n\n\nInput: n = 3\nOutput: 5\n\nExample 2:\n\nInput: n = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= n <= 19\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Unique Binary Search Trees",
    "topic_tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019448,
    "url": "https://leetcode.com/problems/unique-binary-search-trees/"
  },
  {
    "id": "94",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n \nExample 1:\n\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n \nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,null,2,3]", "[]", "[1]"],
    "title": "Binary Tree Inorder Traversal",
    "topic_tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/binary-tree-inorder-traversal/"
  },
  {
    "id": "100",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSameTree(struct TreeNode* p, struct TreeNode* q){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return Boolean\n     */\n    function isSameTree($p, $q) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSameTree(TreeNode? p, TreeNode? q) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {Boolean}\ndef is_same_tree(p, q)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-same-tree p q)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\nis_same_tree(P, Q) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\n  def is_same_tree(p, q) do\n\n  end\nend"
      }
    ],
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n \nExample 1:\n\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExample 2:\n\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExample 3:\n\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]\n[1,2,3]", "[1,2]\n[1,null,2]", "[1,2,1]\n[1,1,2]"],
    "title": "Same Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019451,
    "url": "https://leetcode.com/problems/same-tree/"
  },
  {
    "id": "124",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint maxPathSum(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int MaxPathSum(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction maxPathSum(root: TreeNode | null): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function maxPathSum($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func maxPathSum(_ root: TreeNode?) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun maxPathSum(root: TreeNode?): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  int maxPathSum(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxPathSum(root *TreeNode) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef max_path_sum(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def maxPathSum(root: TreeNode): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (max-path-sum root)\n  (-> (or/c tree-node? #f) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\nmax_path_sum(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\n  def max_path_sum(root) do\n\n  end\nend"
      }
    ],
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n \nExample 1:\n\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\nExample 2:\n\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]", "[-10,9,20,null,null,15,7]"],
    "title": "Binary Tree Maximum Path Sum",
    "topic_tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019638,
    "url": "https://leetcode.com/problems/binary-tree-maximum-path-sum/"
  },
  {
    "id": "297",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/** Encodes a tree to a single string. */\nchar* serialize(struct TreeNode* root) {\n    \n}\n\n/** Decodes your encoded data to tree. */\nstruct TreeNode* deserialize(char* data) {\n    \n}\n\n// Your functions will be called as such:\n// char* data = serialize(root);\n// deserialize(data);"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public string serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/*\n * Encodes a tree to a single string.\n */\nfunction serialize(root: TreeNode | null): string {\n\n};\n\n/*\n * Decodes your encoded data to tree.\n */\nfunction deserialize(data: string): TreeNode | null {\n\n};\n\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Codec {\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function serialize($root) {\n        \n    }\n  \n    /**\n     * @param String $data\n     * @return TreeNode\n     */\n    function deserialize($data) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $ser = Codec();\n * $deser = Codec();\n * $data = $ser->serialize($root);\n * $ans = $deser->deserialize($data);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Codec {\n    func serialize(_ root: TreeNode?) -> String {\n        \n    }\n    \n    func deserialize(_ data: String) -> TreeNode? {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// var ser = Codec()\n// var deser = Codec()\n// deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Codec() {\n\t// Encodes a URL to a shortened URL.\n    fun serialize(root: TreeNode?): String {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = Codec()\n * var deser = Codec()\n * var data = ser.serialize(longUrl)\n * var ans = deser.deserialize(data)\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    \n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    \n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# Encodes a tree to a single string.\n#\n# @param {TreeNode} root\n# @return {string}\ndef serialize(root)\n    \nend\n\n# Decodes your encoded data to tree.\n#\n# @param {string} data\n# @return {TreeNode}\ndef deserialize(data)\n    \nend\n\n\n# Your functions will be called as such:\n# deserialize(serialize(data))"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nclass Codec {\n    // Encodes a list of strings to a single string.\n    def serialize(root: TreeNode): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def deserialize(data: String): TreeNode = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = new Codec()\n * var deser = new Codec()\n * val s = ser.serialize(root)\n * val ans = deser.deserialize(s)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nstruct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n\t\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let data: String = obj.serialize(strs);\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\n */"
      }
    ],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n \nExample 1:\n\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,null,null,4,5]", "[]"],
    "title": "Serialize and Deserialize Binary Tree",
    "topic_tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "updated_at": 1695094202,
    "url": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"
  },
  {
    "id": "95",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction generateTrees(n: number): Array<TreeNode | null> {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<TreeNode?> generateTrees(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (generate-trees n)\n  (-> exact-integer? (listof (or/c tree-node? #f)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec generate_trees(N :: integer()) -> [#tree_node{} | null].\ngenerate_trees(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec generate_trees(n :: integer) :: [TreeNode.t | nil]\n  def generate_trees(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n \nExample 1:\n\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Unique Binary Search Trees II",
    "topic_tags": [
      "Dynamic Programming",
      "Backtracking",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/unique-binary-search-trees-ii/"
  },
  {
    "id": "96",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int numTrees(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int numTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def numTrees(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int numTrees(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int NumTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function numTrees(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun numTrees(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int numTrees(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func numTrees(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n \nExample 1:\n\n\nInput: n = 3\nOutput: 5\n\nExample 2:\n\nInput: n = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= n <= 19\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Unique Binary Search Trees",
    "topic_tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019448,
    "url": "https://leetcode.com/problems/unique-binary-search-trees/"
  },
  {
    "id": "67",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * addBinary(char * a, char * b){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function addBinary(a: string, b: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String addBinary(String a, String b) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func addBinary(a string, b string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (add-binary a b)\n  (-> string? string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n\n  end\nend"
      }
    ],
    "description": "Given two binary strings a and b, return their sum as a binary string.\n \nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\n \nConstraints:\n\n1 <= a.length, b.length <= 104\na and b consist only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"11\"\n\"1\"", "\"1010\"\n\"1011\""],
    "title": "Add Binary",
    "topic_tags": ["Math", "String", "Bit Manipulation", "Simulation"],
    "updated_at": 1695019007,
    "url": "https://leetcode.com/problems/add-binary/"
  },
  {
    "id": "136",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int singleNumber(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function singleNumber(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func singleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int singleNumber(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func singleNumber(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn single_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (single-number nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec single_number(Nums :: [integer()]) -> integer().\nsingle_number(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec single_number(nums :: [integer]) :: integer\n  def single_number(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n \nExample 1:\nInput: nums = [2,2,1]\nOutput: 1\nExample 2:\nInput: nums = [4,1,2,1,2]\nOutput: 4\nExample 3:\nInput: nums = [1]\nOutput: 1\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-3 * 104 <= nums[i] <= 3 * 104\nEach element in the array appears twice except for one element which appears only once.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,2,1]", "[4,1,2,1,2]", "[1]"],
    "title": "Single Number",
    "topic_tags": ["Array", "Bit Manipulation"],
    "updated_at": 1695019646,
    "url": "https://leetcode.com/problems/single-number/"
  },
  {
    "id": "691",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int minStickers(vector<string>& stickers, string target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int minStickers(String[] stickers, String target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int minStickers(char ** stickers, int stickersSize, char * target){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MinStickers(string[] stickers, string target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[]} stickers\n * @param {string} target\n * @return {number}\n */\nvar minStickers = function(stickers, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minStickers(stickers: string[], target: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[] $stickers\n     * @param String $target\n     * @return Integer\n     */\n    function minStickers($stickers, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minStickers(_ stickers: [String], _ target: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minStickers(stickers: Array<String>, target: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minStickers(List<String> stickers, String target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minStickers(stickers []string, target string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[]} stickers\n# @param {String} target\n# @return {Integer}\ndef min_stickers(stickers, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minStickers(stickers: Array[String], target: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_stickers(stickers: Vec<String>, target: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-stickers stickers target)\n  (-> (listof string?) string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_stickers(Stickers :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\nmin_stickers(Stickers, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_stickers(stickers :: [String.t], target :: String.t) :: integer\n  def min_stickers(stickers, target) do\n\n  end\nend"
      }
    ],
    "description": "We are given n different types of stickers. Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\n \nExample 1:\n\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\nOutput: 3\nExplanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string.\n\nExample 2:\n\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\nOutput: -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n\n \nConstraints:\n\nn == stickers.length\n1 <= n <= 50\n1 <= stickers[i].length <= 10\n1 <= target.length <= 15\nstickers[i] and target consist of lowercase English letters.\n\n",
    "difficulty": "Hard",
    "hints": [
      "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"with\",\"example\",\"science\"]\n\"thehat\"",
      "[\"notice\",\"possible\"]\n\"basicbasic\""
    ],
    "title": "Stickers to Spell Word",
    "topic_tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "updated_at": 1695094621,
    "url": "https://leetcode.com/problems/stickers-to-spell-word/"
  },
  {
    "id": "798",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int movesToChessboard(vector<vector<int>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int movesToChessboard(int[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def movesToChessboard(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def movesToChessboard(self, board: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int movesToChessboard(int** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MovesToChessboard(int[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar movesToChessboard = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function movesToChessboard(board: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function movesToChessboard($board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func movesToChessboard(_ board: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun movesToChessboard(board: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int movesToChessboard(List<List<int>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func movesToChessboard(board [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} board\n# @return {Integer}\ndef moves_to_chessboard(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def movesToChessboard(board: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn moves_to_chessboard(board: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (moves-to-chessboard board)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec moves_to_chessboard(Board :: [[integer()]]) -> integer().\nmoves_to_chessboard(Board) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec moves_to_chessboard(board :: [[integer]]) :: integer\n  def moves_to_chessboard(board) do\n\n  end\nend"
      }
    ],
    "description": "You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.\nReturn the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.\nA chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.\n \nExample 1:\n\n\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\nOutput: 2\nExplanation: One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n\nExample 2:\n\n\nInput: board = [[0,1],[1,0]]\nOutput: 0\nExplanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.\n\nExample 3:\n\n\nInput: board = [[1,0],[1,0]]\nOutput: -1\nExplanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.\n\n \nConstraints:\n\nn == board.length\nn == board[i].length\n2 <= n <= 30\nboard[i][j] is either 0 or 1.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]",
      "[[0,1],[1,0]]",
      "[[1,0],[1,0]]"
    ],
    "title": "Transform to Chessboard",
    "topic_tags": ["Array", "Math", "Bit Manipulation", "Matrix"],
    "updated_at": 1695094732,
    "url": "https://leetcode.com/problems/transform-to-chessboard/"
  },
  {
    "id": "29",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int divide(int dividend, int divisor) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int divide(int dividend, int divisor){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Divide(int dividend, int divisor) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function divide(dividend: number, divisor: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int divide(int dividend, int divisor) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func divide(dividend int, divisor int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (divide dividend divisor)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\ndivide(Dividend, Divisor) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\n  def divide(dividend, divisor) do\n\n  end\nend"
      }
    ],
    "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n \nExample 1:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n\nExample 2:\n\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n\n \nConstraints:\n\n-231 <= dividend, divisor <= 231 - 1\ndivisor != 0\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10\n3", "7\n-3"],
    "title": "Divide Two Integers",
    "topic_tags": ["Math", "Bit Manipulation"],
    "updated_at": 1695018980,
    "url": "https://leetcode.com/problems/divide-two-integers/"
  },
  {
    "id": "78",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> Subsets(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function subsets(nums: number[]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsets($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun subsets(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> subsets(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func subsets(nums []int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (subsets nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec subsets(Nums :: [integer()]) -> [[integer()]].\nsubsets(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec subsets(nums :: [integer]) :: [[integer]]\n  def subsets(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\n\nInput: nums = [0]\nOutput: [[],[0]]\n\n \nConstraints:\n\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10\nAll the numbers of nums are unique.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]", "[0]"],
    "title": "Subsets",
    "topic_tags": ["Array", "Backtracking", "Bit Manipulation"],
    "updated_at": 1695019434,
    "url": "https://leetcode.com/problems/subsets/"
  },
  {
    "id": "691",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int minStickers(vector<string>& stickers, string target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int minStickers(String[] stickers, String target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int minStickers(char ** stickers, int stickersSize, char * target){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MinStickers(string[] stickers, string target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[]} stickers\n * @param {string} target\n * @return {number}\n */\nvar minStickers = function(stickers, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minStickers(stickers: string[], target: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[] $stickers\n     * @param String $target\n     * @return Integer\n     */\n    function minStickers($stickers, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minStickers(_ stickers: [String], _ target: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minStickers(stickers: Array<String>, target: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minStickers(List<String> stickers, String target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minStickers(stickers []string, target string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[]} stickers\n# @param {String} target\n# @return {Integer}\ndef min_stickers(stickers, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minStickers(stickers: Array[String], target: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_stickers(stickers: Vec<String>, target: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-stickers stickers target)\n  (-> (listof string?) string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_stickers(Stickers :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\nmin_stickers(Stickers, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_stickers(stickers :: [String.t], target :: String.t) :: integer\n  def min_stickers(stickers, target) do\n\n  end\nend"
      }
    ],
    "description": "We are given n different types of stickers. Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\n \nExample 1:\n\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\nOutput: 3\nExplanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string.\n\nExample 2:\n\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\nOutput: -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n\n \nConstraints:\n\nn == stickers.length\n1 <= n <= 50\n1 <= stickers[i].length <= 10\n1 <= target.length <= 15\nstickers[i] and target consist of lowercase English letters.\n\n",
    "difficulty": "Hard",
    "hints": [
      "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"with\",\"example\",\"science\"]\n\"thehat\"",
      "[\"notice\",\"possible\"]\n\"basicbasic\""
    ],
    "title": "Stickers to Spell Word",
    "topic_tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "updated_at": 1695094621,
    "url": "https://leetcode.com/problems/stickers-to-spell-word/"
  },
  {
    "id": "823",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool splitArraySameAverage(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean splitArraySameAverage(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def splitArraySameAverage(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def splitArraySameAverage(self, nums: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool splitArraySameAverage(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool SplitArraySameAverage(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar splitArraySameAverage = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function splitArraySameAverage(nums: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function splitArraySameAverage($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func splitArraySameAverage(_ nums: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun splitArraySameAverage(nums: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool splitArraySameAverage(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func splitArraySameAverage(nums []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef split_array_same_average(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def splitArraySameAverage(nums: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn split_array_same_average(nums: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (split-array-same-average nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec split_array_same_average(Nums :: [integer()]) -> boolean().\nsplit_array_same_average(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec split_array_same_average(nums :: [integer]) :: boolean\n  def split_array_same_average(nums) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array nums.\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\nReturn true if it is possible to achieve that and false otherwise.\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n\nExample 2:\n\nInput: nums = [3,1]\nOutput: false\n\n \nConstraints:\n\n1 <= nums.length <= 30\n0 <= nums[i] <= 104\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4,5,6,7,8]", "[3,1]"],
    "title": "Split Array With Same Average",
    "topic_tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "updated_at": 1695094768,
    "url": "https://leetcode.com/problems/split-array-with-same-average/"
  },
  {
    "id": "464",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canIWin(self, maxChoosableInteger, desiredTotal):\n        \"\"\"\n        :type maxChoosableInteger: int\n        :type desiredTotal: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canIWin(int maxChoosableInteger, int desiredTotal){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} maxChoosableInteger\n * @param {number} desiredTotal\n * @return {boolean}\n */\nvar canIWin = function(maxChoosableInteger, desiredTotal) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canIWin(maxChoosableInteger: number, desiredTotal: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $maxChoosableInteger\n     * @param Integer $desiredTotal\n     * @return Boolean\n     */\n    function canIWin($maxChoosableInteger, $desiredTotal) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canIWin(_ maxChoosableInteger: Int, _ desiredTotal: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canIWin(int maxChoosableInteger, int desiredTotal) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canIWin(maxChoosableInteger int, desiredTotal int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} max_choosable_integer\n# @param {Integer} desired_total\n# @return {Boolean}\ndef can_i_win(max_choosable_integer, desired_total)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_i_win(max_choosable_integer: i32, desired_total: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-i-win maxChoosableInteger desiredTotal)\n  (-> exact-integer? exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_i_win(MaxChoosableInteger :: integer(), DesiredTotal :: integer()) -> boolean().\ncan_i_win(MaxChoosableInteger, DesiredTotal) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_i_win(max_choosable_integer :: integer, desired_total :: integer) :: boolean\n  def can_i_win(max_choosable_integer, desired_total) do\n\n  end\nend"
      }
    ],
    "description": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\nWhat if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n \nExample 1:\n\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n\nExample 2:\n\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n\nExample 3:\n\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n\n \nConstraints:\n\n1 <= maxChoosableInteger <= 20\n0 <= desiredTotal <= 300\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10\n11", "10\n0", "10\n1"],
    "title": "Can I Win",
    "topic_tags": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Game Theory",
      "Bitmask"
    ],
    "updated_at": 1695094385,
    "url": "https://leetcode.com/problems/can-i-win/"
  },
  {
    "id": "473",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool makesquare(vector<int>& matchsticks) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean makesquare(int[] matchsticks) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def makesquare(self, matchsticks):\n        \"\"\"\n        :type matchsticks: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool makesquare(int* matchsticks, int matchsticksSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool Makesquare(int[] matchsticks) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} matchsticks\n * @return {boolean}\n */\nvar makesquare = function(matchsticks) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function makesquare(matchsticks: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $matchsticks\n     * @return Boolean\n     */\n    function makesquare($matchsticks) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func makesquare(_ matchsticks: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun makesquare(matchsticks: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool makesquare(List<int> matchsticks) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func makesquare(matchsticks []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} matchsticks\n# @return {Boolean}\ndef makesquare(matchsticks)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def makesquare(matchsticks: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn makesquare(matchsticks: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (makesquare matchsticks)\n  (-> (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec makesquare(Matchsticks :: [integer()]) -> boolean().\nmakesquare(Matchsticks) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec makesquare(matchsticks :: [integer]) :: boolean\n  def makesquare(matchsticks) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.\n \nExample 1:\n\n\nInput: matchsticks = [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n\nExample 2:\n\nInput: matchsticks = [3,3,3,3,4]\nOutput: false\nExplanation: You cannot find a way to form a square with all the matchsticks.\n\n \nConstraints:\n\n1 <= matchsticks.length <= 15\n1 <= matchsticks[i] <= 108\n\n",
    "difficulty": "Medium",
    "hints": [
      "Treat the matchsticks as an array. Can we split the array into 4 equal parts?",
      "Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options!",
      "For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this.",
      "We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the length of each of the 4 sides.",
      "When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,2,2,2]", "[3,3,3,3,4]"],
    "title": "Matchsticks to Square",
    "topic_tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "updated_at": 1695094391,
    "url": "https://leetcode.com/problems/matchsticks-to-square/"
  },
  {
    "id": "292",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canWinNim(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canWinNim(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canWinNim(self, n: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canWinNim(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanWinNim(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar canWinNim = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canWinNim(n: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canWinNim($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canWinNim(_ n: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canWinNim(n: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canWinNim(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canWinNim(n int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Boolean}\ndef can_win_nim(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canWinNim(n: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_win_nim(n: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-win-nim n)\n  (-> exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_win_nim(N :: integer()) -> boolean().\ncan_win_nim(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_win_nim(n :: integer) :: boolean\n  def can_win_nim(n) do\n\n  end\nend"
      }
    ],
    "description": "You are playing the following Nim Game with your friend:\n\nInitially, there is a heap of stones on the table.\nYou and your friend will alternate taking turns, and you go first.\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\nThe one who removes the last stone is the winner.\n\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n \nExample 1:\n\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n\nExample 2:\n\nInput: n = 1\nOutput: true\n\nExample 3:\n\nInput: n = 2\nOutput: true\n\n \nConstraints:\n\n1 <= n <= 231 - 1\n\n",
    "difficulty": "Easy",
    "hints": [
      "If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["4", "1", "2"],
    "title": "Nim Game",
    "topic_tags": ["Math", "Brainteaser", "Game Theory"],
    "updated_at": 1695094198,
    "url": "https://leetcode.com/problems/nim-game/"
  },
  {
    "id": "828",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool xorGame(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean xorGame(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def xorGame(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def xorGame(self, nums: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool xorGame(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool XorGame(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar xorGame = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function xorGame(nums: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function xorGame($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func xorGame(_ nums: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun xorGame(nums: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool xorGame(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func xorGame(nums []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef xor_game(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def xorGame(nums: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn xor_game(nums: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (xor-game nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec xor_game(Nums :: [integer()]) -> boolean().\nxor_game(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec xor_game(nums :: [integer]) :: boolean\n  def xor_game(nums) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of integers nums represents the numbers written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: false\nExplanation: \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: true\n\nExample 3:\n\nInput: nums = [1,2,3]\nOutput: true\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n0 <= nums[i] < 216\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,2]", "[0,1]", "[1,2,3]"],
    "title": "Chalkboard XOR Game",
    "topic_tags": [
      "Array",
      "Math",
      "Bit Manipulation",
      "Brainteaser",
      "Game Theory"
    ],
    "updated_at": 1695094776,
    "url": "https://leetcode.com/problems/chalkboard-xor-game/"
  },
  {
    "id": "319",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int bulbSwitch(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int bulbSwitch(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def bulbSwitch(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def bulbSwitch(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int bulbSwitch(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int BulbSwitch(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar bulbSwitch = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function bulbSwitch(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function bulbSwitch($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func bulbSwitch(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun bulbSwitch(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int bulbSwitch(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func bulbSwitch(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef bulb_switch(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def bulbSwitch(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn bulb_switch(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (bulb-switch n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec bulb_switch(N :: integer()) -> integer().\nbulb_switch(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec bulb_switch(n :: integer) :: integer\n  def bulb_switch(n) do\n\n  end\nend"
      }
    ],
    "description": "There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.\n \nExample 1:\n\n\nInput: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.\nExample 2:\n\nInput: n = 0\nOutput: 0\n\nExample 3:\n\nInput: n = 1\nOutput: 1\n\n \nConstraints:\n\n0 <= n <= 109\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "0", "1"],
    "title": "Bulb Switcher",
    "topic_tags": ["Math", "Brainteaser"],
    "updated_at": 1695094221,
    "url": "https://leetcode.com/problems/bulb-switcher/"
  },
  {
    "id": "100",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSameTree(struct TreeNode* p, struct TreeNode* q){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return Boolean\n     */\n    function isSameTree($p, $q) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSameTree(TreeNode? p, TreeNode? q) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {Boolean}\ndef is_same_tree(p, q)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-same-tree p q)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\nis_same_tree(P, Q) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\n  def is_same_tree(p, q) do\n\n  end\nend"
      }
    ],
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n \nExample 1:\n\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExample 2:\n\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExample 3:\n\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]\n[1,2,3]", "[1,2]\n[1,null,2]", "[1,2,1]\n[1,1,2]"],
    "title": "Same Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019451,
    "url": "https://leetcode.com/problems/same-tree/"
  },
  {
    "id": "101",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSymmetric(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSymmetric(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSymmetric(root: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isSymmetric($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSymmetric(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSymmetric(root: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSymmetric(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSymmetric(root *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_symmetric(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSymmetric(root: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_symmetric(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-symmetric root)\n  (-> (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_symmetric(Root :: #tree_node{} | null) -> boolean().\nis_symmetric(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_symmetric(root :: TreeNode.t | nil) :: boolean\n  def is_symmetric(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n \nExample 1:\n\n\nInput: root = [1,2,2,3,4,4,3]\nOutput: true\n\nExample 2:\n\n\nInput: root = [1,2,2,null,3,null,3]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n-100 <= Node.val <= 100\n\n \nFollow up: Could you solve it both recursively and iteratively?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,2,3,4,4,3]", "[1,2,2,null,3,null,3]"],
    "title": "Symmetric Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019451,
    "url": "https://leetcode.com/problems/symmetric-tree/"
  },
  {
    "id": "126",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** findLadders(char * beginWord, char * endWord, char ** wordList, int wordListSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<string>> FindLadders(string beginWord, string endWord, IList<string> wordList) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nvar findLadders = function(beginWord, endWord, wordList) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findLadders(beginWord: string, endWord: string, wordList: string[]): string[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $beginWord\n     * @param String $endWord\n     * @param String[] $wordList\n     * @return String[][]\n     */\n    function findLadders($beginWord, $endWord, $wordList) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findLadders(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> [[String]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findLadders(beginWord: String, endWord: String, wordList: List<String>): List<List<String>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findLadders(beginWord string, endWord string, wordList []string) [][]string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} begin_word\n# @param {String} end_word\n# @param {String[]} word_list\n# @return {String[][]}\ndef find_ladders(begin_word, end_word, word_list)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findLadders(beginWord: String, endWord: String, wordList: List[String]): List[List[String]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_ladders(begin_word: String, end_word: String, word_list: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-ladders beginWord endWord wordList)\n  (-> string? string? (listof string?) (listof (listof string?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_ladders(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\nfind_ladders(BeginWord, EndWord, WordList) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_ladders(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: [[String.t]]\n  def find_ladders(begin_word, end_word, word_list) do\n\n  end\nend"
      }
    ],
    "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\n \nExample 1:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation: There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n\nExample 2:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n \nConstraints:\n\n1 <= beginWord.length <= 5\nendWord.length == beginWord.length\n1 <= wordList.length <= 500\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\nThe sum of all shortest transformation sequences does not exceed 105.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
      "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
    ],
    "title": "Word Ladder II",
    "topic_tags": [
      "Hash Table",
      "String",
      "Backtracking",
      "Breadth-First Search"
    ],
    "updated_at": 1695019639,
    "url": "https://leetcode.com/problems/word-ladder-ii/"
  },
  {
    "id": "127",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int ladderLength(char * beginWord, char * endWord, char ** wordList, int wordListSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nvar ladderLength = function(beginWord, endWord, wordList) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $beginWord\n     * @param String $endWord\n     * @param String[] $wordList\n     * @return Integer\n     */\n    function ladderLength($beginWord, $endWord, $wordList) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun ladderLength(beginWord: String, endWord: String, wordList: List<String>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int ladderLength(String beginWord, String endWord, List<String> wordList) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func ladderLength(beginWord string, endWord string, wordList []string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} begin_word\n# @param {String} end_word\n# @param {String[]} word_list\n# @return {Integer}\ndef ladder_length(begin_word, end_word, word_list)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn ladder_length(begin_word: String, end_word: String, word_list: Vec<String>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (ladder-length beginWord endWord wordList)\n  (-> string? string? (listof string?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec ladder_length(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> integer().\nladder_length(BeginWord, EndWord, WordList) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec ladder_length(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: integer\n  def ladder_length(begin_word, end_word, word_list) do\n\n  end\nend"
      }
    ],
    "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n \nExample 1:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n\nExample 2:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n \nConstraints:\n\n1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
      "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
    ],
    "title": "Word Ladder",
    "topic_tags": ["Hash Table", "String", "Breadth-First Search"],
    "updated_at": 1695019640,
    "url": "https://leetcode.com/problems/word-ladder/"
  },
  {
    "id": "102",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<IList<int>> LevelOrder(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction levelOrder(root: TreeNode | null): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[][]\n     */\n    function levelOrder($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func levelOrder(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun levelOrder(root: TreeNode?): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<List<int>> levelOrder(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[][]}\ndef level_order(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def levelOrder(root: TreeNode): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (level-order root)\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec level_order(Root :: #tree_node{} | null) -> [[integer()]].\nlevel_order(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec level_order(root :: TreeNode.t | nil) :: [[integer]]\n  def level_order(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n \nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n\nExample 2:\n\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,9,20,null,null,15,7]", "[1]", "[]"],
    "title": "Binary Tree Level Order Traversal",
    "topic_tags": ["Tree", "Breadth-First Search", "Binary Tree"],
    "updated_at": 1695019452,
    "url": "https://leetcode.com/problems/binary-tree-level-order-traversal/"
  },
  {
    "id": "103",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction zigzagLevelOrder(root: TreeNode | null): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[][]\n     */\n    function zigzagLevelOrder($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func zigzagLevelOrder(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun zigzagLevelOrder(root: TreeNode?): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<List<int>> zigzagLevelOrder(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[][]}\ndef zigzag_level_order(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def zigzagLevelOrder(root: TreeNode): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn zigzag_level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (zigzag-level-order root)\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec zigzag_level_order(Root :: #tree_node{} | null) -> [[integer()]].\nzigzag_level_order(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec zigzag_level_order(root :: TreeNode.t | nil) :: [[integer]]\n  def zigzag_level_order(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n \nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n\nExample 2:\n\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,9,20,null,null,15,7]", "[1]", "[]"],
    "title": "Binary Tree Zigzag Level Order Traversal",
    "topic_tags": ["Tree", "Breadth-First Search", "Binary Tree"],
    "updated_at": 1695019453,
    "url": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/"
  },
  {
    "id": "164",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maximumGap(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maximumGap(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaximumGap(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumGap = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maximumGap(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumGap($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maximumGap(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maximumGap(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maximumGap(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maximumGap(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_gap(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maximumGap(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn maximum_gap(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (maximum-gap nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec maximum_gap(Nums :: [integer()]) -> integer().\nmaximum_gap(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec maximum_gap(nums :: [integer]) :: integer\n  def maximum_gap(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\n \nExample 1:\n\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n\nExample 2:\n\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,6,9,1]", "[10]"],
    "title": "Maximum Gap",
    "topic_tags": ["Array", "Sorting", "Bucket Sort", "Radix Sort"],
    "updated_at": 1695019666,
    "url": "https://leetcode.com/problems/maximum-gap/"
  },
  {
    "id": "220",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff, int valueDiff) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool containsNearbyAlmostDuplicate(int* nums, int numsSize, int indexDiff, int valueDiff){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool ContainsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} indexDiff\n * @param {number} valueDiff\n * @return {boolean}\n */\nvar containsNearbyAlmostDuplicate = function(nums, indexDiff, valueDiff) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function containsNearbyAlmostDuplicate(nums: number[], indexDiff: number, valueDiff: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $indexDiff\n     * @param Integer $valueDiff\n     * @return Boolean\n     */\n    function containsNearbyAlmostDuplicate($nums, $indexDiff, $valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func containsNearbyAlmostDuplicate(_ nums: [Int], _ indexDiff: Int, _ valueDiff: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun containsNearbyAlmostDuplicate(nums: IntArray, indexDiff: Int, valueDiff: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool containsNearbyAlmostDuplicate(List<int> nums, int indexDiff, int valueDiff) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func containsNearbyAlmostDuplicate(nums []int, indexDiff int, valueDiff int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} index_diff\n# @param {Integer} value_diff\n# @return {Boolean}\ndef contains_nearby_almost_duplicate(nums, index_diff, value_diff)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def containsNearbyAlmostDuplicate(nums: Array[Int], indexDiff: Int, valueDiff: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn contains_nearby_almost_duplicate(nums: Vec<i32>, index_diff: i32, value_diff: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (contains-nearby-almost-duplicate nums indexDiff valueDiff)\n  (-> (listof exact-integer?) exact-integer? exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec contains_nearby_almost_duplicate(Nums :: [integer()], IndexDiff :: integer(), ValueDiff :: integer()) -> boolean().\ncontains_nearby_almost_duplicate(Nums, IndexDiff, ValueDiff) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec contains_nearby_almost_duplicate(nums :: [integer], index_diff :: integer, value_diff :: integer) :: boolean\n  def contains_nearby_almost_duplicate(nums, index_diff, value_diff) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n\ni != j,\nabs(i - j) <= indexDiff.\nabs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n \nExample 1:\n\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n\nExample 2:\n\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n \nConstraints:\n\n2 <= nums.length <= 105\n-109 <= nums[i] <= 109\n1 <= indexDiff <= nums.length\n0 <= valueDiff <= 109\n\n",
    "difficulty": "Hard",
    "hints": [
      "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
      "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,1]\n3\n0", "[1,5,9,1,5,9]\n2\n3"],
    "title": "Contains Duplicate III",
    "topic_tags": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "updated_at": 1695094137,
    "url": "https://leetcode.com/problems/contains-duplicate-iii/"
  },
  {
    "id": "347",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] TopKFrequent(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function topKFrequent(nums: number[], k: number): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function topKFrequent($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func topKFrequent(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun topKFrequent(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> topKFrequent(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func topKFrequent(nums []int, k int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef top_k_frequent(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def topKFrequent(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (top-k-frequent nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec top_k_frequent(Nums :: [integer()], K :: integer()) -> [integer()].\ntop_k_frequent(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec top_k_frequent(nums :: [integer], k :: integer) :: [integer]\n  def top_k_frequent(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n \nExample 1:\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\nExample 2:\nInput: nums = [1], k = 1\nOutput: [1]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\nk is in the range [1, the number of unique elements in the array].\nIt is guaranteed that the answer is unique.\n\n \nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,1,2,2,3]\n2", "[1]\n1"],
    "title": "Top K Frequent Elements",
    "topic_tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect"
    ],
    "updated_at": 1695094252,
    "url": "https://leetcode.com/problems/top-k-frequent-elements/"
  },
  {
    "id": "451",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string frequencySort(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String frequencySort(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def frequencySort(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * frequencySort(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string FrequencySort(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar frequencySort = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function frequencySort(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function frequencySort($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func frequencySort(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun frequencySort(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String frequencySort(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func frequencySort(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef frequency_sort(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def frequencySort(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn frequency_sort(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (frequency-sort s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec frequency_sort(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfrequency_sort(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec frequency_sort(s :: String.t) :: String.t\n  def frequency_sort(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\nReturn the sorted string. If there are multiple answers, return any of them.\n \nExample 1:\n\nInput: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n\nExample 3:\n\nInput: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n\n \nConstraints:\n\n1 <= s.length <= 5 * 105\ns consists of uppercase and lowercase English letters and digits.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"tree\"", "\"cccaaa\"", "\"Aabb\""],
    "title": "Sort Characters By Frequency",
    "topic_tags": [
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "updated_at": 1695094365,
    "url": "https://leetcode.com/problems/sort-characters-by-frequency/"
  },
  {
    "id": "458",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int poorPigs(int buckets, int minutesToDie, int minutesToTest){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int PoorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} buckets\n * @param {number} minutesToDie\n * @param {number} minutesToTest\n * @return {number}\n */\nvar poorPigs = function(buckets, minutesToDie, minutesToTest) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function poorPigs(buckets: number, minutesToDie: number, minutesToTest: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $buckets\n     * @param Integer $minutesToDie\n     * @param Integer $minutesToTest\n     * @return Integer\n     */\n    function poorPigs($buckets, $minutesToDie, $minutesToTest) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func poorPigs(_ buckets: Int, _ minutesToDie: Int, _ minutesToTest: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun poorPigs(buckets: Int, minutesToDie: Int, minutesToTest: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func poorPigs(buckets int, minutesToDie int, minutesToTest int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} buckets\n# @param {Integer} minutes_to_die\n# @param {Integer} minutes_to_test\n# @return {Integer}\ndef poor_pigs(buckets, minutes_to_die, minutes_to_test)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def poorPigs(buckets: Int, minutesToDie: Int, minutesToTest: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn poor_pigs(buckets: i32, minutes_to_die: i32, minutes_to_test: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (poor-pigs buckets minutesToDie minutesToTest)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec poor_pigs(Buckets :: integer(), MinutesToDie :: integer(), MinutesToTest :: integer()) -> integer().\npoor_pigs(Buckets, MinutesToDie, MinutesToTest) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec poor_pigs(buckets :: integer, minutes_to_die :: integer, minutes_to_test :: integer) :: integer\n  def poor_pigs(buckets, minutes_to_die, minutes_to_test) do\n\n  end\nend"
      }
    ],
    "description": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\nYou can feed the pigs according to these steps:\n\nChoose some live pigs to feed.\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\nWait for minutesToDie minutes. You may not feed any other pigs during this time.\nAfter minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\nRepeat this process until you run out of time.\n\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n \nExample 1:\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.\n\nExample 2:\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n\n \nConstraints:\n\n1 <= buckets <= 1000\n1 <= minutesToDie <= minutesToTest <= 100\n\n",
    "difficulty": "Hard",
    "hints": [
      "What if you only have one shot? Eg. 4 buckets, 15 mins to die, and 15 mins to test.",
      "How many states can we generate with x pigs and T tests?",
      "Find minimum x such that (T+1)^x >= N"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["4\n15\n15", "4\n15\n30"],
    "title": "Poor Pigs",
    "topic_tags": ["Math", "Dynamic Programming", "Combinatorics"],
    "updated_at": 1695094376,
    "url": "https://leetcode.com/problems/poor-pigs/"
  },
  {
    "id": "489",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string kthSmallestPath(vector<int>& destination, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String kthSmallestPath(int[] destination, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def kthSmallestPath(self, destination, k):\n        \"\"\"\n        :type destination: List[int]\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def kthSmallestPath(self, destination: List[int], k: int) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * kthSmallestPath(int* destination, int destinationSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string KthSmallestPath(int[] destination, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} destination\n * @param {number} k\n * @return {string}\n */\nvar kthSmallestPath = function(destination, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function kthSmallestPath(destination: number[], k: number): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $destination\n     * @param Integer $k\n     * @return String\n     */\n    function kthSmallestPath($destination, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func kthSmallestPath(_ destination: [Int], _ k: Int) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun kthSmallestPath(destination: IntArray, k: Int): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String kthSmallestPath(List<int> destination, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func kthSmallestPath(destination []int, k int) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} destination\n# @param {Integer} k\n# @return {String}\ndef kth_smallest_path(destination, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def kthSmallestPath(destination: Array[Int], k: Int): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn kth_smallest_path(destination: Vec<i32>, k: i32) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (kth-smallest-path destination k)\n  (-> (listof exact-integer?) exact-integer? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec kth_smallest_path(Destination :: [integer()], K :: integer()) -> unicode:unicode_binary().\nkth_smallest_path(Destination, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec kth_smallest_path(destination :: [integer], k :: integer) :: String.t\n  def kth_smallest_path(destination, k) do\n\n  end\nend"
      }
    ],
    "description": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.\nThe instructions are represented as a string, where each character is either:\n\n'H', meaning move horizontally (go right), or\n'V', meaning move vertically (go down).\n\nMultiple instructions will lead Bob to destination. For example, if destination is (2, 3), both \"HHHVV\" and \"HVHVH\" are valid instructions.\nHowever, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.\nGiven an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.\n \nExample 1:\n\n\nInput: destination = [2,3], k = 1\nOutput: \"HHHVV\"\nExplanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].\n\nExample 2:\n\n\nInput: destination = [2,3], k = 2\nOutput: \"HHVHV\"\n\nExample 3:\n\n\nInput: destination = [2,3], k = 3\nOutput: \"HHVVH\"\n\n \nConstraints:\n\ndestination.length == 2\n1 <= row, column <= 15\n1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b​​​​​.\n\n",
    "difficulty": "Hard",
    "hints": [
      "There are nCr(row + column, row) possible instructions to reach (row, column).",
      "Try building the instructions one step at a time. How many instructions start with \"H\", and how does this compare with k?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,3]\n1", "[2,3]\n2", "[2,3]\n3"],
    "title": "Kth Smallest Instructions",
    "topic_tags": ["Array", "Math", "Dynamic Programming", "Combinatorics"],
    "updated_at": 1695094411,
    "url": "https://leetcode.com/problems/kth-smallest-instructions/"
  },
  {
    "id": "62",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int uniquePaths(int m, int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int uniquePaths(int m, int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int UniquePaths(int m, int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function uniquePaths(m: number, n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int uniquePaths(int m, int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func uniquePaths(m int, n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (unique-paths m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec unique_paths(M :: integer(), N :: integer()) -> integer().\nunique_paths(M, N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec unique_paths(m :: integer, n :: integer) :: integer\n  def unique_paths(m, n) do\n\n  end\nend"
      }
    ],
    "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\n \nExample 1:\n\n\nInput: m = 3, n = 7\nOutput: 28\n\nExample 2:\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n\n \nConstraints:\n\n1 <= m, n <= 100\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3\n7", "3\n2"],
    "title": "Unique Paths",
    "topic_tags": ["Math", "Dynamic Programming", "Combinatorics"],
    "updated_at": 1695019004,
    "url": "https://leetcode.com/problems/unique-paths/"
  },
  {
    "id": "169",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int majorityElement(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function majorityElement(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int majorityElement(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func majorityElement(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (majority-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec majority_element(Nums :: [integer()]) -> integer().\nmajority_element(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n \nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,3]", "[2,2,1,1,1,2,2]"],
    "title": "Majority Element",
    "topic_tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Counting"
    ],
    "updated_at": 1695019671,
    "url": "https://leetcode.com/problems/majority-element/"
  },
  {
    "id": "383",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canConstruct(char * ransomNote, char * magazine){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanConstruct(string ransomNote, string magazine) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canConstruct(ransomNote: string, magazine: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $ransomNote\n     * @param String $magazine\n     * @return Boolean\n     */\n    function canConstruct($ransomNote, $magazine) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canConstruct(String ransomNote, String magazine) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canConstruct(ransomNote string, magazine string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} ransom_note\n# @param {String} magazine\n# @return {Boolean}\ndef can_construct(ransom_note, magazine)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-construct ransomNote magazine)\n  (-> string? string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_construct(RansomNote :: unicode:unicode_binary(), Magazine :: unicode:unicode_binary()) -> boolean().\ncan_construct(RansomNote, Magazine) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_construct(ransom_note :: String.t, magazine :: String.t) :: boolean\n  def can_construct(ransom_note, magazine) do\n\n  end\nend"
      }
    ],
    "description": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.\n \nExample 1:\nInput: ransomNote = \"a\", magazine = \"b\"\nOutput: false\nExample 2:\nInput: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false\nExample 3:\nInput: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true\n\n \nConstraints:\n\n1 <= ransomNote.length, magazine.length <= 105\nransomNote and magazine consist of lowercase English letters.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"a\"\n\"b\"", "\"aa\"\n\"ab\"", "\"aa\"\n\"aab\""],
    "title": "Ransom Note",
    "topic_tags": ["Hash Table", "String", "Counting"],
    "updated_at": 1695094283,
    "url": "https://leetcode.com/problems/ransom-note/"
  },
  {
    "id": "229",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* majorityElement(int* nums, int numsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> MajorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar majorityElement = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function majorityElement(nums: number[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function majorityElement($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun majorityElement(nums: IntArray): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> majorityElement(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func majorityElement(nums []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef majority_element(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def majorityElement(nums: Array[Int]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec majority_element(Nums :: [integer()]) -> [integer()].\nmajority_element(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: [integer]\n  def majority_element(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\n \nExample 1:\n\nInput: nums = [3,2,3]\nOutput: [3]\n\nExample 2:\n\nInput: nums = [1]\nOutput: [1]\n\nExample 3:\n\nInput: nums = [1,2]\nOutput: [1,2]\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n-109 <= nums[i] <= 109\n\n \nFollow up: Could you solve the problem in linear time and in O(1) space?\n",
    "difficulty": "Medium",
    "hints": [
      "How many majority elements could it possibly have?\r\n\r\nDo you have a better hint? Suggest it!"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,3]", "[1]", "[1,2]"],
    "title": "Majority Element II",
    "topic_tags": ["Array", "Hash Table", "Sorting", "Counting"],
    "updated_at": 1695094151,
    "url": "https://leetcode.com/problems/majority-element-ii/"
  },
  {
    "id": "299",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string getHint(string secret, string guess) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String getHint(String secret, String guess) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getHint(self, secret, guess):\n        \"\"\"\n        :type secret: str\n        :type guess: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * getHint(char * secret, char * guess){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string GetHint(string secret, string guess) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} secret\n * @param {string} guess\n * @return {string}\n */\nvar getHint = function(secret, guess) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getHint(secret: string, guess: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $secret\n     * @param String $guess\n     * @return String\n     */\n    function getHint($secret, $guess) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getHint(_ secret: String, _ guess: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getHint(secret: String, guess: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String getHint(String secret, String guess) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getHint(secret string, guess string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} secret\n# @param {String} guess\n# @return {String}\ndef get_hint(secret, guess)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getHint(secret: String, guess: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_hint(secret: String, guess: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (get-hint secret guess)\n  (-> string? string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_hint(Secret :: unicode:unicode_binary(), Guess :: unicode:unicode_binary()) -> unicode:unicode_binary().\nget_hint(Secret, Guess) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_hint(secret :: String.t, guess :: String.t) :: String.t\n  def get_hint(secret, guess) do\n\n  end\nend"
      }
    ],
    "description": "You are playing the Bulls and Cows game with your friend.\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number secret and your friend's guess guess, return the hint for your friend's guess.\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n \nExample 1:\n\nInput: secret = \"1807\", guess = \"7810\"\nOutput: \"1A3B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\"\nExample 2:\n\nInput: secret = \"1123\", guess = \"0111\"\nOutput: \"1A1B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n\n \nConstraints:\n\n1 <= secret.length, guess.length <= 1000\nsecret.length == guess.length\nsecret and guess consist of digits only.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"1807\"\n\"7810\"", "\"1123\"\n\"0111\""],
    "title": "Bulls and Cows",
    "topic_tags": ["Hash Table", "String", "Counting"],
    "updated_at": 1695094203,
    "url": "https://leetcode.com/problems/bulls-and-cows/"
  },
  {
    "id": "561",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int arrayPairSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int arrayPairSum(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ArrayPairSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayPairSum = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function arrayPairSum(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function arrayPairSum($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func arrayPairSum(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun arrayPairSum(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int arrayPairSum(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func arrayPairSum(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef array_pair_sum(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def arrayPairSum(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn array_pair_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (array-pair-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec array_pair_sum(Nums :: [integer()]) -> integer().\narray_pair_sum(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec array_pair_sum(nums :: [integer]) :: integer\n  def array_pair_sum(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\n \nExample 1:\n\nInput: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.\nExample 2:\n\nInput: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n\n \nConstraints:\n\n1 <= n <= 104\nnums.length == 2 * n\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Easy",
    "hints": [
      "Obviously, brute force won't help here. Think of something else, take some example like 1,2,3,4.",
      "How will you make pairs to get the result? There must be some pattern.",
      "Did you observe that- Minimum element gets add into the result in sacrifice of maximum element.",
      "Still won't able to find pairs? Sort the array and try to find the pattern."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,4,3,2]", "[6,2,6,5,1,2]"],
    "title": "Array Partition",
    "topic_tags": ["Array", "Greedy", "Sorting", "Counting Sort"],
    "updated_at": 1695094488,
    "url": "https://leetcode.com/problems/array-partition/"
  },
  {
    "id": "274",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int hIndex(int[] citations) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int hIndex(int* citations, int citationsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int HIndex(int[] citations) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function hIndex(citations: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $citations\n     * @return Integer\n     */\n    function hIndex($citations) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func hIndex(_ citations: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun hIndex(citations: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int hIndex(List<int> citations) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func hIndex(citations []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} citations\n# @return {Integer}\ndef h_index(citations)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn h_index(citations: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (h-index citations)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec h_index(Citations :: [integer()]) -> integer().\nh_index(Citations) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec h_index(citations :: [integer]) :: integer\n  def h_index(citations) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\n \nExample 1:\n\nInput: citations = [3,0,6,1,5]\nOutput: 3\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n\nExample 2:\n\nInput: citations = [1,3,1]\nOutput: 1\n\n \nConstraints:\n\nn == citations.length\n1 <= n <= 5000\n0 <= citations[i] <= 1000\n\n",
    "difficulty": "Medium",
    "hints": [
      "An easy approach is to sort the array first.",
      "What are the possible values of h-index?",
      "A faster approach is to use extra space."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,0,6,1,5]", "[1,3,1]"],
    "title": "H-Index",
    "topic_tags": ["Array", "Sorting", "Counting Sort"],
    "updated_at": 1695094183,
    "url": "https://leetcode.com/problems/h-index/"
  },
  {
    "id": "789",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class KthLargest {\npublic:\n    KthLargest(int k, vector<int>& nums) {\n        \n    }\n    \n    int add(int val) {\n        \n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class KthLargest {\n\n    public KthLargest(int k, int[] nums) {\n        \n    }\n    \n    public int add(int val) {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.add(val);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class KthLargest(object):\n\n    def __init__(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def add(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        \n\n    def add(self, val: int) -> int:\n        \n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} KthLargest;\n\n\nKthLargest* kthLargestCreate(int k, int* nums, int numsSize) {\n    \n}\n\nint kthLargestAdd(KthLargest* obj, int val) {\n  \n}\n\nvoid kthLargestFree(KthLargest* obj) {\n    \n}\n\n/**\n * Your KthLargest struct will be instantiated and called as such:\n * KthLargest* obj = kthLargestCreate(k, nums, numsSize);\n * int param_1 = kthLargestAdd(obj, val);\n \n * kthLargestFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class KthLargest {\n\n    public KthLargest(int k, int[] nums) {\n        \n    }\n    \n    public int Add(int val) {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.Add(val);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} k\n * @param {number[]} nums\n */\nvar KthLargest = function(k, nums) {\n    \n};\n\n/** \n * @param {number} val\n * @return {number}\n */\nKthLargest.prototype.add = function(val) {\n    \n};\n\n/** \n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class KthLargest {\n    constructor(k: number, nums: number[]) {\n\n    }\n\n    add(val: number): number {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class KthLargest {\n    /**\n     * @param Integer $k\n     * @param Integer[] $nums\n     */\n    function __construct($k, $nums) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Integer\n     */\n    function add($val) {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * $obj = KthLargest($k, $nums);\n * $ret_1 = $obj->add($val);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass KthLargest {\n\n    init(_ k: Int, _ nums: [Int]) {\n        \n    }\n    \n    func add(_ val: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * let obj = KthLargest(k, nums)\n * let ret_1: Int = obj.add(val)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class KthLargest(k: Int, nums: IntArray) {\n\n    fun add(`val`: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class KthLargest {\n\n  KthLargest(int k, List<int> nums) {\n\n  }\n  \n  int add(int val) {\n\n  }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = KthLargest(k, nums);\n * int param1 = obj.add(val);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type KthLargest struct {\n    \n}\n\n\nfunc Constructor(k int, nums []int) KthLargest {\n    \n}\n\n\nfunc (this *KthLargest) Add(val int) int {\n    \n}\n\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * obj := Constructor(k, nums);\n * param_1 := obj.Add(val);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class KthLargest\n\n=begin\n    :type k: Integer\n    :type nums: Integer[]\n=end\n    def initialize(k, nums)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Integer\n=end\n    def add(val)\n        \n    end\n\n\nend\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest.new(k, nums)\n# param_1 = obj.add(val)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class KthLargest(_k: Int, _nums: Array[Int]) {\n\n    def add(`val`: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct KthLargest {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl KthLargest {\n\n    fn new(k: i32, nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn add(&self, val: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * let obj = KthLargest::new(k, nums);\n * let ret_1: i32 = obj.add(val);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define kth-largest%\n  (class object%\n    (super-new)\n\n    ; k : exact-integer?\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      k\n      nums)\n    \n    ; add : exact-integer? -> exact-integer?\n    (define/public (add val)\n\n      )))\n\n;; Your kth-largest% object will be instantiated and called as such:\n;; (define obj (new kth-largest% [k k] [nums nums]))\n;; (define param_1 (send obj add val))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec kth_largest_init_(K :: integer(), Nums :: [integer()]) -> any().\nkth_largest_init_(K, Nums) ->\n  .\n\n-spec kth_largest_add(Val :: integer()) -> integer().\nkth_largest_add(Val) ->\n  .\n\n\n%% Your functions will be called as such:\n%% kth_largest_init_(K, Nums),\n%% Param_1 = kth_largest_add(Val),\n\n%% kth_largest_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule KthLargest do\n  @spec init_(k :: integer, nums :: [integer]) :: any\n  def init_(k, nums) do\n\n  end\n\n  @spec add(val :: integer) :: integer\n  def add(val) do\n\n  end\nend\n\n# Your functions will be called as such:\n# KthLargest.init_(k, nums)\n# param_1 = KthLargest.add(val)\n\n# KthLargest.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:\n\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.\n\n \nExample 1:\n\nInput\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n\n \nConstraints:\n\n1 <= k <= 104\n0 <= nums.length <= 104\n-104 <= nums[i] <= 104\n-104 <= val <= 104\nAt most 104 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"KthLargest\",\"add\",\"add\",\"add\",\"add\",\"add\"]\n[[3,[4,5,8,2]],[3],[5],[10],[9],[4]]"
    ],
    "title": "Kth Largest Element in a Stream",
    "topic_tags": [
      "Tree",
      "Design",
      "Binary Search Tree",
      "Heap (Priority Queue)",
      "Binary Tree",
      "Data Stream"
    ],
    "updated_at": 1695094720,
    "url": "https://leetcode.com/problems/kth-largest-element-in-a-stream/"
  },
  {
    "id": "295",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MedianFinder {\npublic:\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        \n    }\n    \n    double findMedian() {\n        \n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MedianFinder(object):\n\n    def __init__(self):\n        \n\n    def addNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n    def findMedian(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MedianFinder:\n\n    def __init__(self):\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MedianFinder;\n\n\nMedianFinder* medianFinderCreate() {\n    \n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n  \n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n  \n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n\n/**\n * Your MedianFinder struct will be instantiated and called as such:\n * MedianFinder* obj = medianFinderCreate();\n * medianFinderAddNum(obj, num);\n \n * double param_2 = medianFinderFindMedian(obj);\n \n * medianFinderFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void AddNum(int num) {\n        \n    }\n    \n    public double FindMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.AddNum(num);\n * double param_2 = obj.FindMedian();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MedianFinder = function() {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n    \n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n    \n};\n\n/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MedianFinder {\n    constructor() {\n\n    }\n\n    addNum(num: number): void {\n\n    }\n\n    findMedian(): number {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MedianFinder {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addNum($num) {\n        \n    }\n  \n    /**\n     * @return Float\n     */\n    function findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * $obj = MedianFinder();\n * $obj->addNum($num);\n * $ret_2 = $obj->findMedian();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MedianFinder {\n\n    init() {\n        \n    }\n    \n    func addNum(_ num: Int) {\n        \n    }\n    \n    func findMedian() -> Double {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder()\n * obj.addNum(num)\n * let ret_2: Double = obj.findMedian()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MedianFinder() {\n\n    fun addNum(num: Int) {\n        \n    }\n\n    fun findMedian(): Double {\n        \n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MedianFinder {\n\n  MedianFinder() {\n\n  }\n  \n  void addNum(int num) {\n\n  }\n  \n  double findMedian() {\n\n  }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = MedianFinder();\n * obj.addNum(num);\n * double param2 = obj.findMedian();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MedianFinder struct {\n    \n}\n\n\nfunc Constructor() MedianFinder {\n    \n}\n\n\nfunc (this *MedianFinder) AddNum(num int)  {\n    \n}\n\n\nfunc (this *MedianFinder) FindMedian() float64 {\n    \n}\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(num);\n * param_2 := obj.FindMedian();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MedianFinder\n    def initialize()\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_num(num)\n        \n    end\n\n\n=begin\n    :rtype: Float\n=end\n    def find_median()\n        \n    end\n\n\nend\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder.new()\n# obj.add_num(num)\n# param_2 = obj.find_median()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MedianFinder() {\n\n    def addNum(num: Int) {\n        \n    }\n\n    def findMedian(): Double = {\n        \n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MedianFinder {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MedianFinder {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_num(&self, num: i32) {\n        \n    }\n    \n    fn find_median(&self) -> f64 {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder::new();\n * obj.add_num(num);\n * let ret_2: f64 = obj.find_median();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define median-finder%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; add-num : exact-integer? -> void?\n    (define/public (add-num num)\n\n      )\n    ; find-median : -> flonum?\n    (define/public (find-median)\n\n      )))\n\n;; Your median-finder% object will be instantiated and called as such:\n;; (define obj (new median-finder%))\n;; (send obj add-num num)\n;; (define param_2 (send obj find-median))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec median_finder_init_() -> any().\nmedian_finder_init_() ->\n  .\n\n-spec median_finder_add_num(Num :: integer()) -> any().\nmedian_finder_add_num(Num) ->\n  .\n\n-spec median_finder_find_median() -> float().\nmedian_finder_find_median() ->\n  .\n\n\n%% Your functions will be called as such:\n%% median_finder_init_(),\n%% median_finder_add_num(Num),\n%% Param_2 = median_finder_find_median(),\n\n%% median_finder_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MedianFinder do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec add_num(num :: integer) :: any\n  def add_num(num) do\n\n  end\n\n  @spec find_median() :: float\n  def find_median() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MedianFinder.init_()\n# MedianFinder.add_num(num)\n# param_2 = MedianFinder.find_median()\n\n# MedianFinder.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nFor example, for arr = [2,3,4], the median is 3.\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n\nImplement the MedianFinder class:\n\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n\n \nExample 1:\n\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n\n \nConstraints:\n\n-105 <= num <= 105\nThere will be at least one element in the data structure before calling findMedian.\nAt most 5 * 104 calls will be made to addNum and findMedian.\n\n \nFollow up:\n\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]"
    ],
    "title": "Find Median from Data Stream",
    "topic_tags": [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream"
    ],
    "updated_at": 1695094200,
    "url": "https://leetcode.com/problems/find-median-from-data-stream/"
  },
  {
    "id": "175",
    "category": "Database",
    "code_snippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      }
    ],
    "description": "Table: Person\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n\n \nTable: Address\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n\n \nWrite a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\nOutput: \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\nExplanation: \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "{\"headers\":{\"Person\":[\"personId\",\"lastName\",\"firstName\"],\"Address\":[\"addressId\",\"personId\",\"city\",\"state\"]},\"rows\":{\"Person\":[[1,\"Wang\",\"Allen\"],[2,\"Alice\",\"Bob\"]],\"Address\":[[1,2,\"New York City\",\"New York\"],[2,3,\"Leetcode\",\"California\"]]}}"
    ],
    "title": "Combine Two Tables",
    "topic_tags": ["Database"],
    "updated_at": 1695043151,
    "url": "https://leetcode.com/problems/combine-two-tables/"
  },
  {
    "id": "181",
    "category": "Database",
    "code_snippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\n    "
      }
    ],
    "description": "Table: Employee\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n\n \nWrite a solution to find the employees who earn more than their managers.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+\nOutput: \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\nExplanation: Joe is the only employee who earns more than his manager.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "{\"headers\": {\"Employee\": [\"id\", \"name\", \"salary\", \"managerId\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 70000, 3], [2, \"Henry\", 80000, 4], [3, \"Sam\", 60000, null], [4, \"Max\", 90000, null]]}}"
    ],
    "title": "Employees Earning More Than Their Managers",
    "topic_tags": ["Database"],
    "updated_at": 1695094082,
    "url": "https://leetcode.com/problems/employees-earning-more-than-their-managers/"
  },
  {
    "id": "185",
    "category": "Database",
    "code_snippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      }
    ],
    "description": "Table: Employee\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\n \nTable: Department\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n\n \nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\nWrite a solution to find the employees who are high earners in each of the departments.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\nOutput: \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\nExplanation: \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "{\"headers\": {\"Employee\": [\"id\", \"name\", \"salary\", \"departmentId\"], \"Department\": [\"id\", \"name\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 85000, 1], [2, \"Henry\", 80000, 2], [3, \"Sam\", 60000, 2], [4, \"Max\", 90000, 1], [5, \"Janet\", 69000, 1], [6, \"Randy\", 85000, 1], [7, \"Will\", 70000, 1]], \"Department\": [[1, \"IT\"], [2, \"Sales\"]]}}"
    ],
    "title": "Department Top Three Salaries",
    "topic_tags": ["Database"],
    "updated_at": 1695094087,
    "url": "https://leetcode.com/problems/department-top-three-salaries/"
  },
  {
    "id": "262",
    "category": "Database",
    "code_snippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef trips_and_users(trips: pd.DataFrame, users: pd.DataFrame) -> pd.DataFrame:\n    "
      }
    ],
    "description": "Table: Trips\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| client_id   | int      |\n| driver_id   | int      |\n| city_id     | int      |\n| status      | enum     |\n| request_at  | date     |     \n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM (category) type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').\n\n \nTable: Users\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| users_id    | int      |\n| banned      | enum     |\n| role        | enum     |\n+-------------+----------+\nusers_id is the primary key (column with unique values) for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of ('client', 'driver', 'partner').\nbanned is an ENUM (category) type of ('Yes', 'No').\n\n \nThe cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\nWrite a solution to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between \"2013-10-01\" and \"2013-10-03\". Round Cancellation Rate to two decimal points.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+\nOutput: \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+\nExplanation: \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "{\"headers\": {\"Trips\": [\"id\", \"client_id\", \"driver_id\", \"city_id\", \"status\", \"request_at\"], \"Users\": [\"users_id\", \"banned\", \"role\"]}, \"rows\": {\"Trips\": [[\"1\", \"1\", \"10\", \"1\", \"completed\", \"2013-10-01\"], [\"2\", \"2\", \"11\", \"1\", \"cancelled_by_driver\", \"2013-10-01\"], [\"3\", \"3\", \"12\", \"6\", \"completed\", \"2013-10-01\"], [\"4\", \"4\", \"13\", \"6\", \"cancelled_by_client\", \"2013-10-01\"], [\"5\", \"1\", \"10\", \"1\", \"completed\", \"2013-10-02\"], [\"6\", \"2\", \"11\", \"6\", \"completed\", \"2013-10-02\"], [\"7\", \"3\", \"12\", \"6\", \"completed\", \"2013-10-02\"], [\"8\", \"2\", \"12\", \"12\", \"completed\", \"2013-10-03\"], [\"9\", \"3\", \"10\", \"12\", \"completed\", \"2013-10-03\"], [\"10\", \"4\", \"13\", \"12\", \"cancelled_by_driver\", \"2013-10-03\"]], \"Users\": [[\"1\", \"No\", \"client\"], [\"2\", \"Yes\", \"client\"], [\"3\", \"No\", \"client\"], [\"4\", \"No\", \"client\"], [\"10\", \"No\", \"driver\"], [\"11\", \"No\", \"driver\"], [\"12\", \"No\", \"driver\"], [\"13\", \"No\", \"driver\"]]}}"
    ],
    "title": "Trips and Users",
    "topic_tags": ["Database"],
    "updated_at": 1695094176,
    "url": "https://leetcode.com/problems/trips-and-users/"
  },
  {
    "id": "176",
    "category": "Database",
    "code_snippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef second_highest_salary(employee: pd.DataFrame) -> pd.DataFrame:\n"
      }
    ],
    "description": "Table: Employee\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n \nWrite a solution to find the second highest salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n\nExample 2:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "{\"headers\":{\"Employee\":[\"id\",\"salary\"]},\"rows\":{\"Employee\":[[1,100],[2,200],[3,300]]}}",
      "{\"headers\":{\"Employee\":[\"id\",\"salary\"]},\"rows\":{\"Employee\":[[1,100]]}}"
    ],
    "title": "Second Highest Salary",
    "topic_tags": ["Database"],
    "updated_at": 1695043153,
    "url": "https://leetcode.com/problems/second-highest-salary/"
  },
  {
    "id": "177",
    "category": "Database",
    "code_snippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "-CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\n-BEGIN\n-  RETURN (\n-      # Write your MySQL query statement below.\n-\n-  );\n-END"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "-CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\n-BEGIN\n-    RETURN (\n-        /* Write your T-SQL query statement below. */\n-\n-    );\n-END"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "-CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\n-result NUMBER;\n-BEGIN\n-    /* Write your PL/SQL query statement below */\n-\n-    RETURN result;\n-END;"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:"
      }
    ],
    "description": "Table: Employee\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n \nWrite a solution to find the nth highest salary from the Employee table. If there is no nth highest salary, return null.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n\nExample 2:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "{\"headers\": {\"Employee\": [\"id\", \"salary\"]}, \"argument\": 2, \"rows\": {\"Employee\": [[1, 100], [2, 200], [3, 300]]}}",
      "{\"headers\": {\"Employee\": [\"id\", \"salary\"]}, \"argument\": 2, \"rows\": {\"Employee\": [[1, 100]]}}"
    ],
    "title": "Nth Highest Salary",
    "topic_tags": ["Database"],
    "updated_at": 1695043154,
    "url": "https://leetcode.com/problems/nth-highest-salary/"
  },
  {
    "id": "94",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n \nExample 1:\n\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n \nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,null,2,3]", "[]", "[1]"],
    "title": "Binary Tree Inorder Traversal",
    "topic_tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/binary-tree-inorder-traversal/"
  },
  {
    "id": "100",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSameTree(struct TreeNode* p, struct TreeNode* q){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return Boolean\n     */\n    function isSameTree($p, $q) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSameTree(TreeNode? p, TreeNode? q) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {Boolean}\ndef is_same_tree(p, q)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-same-tree p q)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\nis_same_tree(P, Q) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\n  def is_same_tree(p, q) do\n\n  end\nend"
      }
    ],
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n \nExample 1:\n\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExample 2:\n\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExample 3:\n\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]\n[1,2,3]", "[1,2]\n[1,null,2]", "[1,2,1]\n[1,1,2]"],
    "title": "Same Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019451,
    "url": "https://leetcode.com/problems/same-tree/"
  },
  {
    "id": "124",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint maxPathSum(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int MaxPathSum(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction maxPathSum(root: TreeNode | null): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function maxPathSum($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func maxPathSum(_ root: TreeNode?) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun maxPathSum(root: TreeNode?): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  int maxPathSum(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxPathSum(root *TreeNode) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef max_path_sum(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def maxPathSum(root: TreeNode): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (max-path-sum root)\n  (-> (or/c tree-node? #f) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\nmax_path_sum(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\n  def max_path_sum(root) do\n\n  end\nend"
      }
    ],
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n \nExample 1:\n\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\nExample 2:\n\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]", "[-10,9,20,null,null,15,7]"],
    "title": "Binary Tree Maximum Path Sum",
    "topic_tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019638,
    "url": "https://leetcode.com/problems/binary-tree-maximum-path-sum/"
  },
  {
    "id": "297",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/** Encodes a tree to a single string. */\nchar* serialize(struct TreeNode* root) {\n    \n}\n\n/** Decodes your encoded data to tree. */\nstruct TreeNode* deserialize(char* data) {\n    \n}\n\n// Your functions will be called as such:\n// char* data = serialize(root);\n// deserialize(data);"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public string serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/*\n * Encodes a tree to a single string.\n */\nfunction serialize(root: TreeNode | null): string {\n\n};\n\n/*\n * Decodes your encoded data to tree.\n */\nfunction deserialize(data: string): TreeNode | null {\n\n};\n\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Codec {\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function serialize($root) {\n        \n    }\n  \n    /**\n     * @param String $data\n     * @return TreeNode\n     */\n    function deserialize($data) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $ser = Codec();\n * $deser = Codec();\n * $data = $ser->serialize($root);\n * $ans = $deser->deserialize($data);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Codec {\n    func serialize(_ root: TreeNode?) -> String {\n        \n    }\n    \n    func deserialize(_ data: String) -> TreeNode? {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// var ser = Codec()\n// var deser = Codec()\n// deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Codec() {\n\t// Encodes a URL to a shortened URL.\n    fun serialize(root: TreeNode?): String {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = Codec()\n * var deser = Codec()\n * var data = ser.serialize(longUrl)\n * var ans = deser.deserialize(data)\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    \n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    \n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# Encodes a tree to a single string.\n#\n# @param {TreeNode} root\n# @return {string}\ndef serialize(root)\n    \nend\n\n# Decodes your encoded data to tree.\n#\n# @param {string} data\n# @return {TreeNode}\ndef deserialize(data)\n    \nend\n\n\n# Your functions will be called as such:\n# deserialize(serialize(data))"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nclass Codec {\n    // Encodes a list of strings to a single string.\n    def serialize(root: TreeNode): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def deserialize(data: String): TreeNode = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = new Codec()\n * var deser = new Codec()\n * val s = ser.serialize(root)\n * val ans = deser.deserialize(s)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nstruct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n\t\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let data: String = obj.serialize(strs);\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\n */"
      }
    ],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n \nExample 1:\n\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,null,null,4,5]", "[]"],
    "title": "Serialize and Deserialize Binary Tree",
    "topic_tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "updated_at": 1695094202,
    "url": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"
  },
  {
    "id": "98",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isValidBST(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isValidBST(root: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isValidBST($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isValidBST(root: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isValidBST(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_valid_bst(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isValidBST(root: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-valid-bst root)\n  (-> (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\nis_valid_bst(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\n  def is_valid_bst(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n \nExample 1:\n\n\nInput: root = [2,1,3]\nOutput: true\n\nExample 2:\n\n\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-231 <= Node.val <= 231 - 1\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,1,3]", "[5,1,4,null,null,3,6]"],
    "title": "Validate Binary Search Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019449,
    "url": "https://leetcode.com/problems/validate-binary-search-tree/"
  },
  {
    "id": "99",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void recoverTree(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nvoid recoverTree(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public void RecoverTree(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar recoverTree = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/**\n Do not return anything, modify root in-place instead.\n */\nfunction recoverTree(root: TreeNode | null): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return NULL\n     */\n    function recoverTree($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func recoverTree(_ root: TreeNode?) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun recoverTree(root: TreeNode?): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  void recoverTree(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc recoverTree(root *TreeNode)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Void} Do not return anything, modify root in-place instead.\ndef recover_tree(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def recoverTree(root: TreeNode): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn recover_tree(root: &mut Option<Rc<RefCell<TreeNode>>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (recover-tree root)\n  (-> (or/c tree-node? #f) void?)\n\n  )"
      }
    ],
    "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n \nExample 1:\n\n\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\nExample 2:\n\n\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 1000].\n-231 <= Node.val <= 231 - 1\n\n \nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3,null,null,2]", "[3,1,4,null,null,2]"],
    "title": "Recover Binary Search Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019450,
    "url": "https://leetcode.com/problems/recover-binary-search-tree/"
  },
  {
    "id": "225",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyStack {\npublic:\n    MyStack() {\n        \n    }\n    \n    void push(int x) {\n        \n    }\n    \n    int pop() {\n        \n    }\n    \n    int top() {\n        \n    }\n    \n    bool empty() {\n        \n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyStack {\n\n    public MyStack() {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n    \n    public int top() {\n        \n    }\n    \n    public boolean empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyStack:\n\n    def __init__(self):\n        \n\n    def push(self, x: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n    def top(self) -> int:\n        \n\n    def empty(self) -> bool:\n        \n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyStack;\n\n\nMyStack* myStackCreate() {\n    \n}\n\nvoid myStackPush(MyStack* obj, int x) {\n  \n}\n\nint myStackPop(MyStack* obj) {\n  \n}\n\nint myStackTop(MyStack* obj) {\n  \n}\n\nbool myStackEmpty(MyStack* obj) {\n  \n}\n\nvoid myStackFree(MyStack* obj) {\n    \n}\n\n/**\n * Your MyStack struct will be instantiated and called as such:\n * MyStack* obj = myStackCreate();\n * myStackPush(obj, x);\n \n * int param_2 = myStackPop(obj);\n \n * int param_3 = myStackTop(obj);\n \n * bool param_4 = myStackEmpty(obj);\n \n * myStackFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyStack {\n\n    public MyStack() {\n        \n    }\n    \n    public void Push(int x) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n    \n    public int Top() {\n        \n    }\n    \n    public bool Empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Top();\n * bool param_4 = obj.Empty();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MyStack = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyStack.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.top = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyStack.prototype.empty = function() {\n    \n};\n\n/** \n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MyStack {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n\n    top(): number {\n\n    }\n\n    empty(): boolean {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function top() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * $obj = MyStack();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->top();\n * $ret_4 = $obj->empty();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyStack {\n\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n    \n    func top() -> Int {\n        \n    }\n    \n    func empty() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * let obj = MyStack()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.top()\n * let ret_4: Bool = obj.empty()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyStack() {\n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n    fun top(): Int {\n        \n    }\n\n    fun empty(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MyStack {\n\n  MyStack() {\n\n  }\n  \n  void push(int x) {\n\n  }\n  \n  int pop() {\n\n  }\n  \n  int top() {\n\n  }\n  \n  bool empty() {\n\n  }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = MyStack();\n * obj.push(x);\n * int param2 = obj.pop();\n * int param3 = obj.top();\n * bool param4 = obj.empty();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyStack struct {\n    \n}\n\n\nfunc Constructor() MyStack {\n    \n}\n\n\nfunc (this *MyStack) Push(x int)  {\n    \n}\n\n\nfunc (this *MyStack) Pop() int {\n    \n}\n\n\nfunc (this *MyStack) Top() int {\n    \n}\n\n\nfunc (this *MyStack) Empty() bool {\n    \n}\n\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.Empty();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyStack\n    def initialize()\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def top()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def empty()\n        \n    end\n\n\nend\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyStack() {\n\n    def push(x: Int) {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def top(): Int = {\n        \n    }\n\n    def empty(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyStack {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n    \n    fn top(&self) -> i32 {\n        \n    }\n    \n    fn empty(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * let obj = MyStack::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.top();\n * let ret_4: bool = obj.empty();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define my-stack%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push x)\n\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n\n      )\n    ; top : -> exact-integer?\n    (define/public (top)\n\n      )\n    ; empty : -> boolean?\n    (define/public (empty)\n\n      )))\n\n;; Your my-stack% object will be instantiated and called as such:\n;; (define obj (new my-stack%))\n;; (send obj push x)\n;; (define param_2 (send obj pop))\n;; (define param_3 (send obj top))\n;; (define param_4 (send obj empty))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_stack_init_() -> any().\nmy_stack_init_() ->\n  .\n\n-spec my_stack_push(X :: integer()) -> any().\nmy_stack_push(X) ->\n  .\n\n-spec my_stack_pop() -> integer().\nmy_stack_pop() ->\n  .\n\n-spec my_stack_top() -> integer().\nmy_stack_top() ->\n  .\n\n-spec my_stack_empty() -> boolean().\nmy_stack_empty() ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_stack_init_(),\n%% my_stack_push(X),\n%% Param_2 = my_stack_pop(),\n%% Param_3 = my_stack_top(),\n%% Param_4 = my_stack_empty(),\n\n%% my_stack_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MyStack do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec push(x :: integer) :: any\n  def push(x) do\n\n  end\n\n  @spec pop() :: integer\n  def pop() do\n\n  end\n\n  @spec top() :: integer\n  def top() do\n\n  end\n\n  @spec empty() :: boolean\n  def empty() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyStack.init_()\n# MyStack.push(x)\n# param_2 = MyStack.pop()\n# param_3 = MyStack.top()\n# param_4 = MyStack.empty()\n\n# MyStack.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\n\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n \nExample 1:\n\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n \nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.\n\n \nFollow-up: Can you implement the stack using only one queue?\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]"
    ],
    "title": "Implement Stack using Queues",
    "topic_tags": ["Stack", "Design", "Queue"],
    "updated_at": 1695094145,
    "url": "https://leetcode.com/problems/implement-stack-using-queues/"
  },
  {
    "id": "232",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyQueue {\npublic:\n    MyQueue() {\n        \n    }\n    \n    void push(int x) {\n        \n    }\n    \n    int pop() {\n        \n    }\n    \n    int peek() {\n        \n    }\n    \n    bool empty() {\n        \n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyQueue {\n\n    public MyQueue() {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n    \n    public int peek() {\n        \n    }\n    \n    public boolean empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyQueue(object):\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def peek(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyQueue:\n\n    def __init__(self):\n        \n\n    def push(self, x: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n    def peek(self) -> int:\n        \n\n    def empty(self) -> bool:\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyQueue;\n\n\nMyQueue* myQueueCreate() {\n    \n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n  \n}\n\nint myQueuePop(MyQueue* obj) {\n  \n}\n\nint myQueuePeek(MyQueue* obj) {\n  \n}\n\nbool myQueueEmpty(MyQueue* obj) {\n  \n}\n\nvoid myQueueFree(MyQueue* obj) {\n    \n}\n\n/**\n * Your MyQueue struct will be instantiated and called as such:\n * MyQueue* obj = myQueueCreate();\n * myQueuePush(obj, x);\n \n * int param_2 = myQueuePop(obj);\n \n * int param_3 = myQueuePeek(obj);\n \n * bool param_4 = myQueueEmpty(obj);\n \n * myQueueFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyQueue {\n\n    public MyQueue() {\n        \n    }\n    \n    public void Push(int x) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n    \n    public int Peek() {\n        \n    }\n    \n    public bool Empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Peek();\n * bool param_4 = obj.Empty();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MyQueue = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    \n};\n\n/** \n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MyQueue {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n\n    peek(): number {\n\n    }\n\n    empty(): boolean {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyQueue {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function peek() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * $obj = MyQueue();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->peek();\n * $ret_4 = $obj->empty();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyQueue {\n\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n    \n    func peek() -> Int {\n        \n    }\n    \n    func empty() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.peek()\n * let ret_4: Bool = obj.empty()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyQueue() {\n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n    fun peek(): Int {\n        \n    }\n\n    fun empty(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MyQueue {\n\n  MyQueue() {\n\n  }\n  \n  void push(int x) {\n\n  }\n  \n  int pop() {\n\n  }\n  \n  int peek() {\n\n  }\n  \n  bool empty() {\n\n  }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = MyQueue();\n * obj.push(x);\n * int param2 = obj.pop();\n * int param3 = obj.peek();\n * bool param4 = obj.empty();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyQueue struct {\n    \n}\n\n\nfunc Constructor() MyQueue {\n    \n}\n\n\nfunc (this *MyQueue) Push(x int)  {\n    \n}\n\n\nfunc (this *MyQueue) Pop() int {\n    \n}\n\n\nfunc (this *MyQueue) Peek() int {\n    \n}\n\n\nfunc (this *MyQueue) Empty() bool {\n    \n}\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Peek();\n * param_4 := obj.Empty();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyQueue\n    def initialize()\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def peek()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def empty()\n        \n    end\n\n\nend\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyQueue() {\n\n    def push(x: Int) {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def peek(): Int = {\n        \n    }\n\n    def empty(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyQueue {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n    \n    fn peek(&self) -> i32 {\n        \n    }\n    \n    fn empty(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.peek();\n * let ret_4: bool = obj.empty();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define my-queue%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push x)\n\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n\n      )\n    ; peek : -> exact-integer?\n    (define/public (peek)\n\n      )\n    ; empty : -> boolean?\n    (define/public (empty)\n\n      )))\n\n;; Your my-queue% object will be instantiated and called as such:\n;; (define obj (new my-queue%))\n;; (send obj push x)\n;; (define param_2 (send obj pop))\n;; (define param_3 (send obj peek))\n;; (define param_4 (send obj empty))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_queue_init_() -> any().\nmy_queue_init_() ->\n  .\n\n-spec my_queue_push(X :: integer()) -> any().\nmy_queue_push(X) ->\n  .\n\n-spec my_queue_pop() -> integer().\nmy_queue_pop() ->\n  .\n\n-spec my_queue_peek() -> integer().\nmy_queue_peek() ->\n  .\n\n-spec my_queue_empty() -> boolean().\nmy_queue_empty() ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_queue_init_(),\n%% my_queue_push(X),\n%% Param_2 = my_queue_pop(),\n%% Param_3 = my_queue_peek(),\n%% Param_4 = my_queue_empty(),\n\n%% my_queue_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MyQueue do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec push(x :: integer) :: any\n  def push(x) do\n\n  end\n\n  @spec pop() :: integer\n  def pop() do\n\n  end\n\n  @spec peek() :: integer\n  def peek() do\n\n  end\n\n  @spec empty() :: boolean\n  def empty() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyQueue.init_()\n# MyQueue.push(x)\n# param_2 = MyQueue.pop()\n# param_3 = MyQueue.peek()\n# param_4 = MyQueue.empty()\n\n# MyQueue.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:\n\nvoid push(int x) Pushes element x to the back of the queue.\nint pop() Removes the element from the front of the queue and returns it.\nint peek() Returns the element at the front of the queue.\nboolean empty() Returns true if the queue is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n \nExample 1:\n\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\n \nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, peek, and empty.\nAll the calls to pop and peek are valid.\n\n \nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]"
    ],
    "title": "Implement Queue using Stacks",
    "topic_tags": ["Stack", "Design", "Queue"],
    "updated_at": 1695094156,
    "url": "https://leetcode.com/problems/implement-queue-using-stacks/"
  },
  {
    "id": "295",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MedianFinder {\npublic:\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        \n    }\n    \n    double findMedian() {\n        \n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MedianFinder(object):\n\n    def __init__(self):\n        \n\n    def addNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n    def findMedian(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MedianFinder:\n\n    def __init__(self):\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MedianFinder;\n\n\nMedianFinder* medianFinderCreate() {\n    \n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n  \n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n  \n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n\n/**\n * Your MedianFinder struct will be instantiated and called as such:\n * MedianFinder* obj = medianFinderCreate();\n * medianFinderAddNum(obj, num);\n \n * double param_2 = medianFinderFindMedian(obj);\n \n * medianFinderFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void AddNum(int num) {\n        \n    }\n    \n    public double FindMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.AddNum(num);\n * double param_2 = obj.FindMedian();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MedianFinder = function() {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n    \n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n    \n};\n\n/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MedianFinder {\n    constructor() {\n\n    }\n\n    addNum(num: number): void {\n\n    }\n\n    findMedian(): number {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MedianFinder {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addNum($num) {\n        \n    }\n  \n    /**\n     * @return Float\n     */\n    function findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * $obj = MedianFinder();\n * $obj->addNum($num);\n * $ret_2 = $obj->findMedian();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MedianFinder {\n\n    init() {\n        \n    }\n    \n    func addNum(_ num: Int) {\n        \n    }\n    \n    func findMedian() -> Double {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder()\n * obj.addNum(num)\n * let ret_2: Double = obj.findMedian()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MedianFinder() {\n\n    fun addNum(num: Int) {\n        \n    }\n\n    fun findMedian(): Double {\n        \n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MedianFinder {\n\n  MedianFinder() {\n\n  }\n  \n  void addNum(int num) {\n\n  }\n  \n  double findMedian() {\n\n  }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = MedianFinder();\n * obj.addNum(num);\n * double param2 = obj.findMedian();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MedianFinder struct {\n    \n}\n\n\nfunc Constructor() MedianFinder {\n    \n}\n\n\nfunc (this *MedianFinder) AddNum(num int)  {\n    \n}\n\n\nfunc (this *MedianFinder) FindMedian() float64 {\n    \n}\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(num);\n * param_2 := obj.FindMedian();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MedianFinder\n    def initialize()\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_num(num)\n        \n    end\n\n\n=begin\n    :rtype: Float\n=end\n    def find_median()\n        \n    end\n\n\nend\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder.new()\n# obj.add_num(num)\n# param_2 = obj.find_median()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MedianFinder() {\n\n    def addNum(num: Int) {\n        \n    }\n\n    def findMedian(): Double = {\n        \n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MedianFinder {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MedianFinder {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_num(&self, num: i32) {\n        \n    }\n    \n    fn find_median(&self) -> f64 {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder::new();\n * obj.add_num(num);\n * let ret_2: f64 = obj.find_median();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define median-finder%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; add-num : exact-integer? -> void?\n    (define/public (add-num num)\n\n      )\n    ; find-median : -> flonum?\n    (define/public (find-median)\n\n      )))\n\n;; Your median-finder% object will be instantiated and called as such:\n;; (define obj (new median-finder%))\n;; (send obj add-num num)\n;; (define param_2 (send obj find-median))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec median_finder_init_() -> any().\nmedian_finder_init_() ->\n  .\n\n-spec median_finder_add_num(Num :: integer()) -> any().\nmedian_finder_add_num(Num) ->\n  .\n\n-spec median_finder_find_median() -> float().\nmedian_finder_find_median() ->\n  .\n\n\n%% Your functions will be called as such:\n%% median_finder_init_(),\n%% median_finder_add_num(Num),\n%% Param_2 = median_finder_find_median(),\n\n%% median_finder_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MedianFinder do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec add_num(num :: integer) :: any\n  def add_num(num) do\n\n  end\n\n  @spec find_median() :: float\n  def find_median() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MedianFinder.init_()\n# MedianFinder.add_num(num)\n# param_2 = MedianFinder.find_median()\n\n# MedianFinder.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nFor example, for arr = [2,3,4], the median is 3.\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n\nImplement the MedianFinder class:\n\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n\n \nExample 1:\n\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n\n \nConstraints:\n\n-105 <= num <= 105\nThere will be at least one element in the data structure before calling findMedian.\nAt most 5 * 104 calls will be made to addNum and findMedian.\n\n \nFollow up:\n\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]"
    ],
    "title": "Find Median from Data Stream",
    "topic_tags": [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream"
    ],
    "updated_at": 1695094200,
    "url": "https://leetcode.com/problems/find-median-from-data-stream/"
  },
  {
    "id": "297",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/** Encodes a tree to a single string. */\nchar* serialize(struct TreeNode* root) {\n    \n}\n\n/** Decodes your encoded data to tree. */\nstruct TreeNode* deserialize(char* data) {\n    \n}\n\n// Your functions will be called as such:\n// char* data = serialize(root);\n// deserialize(data);"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public string serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/*\n * Encodes a tree to a single string.\n */\nfunction serialize(root: TreeNode | null): string {\n\n};\n\n/*\n * Decodes your encoded data to tree.\n */\nfunction deserialize(data: string): TreeNode | null {\n\n};\n\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Codec {\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function serialize($root) {\n        \n    }\n  \n    /**\n     * @param String $data\n     * @return TreeNode\n     */\n    function deserialize($data) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $ser = Codec();\n * $deser = Codec();\n * $data = $ser->serialize($root);\n * $ans = $deser->deserialize($data);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Codec {\n    func serialize(_ root: TreeNode?) -> String {\n        \n    }\n    \n    func deserialize(_ data: String) -> TreeNode? {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// var ser = Codec()\n// var deser = Codec()\n// deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Codec() {\n\t// Encodes a URL to a shortened URL.\n    fun serialize(root: TreeNode?): String {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = Codec()\n * var deser = Codec()\n * var data = ser.serialize(longUrl)\n * var ans = deser.deserialize(data)\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    \n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    \n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# Encodes a tree to a single string.\n#\n# @param {TreeNode} root\n# @return {string}\ndef serialize(root)\n    \nend\n\n# Decodes your encoded data to tree.\n#\n# @param {string} data\n# @return {TreeNode}\ndef deserialize(data)\n    \nend\n\n\n# Your functions will be called as such:\n# deserialize(serialize(data))"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nclass Codec {\n    // Encodes a list of strings to a single string.\n    def serialize(root: TreeNode): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def deserialize(data: String): TreeNode = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = new Codec()\n * var deser = new Codec()\n * val s = ser.serialize(root)\n * val ans = deser.deserialize(s)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nstruct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n\t\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let data: String = obj.serialize(strs);\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\n */"
      }
    ],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n \nExample 1:\n\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,null,null,4,5]", "[]"],
    "title": "Serialize and Deserialize Binary Tree",
    "topic_tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "updated_at": 1695094202,
    "url": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"
  },
  {
    "id": "146",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class LRUCache {\npublic:\n    LRUCache(int capacity) {\n        \n    }\n    \n    int get(int key) {\n        \n    }\n    \n    void put(int key, int value) {\n        \n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class LRUCache:\n\n    def __init__(self, capacity: int):\n        \n\n    def get(self, key: int) -> int:\n        \n\n    def put(self, key: int, value: int) -> None:\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} LRUCache;\n\n\nLRUCache* lRUCacheCreate(int capacity) {\n    \n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n  \n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n  \n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    \n}\n\n/**\n * Your LRUCache struct will be instantiated and called as such:\n * LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);\n \n * lRUCachePut(obj, key, value);\n \n * lRUCacheFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int Get(int key) {\n        \n    }\n    \n    public void Put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class LRUCache {\n    constructor(capacity: number) {\n\n    }\n\n    get(key: number): number {\n\n    }\n\n    put(key: number, value: number): void {\n\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class LRUCache {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * $obj = LRUCache($capacity);\n * $ret_1 = $obj->get($key);\n * $obj->put($key, $value);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass LRUCache {\n\n    init(_ capacity: Int) {\n        \n    }\n    \n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    func put(_ key: Int, _ value: Int) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache(capacity)\n * let ret_1: Int = obj.get(key)\n * obj.put(key, value)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class LRUCache(capacity: Int) {\n\n    fun get(key: Int): Int {\n        \n    }\n\n    fun put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class LRUCache {\n\n  LRUCache(int capacity) {\n\n  }\n  \n  int get(int key) {\n\n  }\n  \n  void put(int key, int value) {\n\n  }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = LRUCache(capacity);\n * int param1 = obj.get(key);\n * obj.put(key,value);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type LRUCache struct {\n    \n}\n\n\nfunc Constructor(capacity int) LRUCache {\n    \n}\n\n\nfunc (this *LRUCache) Get(key int) int {\n    \n}\n\n\nfunc (this *LRUCache) Put(key int, value int)  {\n    \n}\n\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class LRUCache\n\n=begin\n    :type capacity: Integer\n=end\n    def initialize(capacity)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n        \n    end\n\n\nend\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache.new(capacity)\n# param_1 = obj.get(key)\n# obj.put(key, value)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class LRUCache(_capacity: Int) {\n\n    def get(key: Int): Int = {\n        \n    }\n\n    def put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct LRUCache {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LRUCache {\n\n    fn new(capacity: i32) -> Self {\n        \n    }\n    \n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    fn put(&self, key: i32, value: i32) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache::new(capacity);\n * let ret_1: i32 = obj.get(key);\n * obj.put(key, value);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define lru-cache%\n  (class object%\n    (super-new)\n\n    ; capacity : exact-integer?\n    (init-field\n      capacity)\n    \n    ; get : exact-integer? -> exact-integer?\n    (define/public (get key)\n\n      )\n    ; put : exact-integer? exact-integer? -> void?\n    (define/public (put key value)\n\n      )))\n\n;; Your lru-cache% object will be instantiated and called as such:\n;; (define obj (new lru-cache% [capacity capacity]))\n;; (define param_1 (send obj get key))\n;; (send obj put key value)"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec lru_cache_init_(Capacity :: integer()) -> any().\nlru_cache_init_(Capacity) ->\n  .\n\n-spec lru_cache_get(Key :: integer()) -> integer().\nlru_cache_get(Key) ->\n  .\n\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\nlru_cache_put(Key, Value) ->\n  .\n\n\n%% Your functions will be called as such:\n%% lru_cache_init_(Capacity),\n%% Param_1 = lru_cache_get(Key),\n%% lru_cache_put(Key, Value),\n\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule LRUCache do\n  @spec init_(capacity :: integer) :: any\n  def init_(capacity) do\n\n  end\n\n  @spec get(key :: integer) :: integer\n  def get(key) do\n\n  end\n\n  @spec put(key :: integer, value :: integer) :: any\n  def put(key, value) do\n\n  end\nend\n\n# Your functions will be called as such:\n# LRUCache.init_(capacity)\n# param_1 = LRUCache.get(key)\n# LRUCache.put(key, value)\n\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.\n \nExample 1:\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n \nConstraints:\n\n1 <= capacity <= 3000\n0 <= key <= 104\n0 <= value <= 105\nAt most 2 * 105 calls will be made to get and put.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]"
    ],
    "title": "LRU Cache",
    "topic_tags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    "updated_at": 1695019654,
    "url": "https://leetcode.com/problems/lru-cache/"
  },
  {
    "id": "155",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MinStack {\npublic:\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        \n    }\n    \n    void pop() {\n        \n    }\n    \n    int top() {\n        \n    }\n    \n    int getMin() {\n        \n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MinStack {\n\n    public MinStack() {\n        \n    }\n    \n    public void push(int val) {\n        \n    }\n    \n    public void pop() {\n        \n    }\n    \n    public int top() {\n        \n    }\n    \n    public int getMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MinStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: None\n        \"\"\"\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MinStack:\n\n    def __init__(self):\n        \n\n    def push(self, val: int) -> None:\n        \n\n    def pop(self) -> None:\n        \n\n    def top(self) -> int:\n        \n\n    def getMin(self) -> int:\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MinStack;\n\n\nMinStack* minStackCreate() {\n    \n}\n\nvoid minStackPush(MinStack* obj, int val) {\n  \n}\n\nvoid minStackPop(MinStack* obj) {\n  \n}\n\nint minStackTop(MinStack* obj) {\n  \n}\n\nint minStackGetMin(MinStack* obj) {\n  \n}\n\nvoid minStackFree(MinStack* obj) {\n    \n}\n\n/**\n * Your MinStack struct will be instantiated and called as such:\n * MinStack* obj = minStackCreate();\n * minStackPush(obj, val);\n \n * minStackPop(obj);\n \n * int param_3 = minStackTop(obj);\n \n * int param_4 = minStackGetMin(obj);\n \n * minStackFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MinStack {\n\n    public MinStack() {\n        \n    }\n    \n    public void Push(int val) {\n        \n    }\n    \n    public void Pop() {\n        \n    }\n    \n    public int Top() {\n        \n    }\n    \n    public int GetMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.Push(val);\n * obj.Pop();\n * int param_3 = obj.Top();\n * int param_4 = obj.GetMin();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MinStack = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMinStack.prototype.push = function(val) {\n    \n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.getMin = function() {\n    \n};\n\n/** \n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(val)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MinStack {\n    constructor() {\n\n    }\n\n    push(val: number): void {\n\n    }\n\n    pop(): void {\n\n    }\n\n    top(): number {\n\n    }\n\n    getMin(): number {\n\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(val)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MinStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function push($val) {\n        \n    }\n  \n    /**\n     * @return NULL\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function top() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function getMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * $obj = MinStack();\n * $obj->push($val);\n * $obj->pop();\n * $ret_3 = $obj->top();\n * $ret_4 = $obj->getMin();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MinStack {\n\n    init() {\n        \n    }\n    \n    func push(_ val: Int) {\n        \n    }\n    \n    func pop() {\n        \n    }\n    \n    func top() -> Int {\n        \n    }\n    \n    func getMin() -> Int {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * let obj = MinStack()\n * obj.push(val)\n * obj.pop()\n * let ret_3: Int = obj.top()\n * let ret_4: Int = obj.getMin()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MinStack() {\n\n    fun push(`val`: Int) {\n        \n    }\n\n    fun pop() {\n        \n    }\n\n    fun top(): Int {\n        \n    }\n\n    fun getMin(): Int {\n        \n    }\n\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = MinStack()\n * obj.push(`val`)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MinStack {\n\n  MinStack() {\n\n  }\n  \n  void push(int val) {\n\n  }\n  \n  void pop() {\n\n  }\n  \n  int top() {\n\n  }\n  \n  int getMin() {\n\n  }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = MinStack();\n * obj.push(val);\n * obj.pop();\n * int param3 = obj.top();\n * int param4 = obj.getMin();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MinStack struct {\n    \n}\n\n\nfunc Constructor() MinStack {\n    \n}\n\n\nfunc (this *MinStack) Push(val int)  {\n    \n}\n\n\nfunc (this *MinStack) Pop()  {\n    \n}\n\n\nfunc (this *MinStack) Top() int {\n    \n}\n\n\nfunc (this *MinStack) GetMin() int {\n    \n}\n\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(val);\n * obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.GetMin();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MinStack\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push(val)\n        \n    end\n\n\n=begin\n    :rtype: Void\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def top()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_min()\n        \n    end\n\n\nend\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack.new()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.get_min()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MinStack() {\n\n    def push(`val`: Int) {\n        \n    }\n\n    def pop() {\n        \n    }\n\n    def top(): Int = {\n        \n    }\n\n    def getMin(): Int = {\n        \n    }\n\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(`val`)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MinStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MinStack {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, val: i32) {\n        \n    }\n    \n    fn pop(&self) {\n        \n    }\n    \n    fn top(&self) -> i32 {\n        \n    }\n    \n    fn get_min(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * let obj = MinStack::new();\n * obj.push(val);\n * obj.pop();\n * let ret_3: i32 = obj.top();\n * let ret_4: i32 = obj.get_min();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define min-stack%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push val)\n\n      )\n    ; pop : -> void?\n    (define/public (pop)\n\n      )\n    ; top : -> exact-integer?\n    (define/public (top)\n\n      )\n    ; get-min : -> exact-integer?\n    (define/public (get-min)\n\n      )))\n\n;; Your min-stack% object will be instantiated and called as such:\n;; (define obj (new min-stack%))\n;; (send obj push val)\n;; (send obj pop)\n;; (define param_3 (send obj top))\n;; (define param_4 (send obj get-min))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_stack_init_() -> any().\nmin_stack_init_() ->\n  .\n\n-spec min_stack_push(Val :: integer()) -> any().\nmin_stack_push(Val) ->\n  .\n\n-spec min_stack_pop() -> any().\nmin_stack_pop() ->\n  .\n\n-spec min_stack_top() -> integer().\nmin_stack_top() ->\n  .\n\n-spec min_stack_get_min() -> integer().\nmin_stack_get_min() ->\n  .\n\n\n%% Your functions will be called as such:\n%% min_stack_init_(),\n%% min_stack_push(Val),\n%% min_stack_pop(),\n%% Param_3 = min_stack_top(),\n%% Param_4 = min_stack_get_min(),\n\n%% min_stack_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MinStack do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec push(val :: integer) :: any\n  def push(val) do\n\n  end\n\n  @spec pop() :: any\n  def pop() do\n\n  end\n\n  @spec top() :: integer\n  def top() do\n\n  end\n\n  @spec get_min() :: integer\n  def get_min() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MinStack.init_()\n# MinStack.push(val)\n# MinStack.pop()\n# param_3 = MinStack.top()\n# param_4 = MinStack.get_min()\n\n# MinStack.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.\n \nExample 1:\n\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n \nConstraints:\n\n-231 <= val <= 231 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\n\n",
    "difficulty": "Medium",
    "hints": [
      "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]"
    ],
    "title": "Min Stack",
    "topic_tags": ["Stack", "Design"],
    "updated_at": 1695019661,
    "url": "https://leetcode.com/problems/min-stack/"
  },
  {
    "id": "108",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode SortedArrayToBST(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction sortedArrayToBST(nums: number[]): TreeNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return TreeNode\n     */\n    function sortedArrayToBST($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun sortedArrayToBST(nums: IntArray): TreeNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  TreeNode? sortedArrayToBST(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sortedArrayToBST(nums []int) *TreeNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer[]} nums\n# @return {TreeNode}\ndef sorted_array_to_bst(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (sorted-array-to-bst nums)\n  (-> (listof exact-integer?) (or/c tree-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec sorted_array_to_bst(Nums :: [integer()]) -> #tree_node{} | null.\nsorted_array_to_bst(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec sorted_array_to_bst(nums :: [integer]) :: TreeNode.t | nil\n  def sorted_array_to_bst(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n \nExample 1:\n\n\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\n\nExample 2:\n\n\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in a strictly increasing order.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-10,-3,0,5,9]", "[1,3]"],
    "title": "Convert Sorted Array to Binary Search Tree",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019456,
    "url": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"
  },
  {
    "id": "169",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int majorityElement(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function majorityElement(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int majorityElement(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func majorityElement(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (majority-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec majority_element(Nums :: [integer()]) -> integer().\nmajority_element(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n \nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,3]", "[2,2,1,1,1,2,2]"],
    "title": "Majority Element",
    "topic_tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Counting"
    ],
    "updated_at": 1695019671,
    "url": "https://leetcode.com/problems/majority-element/"
  },
  {
    "id": "4",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double findMedianSortedArrays(List<int> nums1, List<int> nums2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\nfind_median_sorted_arrays(Nums1, Nums2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n\n  end\nend"
      }
    ],
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n \nExample 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\nExample 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n \nConstraints:\n\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3]\n[2]", "[1,2]\n[3,4]"],
    "title": "Median of Two Sorted Arrays",
    "topic_tags": ["Array", "Binary Search", "Divide and Conquer"],
    "updated_at": 1695017043,
    "url": "https://leetcode.com/problems/median-of-two-sorted-arrays/"
  },
  {
    "id": "23",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n \nExample 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\n\nInput: lists = []\nOutput: []\n\nExample 3:\n\nInput: lists = [[]]\nOutput: []\n\n \nConstraints:\n\nk == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 104.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,4,5],[1,3,4],[2,6]]", "[]", "[[]]"],
    "title": "Merge k Sorted Lists",
    "topic_tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "updated_at": 1695018975,
    "url": "https://leetcode.com/problems/merge-k-sorted-lists/"
  },
  {
    "id": "53",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxSubArray(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxSubArray(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSubArray(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxSubArray(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSubArray(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-sub-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_sub_array(Nums :: [integer()]) -> integer().\nmax_sub_array(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_sub_array(nums :: [integer]) :: integer\n  def max_sub_array(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\n \nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n\nExample 2:\n\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n\nExample 3:\n\nInput: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n \nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-2,1,-3,4,-1,2,1,-5,4]", "[1]", "[5,4,-1,7,8]"],
    "title": "Maximum Subarray",
    "topic_tags": ["Array", "Divide and Conquer", "Dynamic Programming"],
    "updated_at": 1695018997,
    "url": "https://leetcode.com/problems/maximum-subarray/"
  },
  {
    "id": "105",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode BuildTree(int[] preorder, int[] inorder) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */\nvar buildTree = function(preorder, inorder) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction buildTree(preorder: number[], inorder: number[]): TreeNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $preorder\n     * @param Integer[] $inorder\n     * @return TreeNode\n     */\n    function buildTree($preorder, $inorder) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func buildTree(_ preorder: [Int], _ inorder: [Int]) -> TreeNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun buildTree(preorder: IntArray, inorder: IntArray): TreeNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  TreeNode? buildTree(List<int> preorder, List<int> inorder) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer[]} preorder\n# @param {Integer[]} inorder\n# @return {TreeNode}\ndef build_tree(preorder, inorder)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def buildTree(preorder: Array[Int], inorder: Array[Int]): TreeNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn build_tree(preorder: Vec<i32>, inorder: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (build-tree preorder inorder)\n  (-> (listof exact-integer?) (listof exact-integer?) (or/c tree-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec build_tree(Preorder :: [integer()], Inorder :: [integer()]) -> #tree_node{} | null.\nbuild_tree(Preorder, Inorder) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec build_tree(preorder :: [integer], inorder :: [integer]) :: TreeNode.t | nil\n  def build_tree(preorder, inorder) do\n\n  end\nend"
      }
    ],
    "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n \nExample 1:\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n \nConstraints:\n\n1 <= preorder.length <= 3000\ninorder.length == preorder.length\n-3000 <= preorder[i], inorder[i] <= 3000\npreorder and inorder consist of unique values.\nEach value of inorder also appears in preorder.\npreorder is guaranteed to be the preorder traversal of the tree.\ninorder is guaranteed to be the inorder traversal of the tree.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,9,20,15,7]\n[9,3,15,20,7]", "[-1]\n[-1]"],
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "topic_tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019454,
    "url": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"
  },
  {
    "id": "432",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class AllOne {\npublic:\n    AllOne() {\n        \n    }\n    \n    void inc(string key) {\n        \n    }\n    \n    void dec(string key) {\n        \n    }\n    \n    string getMaxKey() {\n        \n    }\n    \n    string getMinKey() {\n        \n    }\n};\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne* obj = new AllOne();\n * obj->inc(key);\n * obj->dec(key);\n * string param_3 = obj->getMaxKey();\n * string param_4 = obj->getMinKey();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class AllOne {\n\n    public AllOne() {\n        \n    }\n    \n    public void inc(String key) {\n        \n    }\n    \n    public void dec(String key) {\n        \n    }\n    \n    public String getMaxKey() {\n        \n    }\n    \n    public String getMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class AllOne(object):\n\n    def __init__(self):\n        \n\n    def inc(self, key):\n        \"\"\"\n        :type key: str\n        :rtype: None\n        \"\"\"\n        \n\n    def dec(self, key):\n        \"\"\"\n        :type key: str\n        :rtype: None\n        \"\"\"\n        \n\n    def getMaxKey(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        \n\n    def getMinKey(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class AllOne:\n\n    def __init__(self):\n        \n\n    def inc(self, key: str) -> None:\n        \n\n    def dec(self, key: str) -> None:\n        \n\n    def getMaxKey(self) -> str:\n        \n\n    def getMinKey(self) -> str:\n        \n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} AllOne;\n\n\nAllOne* allOneCreate() {\n    \n}\n\nvoid allOneInc(AllOne* obj, char * key) {\n  \n}\n\nvoid allOneDec(AllOne* obj, char * key) {\n  \n}\n\nchar * allOneGetMaxKey(AllOne* obj) {\n  \n}\n\nchar * allOneGetMinKey(AllOne* obj) {\n  \n}\n\nvoid allOneFree(AllOne* obj) {\n    \n}\n\n/**\n * Your AllOne struct will be instantiated and called as such:\n * AllOne* obj = allOneCreate();\n * allOneInc(obj, key);\n \n * allOneDec(obj, key);\n \n * char * param_3 = allOneGetMaxKey(obj);\n \n * char * param_4 = allOneGetMinKey(obj);\n \n * allOneFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class AllOne {\n\n    public AllOne() {\n        \n    }\n    \n    public void Inc(string key) {\n        \n    }\n    \n    public void Dec(string key) {\n        \n    }\n    \n    public string GetMaxKey() {\n        \n    }\n    \n    public string GetMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.Inc(key);\n * obj.Dec(key);\n * string param_3 = obj.GetMaxKey();\n * string param_4 = obj.GetMinKey();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar AllOne = function() {\n    \n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n    \n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n    \n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMaxKey = function() {\n    \n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMinKey = function() {\n    \n};\n\n/** \n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class AllOne {\n    constructor() {\n\n    }\n\n    inc(key: string): void {\n\n    }\n\n    dec(key: string): void {\n\n    }\n\n    getMaxKey(): string {\n\n    }\n\n    getMinKey(): string {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class AllOne {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @return NULL\n     */\n    function inc($key) {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @return NULL\n     */\n    function dec($key) {\n        \n    }\n  \n    /**\n     * @return String\n     */\n    function getMaxKey() {\n        \n    }\n  \n    /**\n     * @return String\n     */\n    function getMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * $obj = AllOne();\n * $obj->inc($key);\n * $obj->dec($key);\n * $ret_3 = $obj->getMaxKey();\n * $ret_4 = $obj->getMinKey();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass AllOne {\n\n    init() {\n        \n    }\n    \n    func inc(_ key: String) {\n        \n    }\n    \n    func dec(_ key: String) {\n        \n    }\n    \n    func getMaxKey() -> String {\n        \n    }\n    \n    func getMinKey() -> String {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * let ret_3: String = obj.getMaxKey()\n * let ret_4: String = obj.getMinKey()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class AllOne() {\n\n    fun inc(key: String) {\n        \n    }\n\n    fun dec(key: String) {\n        \n    }\n\n    fun getMaxKey(): String {\n        \n    }\n\n    fun getMinKey(): String {\n        \n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class AllOne {\n\n  AllOne() {\n\n  }\n  \n  void inc(String key) {\n\n  }\n  \n  void dec(String key) {\n\n  }\n  \n  String getMaxKey() {\n\n  }\n  \n  String getMinKey() {\n\n  }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param3 = obj.getMaxKey();\n * String param4 = obj.getMinKey();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type AllOne struct {\n    \n}\n\n\nfunc Constructor() AllOne {\n    \n}\n\n\nfunc (this *AllOne) Inc(key string)  {\n    \n}\n\n\nfunc (this *AllOne) Dec(key string)  {\n    \n}\n\n\nfunc (this *AllOne) GetMaxKey() string {\n    \n}\n\n\nfunc (this *AllOne) GetMinKey() string {\n    \n}\n\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Inc(key);\n * obj.Dec(key);\n * param_3 := obj.GetMaxKey();\n * param_4 := obj.GetMinKey();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class AllOne\n    def initialize()\n        \n    end\n\n\n=begin\n    :type key: String\n    :rtype: Void\n=end\n    def inc(key)\n        \n    end\n\n\n=begin\n    :type key: String\n    :rtype: Void\n=end\n    def dec(key)\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_max_key()\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_min_key()\n        \n    end\n\n\nend\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne.new()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.get_max_key()\n# param_4 = obj.get_min_key()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class AllOne() {\n\n    def inc(key: String) {\n        \n    }\n\n    def dec(key: String) {\n        \n    }\n\n    def getMaxKey(): String = {\n        \n    }\n\n    def getMinKey(): String = {\n        \n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct AllOne {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl AllOne {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn inc(&self, key: String) {\n        \n    }\n    \n    fn dec(&self, key: String) {\n        \n    }\n    \n    fn get_max_key(&self) -> String {\n        \n    }\n    \n    fn get_min_key(&self) -> String {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne::new();\n * obj.inc(key);\n * obj.dec(key);\n * let ret_3: String = obj.get_max_key();\n * let ret_4: String = obj.get_min_key();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define all-one%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; inc : string? -> void?\n    (define/public (inc key)\n\n      )\n    ; dec : string? -> void?\n    (define/public (dec key)\n\n      )\n    ; get-max-key : -> string?\n    (define/public (get-max-key)\n\n      )\n    ; get-min-key : -> string?\n    (define/public (get-min-key)\n\n      )))\n\n;; Your all-one% object will be instantiated and called as such:\n;; (define obj (new all-one%))\n;; (send obj inc key)\n;; (send obj dec key)\n;; (define param_3 (send obj get-max-key))\n;; (define param_4 (send obj get-min-key))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec all_one_init_() -> any().\nall_one_init_() ->\n  .\n\n-spec all_one_inc(Key :: unicode:unicode_binary()) -> any().\nall_one_inc(Key) ->\n  .\n\n-spec all_one_dec(Key :: unicode:unicode_binary()) -> any().\nall_one_dec(Key) ->\n  .\n\n-spec all_one_get_max_key() -> unicode:unicode_binary().\nall_one_get_max_key() ->\n  .\n\n-spec all_one_get_min_key() -> unicode:unicode_binary().\nall_one_get_min_key() ->\n  .\n\n\n%% Your functions will be called as such:\n%% all_one_init_(),\n%% all_one_inc(Key),\n%% all_one_dec(Key),\n%% Param_3 = all_one_get_max_key(),\n%% Param_4 = all_one_get_min_key(),\n\n%% all_one_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule AllOne do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec inc(key :: String.t) :: any\n  def inc(key) do\n\n  end\n\n  @spec dec(key :: String.t) :: any\n  def dec(key) do\n\n  end\n\n  @spec get_max_key() :: String.t\n  def get_max_key() do\n\n  end\n\n  @spec get_min_key() :: String.t\n  def get_min_key() do\n\n  end\nend\n\n# Your functions will be called as such:\n# AllOne.init_()\n# AllOne.inc(key)\n# AllOne.dec(key)\n# param_3 = AllOne.get_max_key()\n# param_4 = AllOne.get_min_key()\n\n# AllOne.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\nImplement the AllOne class:\n\nAllOne() Initializes the object of the data structure.\ninc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\ndec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\ngetMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\ngetMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n\nNote that each function must run in O(1) average time complexity.\n \nExample 1:\n\nInput\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\nOutput\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\nExplanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"\n\n \nConstraints:\n\n1 <= key.length <= 10\nkey consists of lowercase English letters.\nIt is guaranteed that for each call to dec, key is existing in the data structure.\nAt most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"AllOne\",\"inc\",\"inc\",\"getMaxKey\",\"getMinKey\",\"inc\",\"getMaxKey\",\"getMinKey\"]\n[[],[\"hello\"],[\"hello\"],[],[],[\"leet\"],[],[]]"
    ],
    "title": "All O`one Data Structure",
    "topic_tags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    "updated_at": 1695094339,
    "url": "https://leetcode.com/problems/all-oone-data-structure/"
  },
  {
    "id": "460",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class LFUCache {\npublic:\n    LFUCache(int capacity) {\n        \n    }\n    \n    int get(int key) {\n        \n    }\n    \n    void put(int key, int value) {\n        \n    }\n};\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache* obj = new LFUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class LFUCache {\n\n    public LFUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class LFUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class LFUCache:\n\n    def __init__(self, capacity: int):\n        \n\n    def get(self, key: int) -> int:\n        \n\n    def put(self, key: int, value: int) -> None:\n        \n\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} LFUCache;\n\n\nLFUCache* lFUCacheCreate(int capacity) {\n    \n}\n\nint lFUCacheGet(LFUCache* obj, int key) {\n  \n}\n\nvoid lFUCachePut(LFUCache* obj, int key, int value) {\n  \n}\n\nvoid lFUCacheFree(LFUCache* obj) {\n    \n}\n\n/**\n * Your LFUCache struct will be instantiated and called as such:\n * LFUCache* obj = lFUCacheCreate(capacity);\n * int param_1 = lFUCacheGet(obj, key);\n \n * lFUCachePut(obj, key, value);\n \n * lFUCacheFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class LFUCache {\n\n    public LFUCache(int capacity) {\n        \n    }\n    \n    public int Get(int key) {\n        \n    }\n    \n    public void Put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} capacity\n */\nvar LFUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLFUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLFUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class LFUCache {\n    constructor(capacity: number) {\n\n    }\n\n    get(key: number): number {\n\n    }\n\n    put(key: number, value: number): void {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class LFUCache {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * $obj = LFUCache($capacity);\n * $ret_1 = $obj->get($key);\n * $obj->put($key, $value);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass LFUCache {\n\n    init(_ capacity: Int) {\n        \n    }\n    \n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    func put(_ key: Int, _ value: Int) {\n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * let obj = LFUCache(capacity)\n * let ret_1: Int = obj.get(key)\n * obj.put(key, value)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class LFUCache(capacity: Int) {\n\n    fun get(key: Int): Int {\n        \n    }\n\n    fun put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class LFUCache {\n\n  LFUCache(int capacity) {\n\n  }\n  \n  int get(int key) {\n\n  }\n  \n  void put(int key, int value) {\n\n  }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = LFUCache(capacity);\n * int param1 = obj.get(key);\n * obj.put(key,value);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type LFUCache struct {\n    \n}\n\n\nfunc Constructor(capacity int) LFUCache {\n    \n}\n\n\nfunc (this *LFUCache) Get(key int) int {\n    \n}\n\n\nfunc (this *LFUCache) Put(key int, value int)  {\n    \n}\n\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class LFUCache\n\n=begin\n    :type capacity: Integer\n=end\n    def initialize(capacity)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n        \n    end\n\n\nend\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache.new(capacity)\n# param_1 = obj.get(key)\n# obj.put(key, value)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class LFUCache(_capacity: Int) {\n\n    def get(key: Int): Int = {\n        \n    }\n\n    def put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct LFUCache {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LFUCache {\n\n    fn new(capacity: i32) -> Self {\n        \n    }\n    \n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    fn put(&self, key: i32, value: i32) {\n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * let obj = LFUCache::new(capacity);\n * let ret_1: i32 = obj.get(key);\n * obj.put(key, value);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define lfu-cache%\n  (class object%\n    (super-new)\n\n    ; capacity : exact-integer?\n    (init-field\n      capacity)\n    \n    ; get : exact-integer? -> exact-integer?\n    (define/public (get key)\n\n      )\n    ; put : exact-integer? exact-integer? -> void?\n    (define/public (put key value)\n\n      )))\n\n;; Your lfu-cache% object will be instantiated and called as such:\n;; (define obj (new lfu-cache% [capacity capacity]))\n;; (define param_1 (send obj get key))\n;; (send obj put key value)"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec lfu_cache_init_(Capacity :: integer()) -> any().\nlfu_cache_init_(Capacity) ->\n  .\n\n-spec lfu_cache_get(Key :: integer()) -> integer().\nlfu_cache_get(Key) ->\n  .\n\n-spec lfu_cache_put(Key :: integer(), Value :: integer()) -> any().\nlfu_cache_put(Key, Value) ->\n  .\n\n\n%% Your functions will be called as such:\n%% lfu_cache_init_(Capacity),\n%% Param_1 = lfu_cache_get(Key),\n%% lfu_cache_put(Key, Value),\n\n%% lfu_cache_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule LFUCache do\n  @spec init_(capacity :: integer) :: any\n  def init_(capacity) do\n\n  end\n\n  @spec get(key :: integer) :: integer\n  def get(key) do\n\n  end\n\n  @spec put(key :: integer, value :: integer) :: any\n  def put(key, value) do\n\n  end\nend\n\n# Your functions will be called as such:\n# LFUCache.init_(capacity)\n# param_1 = LFUCache.get(key)\n# LFUCache.put(key, value)\n\n# LFUCache.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache.\nImplement the LFUCache class:\n\nLFUCache(int capacity) Initializes the object with the capacity of the data structure.\nint get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\nvoid put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\nThe functions get and put must each run in O(1) average time complexity.\n \nExample 1:\n\nInput\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                 // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\n\n \nConstraints:\n\n1 <= capacity <= 104\n0 <= key <= 105\n0 <= value <= 109\nAt most 2 * 105 calls will be made to get and put.\n\n \n ",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"LFUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[3],[4,4],[1],[3],[4]]"
    ],
    "title": "LFU Cache",
    "topic_tags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    "updated_at": 1695094378,
    "url": "https://leetcode.com/problems/lfu-cache/"
  },
  {
    "id": "146",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class LRUCache {\npublic:\n    LRUCache(int capacity) {\n        \n    }\n    \n    int get(int key) {\n        \n    }\n    \n    void put(int key, int value) {\n        \n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class LRUCache:\n\n    def __init__(self, capacity: int):\n        \n\n    def get(self, key: int) -> int:\n        \n\n    def put(self, key: int, value: int) -> None:\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} LRUCache;\n\n\nLRUCache* lRUCacheCreate(int capacity) {\n    \n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n  \n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n  \n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    \n}\n\n/**\n * Your LRUCache struct will be instantiated and called as such:\n * LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);\n \n * lRUCachePut(obj, key, value);\n \n * lRUCacheFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int Get(int key) {\n        \n    }\n    \n    public void Put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class LRUCache {\n    constructor(capacity: number) {\n\n    }\n\n    get(key: number): number {\n\n    }\n\n    put(key: number, value: number): void {\n\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class LRUCache {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * $obj = LRUCache($capacity);\n * $ret_1 = $obj->get($key);\n * $obj->put($key, $value);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass LRUCache {\n\n    init(_ capacity: Int) {\n        \n    }\n    \n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    func put(_ key: Int, _ value: Int) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache(capacity)\n * let ret_1: Int = obj.get(key)\n * obj.put(key, value)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class LRUCache(capacity: Int) {\n\n    fun get(key: Int): Int {\n        \n    }\n\n    fun put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class LRUCache {\n\n  LRUCache(int capacity) {\n\n  }\n  \n  int get(int key) {\n\n  }\n  \n  void put(int key, int value) {\n\n  }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = LRUCache(capacity);\n * int param1 = obj.get(key);\n * obj.put(key,value);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type LRUCache struct {\n    \n}\n\n\nfunc Constructor(capacity int) LRUCache {\n    \n}\n\n\nfunc (this *LRUCache) Get(key int) int {\n    \n}\n\n\nfunc (this *LRUCache) Put(key int, value int)  {\n    \n}\n\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class LRUCache\n\n=begin\n    :type capacity: Integer\n=end\n    def initialize(capacity)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n        \n    end\n\n\nend\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache.new(capacity)\n# param_1 = obj.get(key)\n# obj.put(key, value)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class LRUCache(_capacity: Int) {\n\n    def get(key: Int): Int = {\n        \n    }\n\n    def put(key: Int, value: Int) {\n        \n    }\n\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct LRUCache {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LRUCache {\n\n    fn new(capacity: i32) -> Self {\n        \n    }\n    \n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    fn put(&self, key: i32, value: i32) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache::new(capacity);\n * let ret_1: i32 = obj.get(key);\n * obj.put(key, value);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define lru-cache%\n  (class object%\n    (super-new)\n\n    ; capacity : exact-integer?\n    (init-field\n      capacity)\n    \n    ; get : exact-integer? -> exact-integer?\n    (define/public (get key)\n\n      )\n    ; put : exact-integer? exact-integer? -> void?\n    (define/public (put key value)\n\n      )))\n\n;; Your lru-cache% object will be instantiated and called as such:\n;; (define obj (new lru-cache% [capacity capacity]))\n;; (define param_1 (send obj get key))\n;; (send obj put key value)"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec lru_cache_init_(Capacity :: integer()) -> any().\nlru_cache_init_(Capacity) ->\n  .\n\n-spec lru_cache_get(Key :: integer()) -> integer().\nlru_cache_get(Key) ->\n  .\n\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\nlru_cache_put(Key, Value) ->\n  .\n\n\n%% Your functions will be called as such:\n%% lru_cache_init_(Capacity),\n%% Param_1 = lru_cache_get(Key),\n%% lru_cache_put(Key, Value),\n\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule LRUCache do\n  @spec init_(capacity :: integer) :: any\n  def init_(capacity) do\n\n  end\n\n  @spec get(key :: integer) :: integer\n  def get(key) do\n\n  end\n\n  @spec put(key :: integer, value :: integer) :: any\n  def put(key, value) do\n\n  end\nend\n\n# Your functions will be called as such:\n# LRUCache.init_(capacity)\n# param_1 = LRUCache.get(key)\n# LRUCache.put(key, value)\n\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.\n \nExample 1:\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n \nConstraints:\n\n1 <= capacity <= 3000\n0 <= key <= 104\n0 <= value <= 105\nAt most 2 * 105 calls will be made to get and put.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]"
    ],
    "title": "LRU Cache",
    "topic_tags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    "updated_at": 1695019654,
    "url": "https://leetcode.com/problems/lru-cache/"
  },
  {
    "id": "766",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n};\n*/\n\nclass Solution {\n    public Node flatten(Node head) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution(object):\n    def flatten(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution:\n    def flatten(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        "
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n}\n*/\n\npublic class Solution {\n    public Node Flatten(Node head) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for node.\n * class Node {\n *     val: number\n *     prev: Node | null\n *     next: Node | null\n *     child: Node | null\n *     constructor(val?: number, prev? : Node, next? : Node, child? : Node) {\n *         this.val = (val===undefined ? 0 : val);\n *         this.prev = (prev===undefined ? null : prev);\n *         this.next = (next===undefined ? null : next);\n *         this.child = (child===undefined ? null : child);\n *     }\n * }\n */\n\nfunction flatten(head: Node | null): Node | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $prev = null;\n *     public $next = null;\n *     public $child = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->prev = null;\n *         $this->next = null;\n *         $this->child = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $head\n     * @return Node\n     */\n    function flatten($head) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var prev: Node?\n *     public var next: Node?\n *     public var child: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.prev = nil\n *         self.next = nil\n *         self.child  = nil\n *     }\n * }\n */\n\nclass Solution {\n    func flatten(_ head: Node?) -> Node? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var prev: Node? = null\n *     var next: Node? = null\n *     var child: Node? = null\n * }\n */\n\nclass Solution {\n    fun flatten(root: Node?): Node? {\n        \n    }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Prev *Node\n *     Next *Node\n *     Child *Node\n * }\n */\n\nfunc flatten(root *Node) *Node {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :prev, :next, :child\n#     def initialize(val=nil, prev=nil, next_=nil, child=nil)\n#         @val = val\n#         @prev = prev\n#         @next = next_\n#         @child = child\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef flatten(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var prev: Node = null\n *   var next: Node = null\n *   var child: Node = null\n * }\n */\n\nobject Solution {\n    def flatten(head: Node): Node = {\n    \t\n    }\n}"
      }
    ],
    "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\n \nExample 1:\n\n\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n\n\nExample 2:\n\n\nInput: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n\n\nExample 3:\n\nInput: head = []\nOutput: []\nExplanation: There could be empty list in the input.\n\n \nConstraints:\n\nThe number of Nodes will not exceed 1000.\n1 <= Node.val <= 105\n\n \nHow the multilevel linked list is represented in test cases:\nWe use the multilevel linked list from Example 1 above:\n\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\nThe serialization of each level is as follows:\n\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\n\n[1,    2,    3, 4, 5, 6, null]\n             |\n[null, null, 7,    8, 9, 10, null]\n                   |\n[            null, 11, 12, null]\n\nMerging the serialization of each level and removing trailing nulls we obtain:\n\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
      "[1,2,null,3]",
      "[]"
    ],
    "title": "Flatten a Multilevel Doubly Linked List",
    "topic_tags": ["Linked List", "Depth-First Search", "Doubly-Linked List"],
    "updated_at": 1695094693,
    "url": "https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/"
  },
  {
    "id": "70",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int climbStairs(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function climbStairs(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int climbStairs(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func climbStairs(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n\n  end\nend"
      }
    ],
    "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n \nExample 1:\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n \nConstraints:\n\n1 <= n <= 45\n\n",
    "difficulty": "Easy",
    "hints": [
      "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["2", "3"],
    "title": "Climbing Stairs",
    "topic_tags": ["Math", "Dynamic Programming", "Memoization"],
    "updated_at": 1695019010,
    "url": "https://leetcode.com/problems/climbing-stairs/"
  },
  {
    "id": "118",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function generate(numRows: number): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $numRows\n     * @return Integer[][]\n     */\n    function generate($numRows) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun generate(numRows: Int): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> generate(int numRows) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func generate(numRows int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (generate numRows)\n  (-> exact-integer? (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec generate(NumRows :: integer()) -> [[integer()]].\ngenerate(NumRows) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec generate(num_rows :: integer) :: [[integer]]\n  def generate(num_rows) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n \nExample 1:\nInput: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nExample 2:\nInput: numRows = 1\nOutput: [[1]]\n\n \nConstraints:\n\n1 <= numRows <= 30\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["5", "1"],
    "title": "Pascal's Triangle",
    "topic_tags": ["Array", "Dynamic Programming"],
    "updated_at": 1695019464,
    "url": "https://leetcode.com/problems/pascals-triangle/"
  },
  {
    "id": "10",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isMatch(char * s, char * p){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isMatch(s: string, p: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isMatch(String s, String p) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isMatch(s string, p string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n\n  end\nend"
      }
    ],
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n'.' Matches any single character.​​​​\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n \nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\nExample 3:\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n \nConstraints:\n\n1 <= s.length <= 20\n1 <= p.length <= 20\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and '*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aa\"\n\"a\"", "\"aa\"\n\"a*\"", "\"ab\"\n\".*\""],
    "title": "Regular Expression Matching",
    "topic_tags": ["String", "Dynamic Programming", "Recursion"],
    "updated_at": 1695017051,
    "url": "https://leetcode.com/problems/regular-expression-matching/"
  },
  {
    "id": "32",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestValidParentheses(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestValidParentheses(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestValidParentheses(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestValidParentheses(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n \nExample 1:\n\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n\nExample 2:\n\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n\nExample 3:\n\nInput: s = \"\"\nOutput: 0\n\n \nConstraints:\n\n0 <= s.length <= 3 * 104\ns[i] is '(', or ')'.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"(()\"", "\")()())\"", "\"\""],
    "title": "Longest Valid Parentheses",
    "topic_tags": ["String", "Dynamic Programming", "Stack"],
    "updated_at": 1695018982,
    "url": "https://leetcode.com/problems/longest-valid-parentheses/"
  },
  {
    "id": "5",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * longestPalindrome(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestPalindrome(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String longestPalindrome(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestPalindrome(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-palindrome s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, return the longest palindromic substring in s.\n \nExample 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consist of only digits and English letters.\n\n",
    "difficulty": "Medium",
    "hints": [
      "How can we reuse a previously computed palindrome to compute a larger palindrome?",
      "If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?",
      "Complexity based hint:\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"babad\"", "\"cbbd\""],
    "title": "Longest Palindromic Substring",
    "topic_tags": ["String", "Dynamic Programming"],
    "updated_at": 1695017045,
    "url": "https://leetcode.com/problems/longest-palindromic-substring/"
  },
  {
    "id": "22",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** generateParenthesis(int n, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function generateParenthesis(n: number): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> generateParenthesis(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func generateParenthesis(n int) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n\n  end\nend"
      }
    ],
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n \nExample 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nExample 2:\nInput: n = 1\nOutput: [\"()\"]\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Generate Parentheses",
    "topic_tags": ["String", "Dynamic Programming", "Backtracking"],
    "updated_at": 1695018975,
    "url": "https://leetcode.com/problems/generate-parentheses/"
  },
  {
    "id": "856",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int consecutiveNumbersSum(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int consecutiveNumbersSum(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def consecutiveNumbersSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int consecutiveNumbersSum(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ConsecutiveNumbersSum(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar consecutiveNumbersSum = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function consecutiveNumbersSum(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function consecutiveNumbersSum($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func consecutiveNumbersSum(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun consecutiveNumbersSum(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int consecutiveNumbersSum(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func consecutiveNumbersSum(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef consecutive_numbers_sum(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def consecutiveNumbersSum(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn consecutive_numbers_sum(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (consecutive-numbers-sum n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec consecutive_numbers_sum(N :: integer()) -> integer().\nconsecutive_numbers_sum(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec consecutive_numbers_sum(n :: integer) :: integer\n  def consecutive_numbers_sum(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\n \nExample 1:\n\nInput: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\n\nExample 2:\n\nInput: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4\n\nExample 3:\n\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n\n \nConstraints:\n\n1 <= n <= 109\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["5", "9", "15"],
    "title": "Consecutive Numbers Sum",
    "topic_tags": ["Math", "Enumeration"],
    "updated_at": 1695094802,
    "url": "https://leetcode.com/problems/consecutive-numbers-sum/"
  },
  {
    "id": "204",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int countPrimes(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int countPrimes(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int countPrimes(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int CountPrimes(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function countPrimes(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countPrimes($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func countPrimes(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun countPrimes(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int countPrimes(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func countPrimes(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef count_primes(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def countPrimes(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn count_primes(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (count-primes n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec count_primes(N :: integer()) -> integer().\ncount_primes(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec count_primes(n :: integer) :: integer\n  def count_primes(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.\n \nExample 1:\n\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\nExample 2:\n\nInput: n = 0\nOutput: 0\n\nExample 3:\n\nInput: n = 1\nOutput: 0\n\n \nConstraints:\n\n0 <= n <= 5 * 106\n\n",
    "difficulty": "Medium",
    "hints": [
      "Checking all the integers in the range [1, n - 1] is not efficient. Think about a better approach.",
      "Since most of the numbers are not primes, we need a fast approach to exclude the non-prime integers.",
      "Use Sieve of Eratosthenes."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10", "0", "1"],
    "title": "Count Primes",
    "topic_tags": ["Array", "Math", "Enumeration", "Number Theory"],
    "updated_at": 1695094115,
    "url": "https://leetcode.com/problems/count-primes/"
  },
  {
    "id": "332",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findItinerary(vector<vector<string>>& tickets) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> findItinerary(List<List<String>> tickets) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findItinerary(char *** tickets, int ticketsSize, int* ticketsColSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FindItinerary(IList<IList<string>> tickets) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findItinerary(tickets: string[][]): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $tickets\n     * @return String[]\n     */\n    function findItinerary($tickets) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findItinerary(_ tickets: [[String]]) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findItinerary(tickets: List<List<String>>): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findItinerary(List<List<String>> tickets) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findItinerary(tickets [][]string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[][]} tickets\n# @return {String[]}\ndef find_itinerary(tickets)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findItinerary(tickets: List[List[String]]): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_itinerary(tickets: Vec<Vec<String>>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-itinerary tickets)\n  (-> (listof (listof string?)) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_itinerary(Tickets :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()].\nfind_itinerary(Tickets) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_itinerary(tickets :: [[String.t]]) :: [String.t]\n  def find_itinerary(tickets) do\n\n  end\nend"
      }
    ],
    "description": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\nFor example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n \nExample 1:\n\n\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n\nExample 2:\n\n\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n\n \nConstraints:\n\n1 <= tickets.length <= 300\ntickets[i].length == 2\nfromi.length == 3\ntoi.length == 3\nfromi and toi consist of uppercase English letters.\nfromi != toi\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
      "[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]"
    ],
    "title": "Reconstruct Itinerary",
    "topic_tags": ["Depth-First Search", "Graph", "Eulerian Circuit"],
    "updated_at": 1695094237,
    "url": "https://leetcode.com/problems/reconstruct-itinerary/"
  },
  {
    "id": "754",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string crackSafe(int n, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String crackSafe(int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def crackSafe(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * crackSafe(int n, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string CrackSafe(int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar crackSafe = function(n, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function crackSafe(n: number, k: number): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function crackSafe($n, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func crackSafe(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun crackSafe(n: Int, k: Int): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String crackSafe(int n, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func crackSafe(n int, k int) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef crack_safe(n, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def crackSafe(n: Int, k: Int): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn crack_safe(n: i32, k: i32) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (crack-safe n k)\n  (-> exact-integer? exact-integer? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec crack_safe(N :: integer(), K :: integer()) -> unicode:unicode_binary().\ncrack_safe(N, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec crack_safe(n :: integer, k :: integer) :: String.t\n  def crack_safe(n, k) do\n\n  end\nend"
      }
    ],
    "description": "There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\n\nFor example, the correct password is \"345\" and you enter in \"012345\":\n\n\t\nAfter typing 0, the most recent 3 digits is \"0\", which is incorrect.\nAfter typing 1, the most recent 3 digits is \"01\", which is incorrect.\nAfter typing 2, the most recent 3 digits is \"012\", which is incorrect.\nAfter typing 3, the most recent 3 digits is \"123\", which is incorrect.\nAfter typing 4, the most recent 3 digits is \"234\", which is incorrect.\nAfter typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\n\n\n\nReturn any string of minimum length that will unlock the safe at some point of entering it.\n \nExample 1:\n\nInput: n = 1, k = 2\nOutput: \"10\"\nExplanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.\n\nExample 2:\n\nInput: n = 2, k = 2\nOutput: \"01100\"\nExplanation: For each possible password:\n- \"00\" is typed in starting from the 4th digit.\n- \"01\" is typed in starting from the 1st digit.\n- \"10\" is typed in starting from the 3rd digit.\n- \"11\" is typed in starting from the 2nd digit.\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.\n\n \nConstraints:\n\n1 <= n <= 4\n1 <= k <= 10\n1 <= kn <= 4096\n\n",
    "difficulty": "Hard",
    "hints": [
      "We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["1\n2", "2\n2"],
    "title": "Cracking the Safe",
    "topic_tags": ["Depth-First Search", "Graph", "Eulerian Circuit"],
    "updated_at": 1695094683,
    "url": "https://leetcode.com/problems/cracking-the-safe/"
  },
  {
    "id": "292",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canWinNim(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canWinNim(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canWinNim(self, n: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canWinNim(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanWinNim(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar canWinNim = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canWinNim(n: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canWinNim($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canWinNim(_ n: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canWinNim(n: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canWinNim(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canWinNim(n int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Boolean}\ndef can_win_nim(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canWinNim(n: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_win_nim(n: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-win-nim n)\n  (-> exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_win_nim(N :: integer()) -> boolean().\ncan_win_nim(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_win_nim(n :: integer) :: boolean\n  def can_win_nim(n) do\n\n  end\nend"
      }
    ],
    "description": "You are playing the following Nim Game with your friend:\n\nInitially, there is a heap of stones on the table.\nYou and your friend will alternate taking turns, and you go first.\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\nThe one who removes the last stone is the winner.\n\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n \nExample 1:\n\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n\nExample 2:\n\nInput: n = 1\nOutput: true\n\nExample 3:\n\nInput: n = 2\nOutput: true\n\n \nConstraints:\n\n1 <= n <= 231 - 1\n\n",
    "difficulty": "Easy",
    "hints": [
      "If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["4", "1", "2"],
    "title": "Nim Game",
    "topic_tags": ["Math", "Brainteaser", "Game Theory"],
    "updated_at": 1695094198,
    "url": "https://leetcode.com/problems/nim-game/"
  },
  {
    "id": "828",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool xorGame(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean xorGame(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def xorGame(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def xorGame(self, nums: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool xorGame(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool XorGame(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar xorGame = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function xorGame(nums: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function xorGame($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func xorGame(_ nums: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun xorGame(nums: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool xorGame(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func xorGame(nums []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef xor_game(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def xorGame(nums: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn xor_game(nums: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (xor-game nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec xor_game(Nums :: [integer()]) -> boolean().\nxor_game(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec xor_game(nums :: [integer]) :: boolean\n  def xor_game(nums) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of integers nums represents the numbers written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: false\nExplanation: \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: true\n\nExample 3:\n\nInput: nums = [1,2,3]\nOutput: true\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n0 <= nums[i] < 216\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,2]", "[0,1]", "[1,2,3]"],
    "title": "Chalkboard XOR Game",
    "topic_tags": [
      "Array",
      "Math",
      "Bit Manipulation",
      "Brainteaser",
      "Game Theory"
    ],
    "updated_at": 1695094776,
    "url": "https://leetcode.com/problems/chalkboard-xor-game/"
  },
  {
    "id": "375",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int getMoneyAmount(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int getMoneyAmount(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getMoneyAmount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int getMoneyAmount(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int GetMoneyAmount(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar getMoneyAmount = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getMoneyAmount(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function getMoneyAmount($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getMoneyAmount(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getMoneyAmount(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int getMoneyAmount(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getMoneyAmount(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef get_money_amount(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getMoneyAmount(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_money_amount(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (get-money-amount n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_money_amount(N :: integer()) -> integer().\nget_money_amount(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_money_amount(n :: integer) :: integer\n  def get_money_amount(n) do\n\n  end\nend"
      }
    ],
    "description": "We are playing the Guessing Game. The game will work as follows:\n\nI pick a number between 1 and n.\nYou guess a number.\nIf you guess the right number, you win the game.\nIf you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\nEvery time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.\n\nGiven a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.\n \nExample 1:\n\n\nInput: n = 10\nOutput: 16\nExplanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n    - If this is my number, your total is $0. Otherwise, you pay $7.\n    - If my number is higher, the range is [8,10]. Guess 9.\n        - If this is my number, your total is $7. Otherwise, you pay $9.\n        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n    - If my number is lower, the range is [1,6]. Guess 3.\n        - If this is my number, your total is $7. Otherwise, you pay $3.\n        - If my number is higher, the range is [4,6]. Guess 5.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n        - If my number is lower, the range is [1,2]. Guess 1.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n\nExample 2:\n\nInput: n = 1\nOutput: 0\nExplanation: There is only one possible number, so you can guess 1 and not have to pay anything.\n\nExample 3:\n\nInput: n = 2\nOutput: 1\nExplanation: There are two possible numbers, 1 and 2.\n- Guess 1.\n    - If this is my number, your total is $0. Otherwise, you pay $1.\n    - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n\n \nConstraints:\n\n1 <= n <= 200\n\n",
    "difficulty": "Medium",
    "hints": [
      "The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the first scenario.",
      "Take a small example (n = 3). What do you end up paying in the worst case?",
      "Check out this article if you're still stuck.",
      "The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming.",
      "As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10", "1", "2"],
    "title": "Guess Number Higher or Lower II",
    "topic_tags": ["Math", "Dynamic Programming", "Game Theory"],
    "updated_at": 1695094274,
    "url": "https://leetcode.com/problems/guess-number-higher-or-lower-ii/"
  },
  {
    "id": "464",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canIWin(self, maxChoosableInteger, desiredTotal):\n        \"\"\"\n        :type maxChoosableInteger: int\n        :type desiredTotal: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canIWin(int maxChoosableInteger, int desiredTotal){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} maxChoosableInteger\n * @param {number} desiredTotal\n * @return {boolean}\n */\nvar canIWin = function(maxChoosableInteger, desiredTotal) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canIWin(maxChoosableInteger: number, desiredTotal: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $maxChoosableInteger\n     * @param Integer $desiredTotal\n     * @return Boolean\n     */\n    function canIWin($maxChoosableInteger, $desiredTotal) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canIWin(_ maxChoosableInteger: Int, _ desiredTotal: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canIWin(int maxChoosableInteger, int desiredTotal) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canIWin(maxChoosableInteger int, desiredTotal int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} max_choosable_integer\n# @param {Integer} desired_total\n# @return {Boolean}\ndef can_i_win(max_choosable_integer, desired_total)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_i_win(max_choosable_integer: i32, desired_total: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-i-win maxChoosableInteger desiredTotal)\n  (-> exact-integer? exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_i_win(MaxChoosableInteger :: integer(), DesiredTotal :: integer()) -> boolean().\ncan_i_win(MaxChoosableInteger, DesiredTotal) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_i_win(max_choosable_integer :: integer, desired_total :: integer) :: boolean\n  def can_i_win(max_choosable_integer, desired_total) do\n\n  end\nend"
      }
    ],
    "description": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\nWhat if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n \nExample 1:\n\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n\nExample 2:\n\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n\nExample 3:\n\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n\n \nConstraints:\n\n1 <= maxChoosableInteger <= 20\n0 <= desiredTotal <= 300\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10\n11", "10\n0", "10\n1"],
    "title": "Can I Win",
    "topic_tags": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Game Theory",
      "Bitmask"
    ],
    "updated_at": 1695094385,
    "url": "https://leetcode.com/problems/can-i-win/"
  },
  {
    "id": "830",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double largestTriangleArea(vector<vector<int>>& points) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double largestTriangleArea(int[][] points) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def largestTriangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double largestTriangleArea(int** points, int pointsSize, int* pointsColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double LargestTriangleArea(int[][] points) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar largestTriangleArea = function(points) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function largestTriangleArea(points: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function largestTriangleArea($points) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func largestTriangleArea(_ points: [[Int]]) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun largestTriangleArea(points: Array<IntArray>): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double largestTriangleArea(List<List<int>> points) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func largestTriangleArea(points [][]int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} points\n# @return {Float}\ndef largest_triangle_area(points)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def largestTriangleArea(points: Array[Array[Int]]): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn largest_triangle_area(points: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (largest-triangle-area points)\n  (-> (listof (listof exact-integer?)) flonum?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec largest_triangle_area(Points :: [[integer()]]) -> float().\nlargest_triangle_area(Points) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec largest_triangle_area(points :: [[integer]]) :: float\n  def largest_triangle_area(points) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\n\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2.00000\nExplanation: The five points are shown in the above figure. The red triangle is the largest.\n\nExample 2:\n\nInput: points = [[1,0],[0,0],[0,1]]\nOutput: 0.50000\n\n \nConstraints:\n\n3 <= points.length <= 50\n-50 <= xi, yi <= 50\nAll the given points are unique.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[0,0],[0,1],[1,0],[0,2],[2,0]]", "[[1,0],[0,0],[0,1]]"],
    "title": "Largest Triangle Area",
    "topic_tags": ["Array", "Math", "Geometry"],
    "updated_at": 1695094778,
    "url": "https://leetcode.com/problems/largest-triangle-area/"
  },
  {
    "id": "149",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxPoints(vector<vector<int>>& points) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxPoints(int[][] points) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxPoints(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxPoints(int** points, int pointsSize, int* pointsColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxPoints(int[][] points) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxPoints(points: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxPoints($points) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxPoints(_ points: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxPoints(points: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxPoints(List<List<int>> points) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxPoints(points [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef max_points(points)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxPoints(points: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_points(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-points points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_points(Points :: [[integer()]]) -> integer().\nmax_points(Points) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_points(points :: [[integer]]) :: integer\n  def max_points(points) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n \nExample 1:\n\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\nExample 2:\n\n\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\n \nConstraints:\n\n1 <= points.length <= 300\npoints[i].length == 2\n-104 <= xi, yi <= 104\nAll the points are unique.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[1,1],[2,2],[3,3]]",
      "[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]"
    ],
    "title": "Max Points on a Line",
    "topic_tags": ["Array", "Hash Table", "Math", "Geometry"],
    "updated_at": 1695019656,
    "url": "https://leetcode.com/problems/max-points-on-a-line/"
  },
  {
    "id": "335",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isSelfCrossing(vector<int>& distance) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isSelfCrossing(int[] distance) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isSelfCrossing(int* distance, int distanceSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsSelfCrossing(int[] distance) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} distance\n * @return {boolean}\n */\nvar isSelfCrossing = function(distance) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isSelfCrossing(distance: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $distance\n     * @return Boolean\n     */\n    function isSelfCrossing($distance) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isSelfCrossing(_ distance: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isSelfCrossing(distance: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isSelfCrossing(List<int> distance) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isSelfCrossing(distance []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} distance\n# @return {Boolean}\ndef is_self_crossing(distance)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isSelfCrossing(distance: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_self_crossing(distance: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-self-crossing distance)\n  (-> (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_self_crossing(Distance :: [integer()]) -> boolean().\nis_self_crossing(Distance) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_self_crossing(distance :: [integer]) :: boolean\n  def is_self_crossing(distance) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of integers distance.\nYou start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\nReturn true if your path crosses itself or false if it does not.\n \nExample 1:\n\n\nInput: distance = [2,1,1,2]\nOutput: true\nExplanation: The path crosses itself at the point (0, 1).\n\nExample 2:\n\n\nInput: distance = [1,2,3,4]\nOutput: false\nExplanation: The path does not cross itself at any point.\n\nExample 3:\n\n\nInput: distance = [1,1,1,2,1]\nOutput: true\nExplanation: The path crosses itself at the point (0, 0).\n\n \nConstraints:\n\n1 <= distance.length <= 105\n1 <= distance[i] <= 105\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,1,1,2]", "[1,2,3,4]", "[1,1,1,2,1]"],
    "title": "Self Crossing",
    "topic_tags": ["Array", "Math", "Geometry"],
    "updated_at": 1695094239,
    "url": "https://leetcode.com/problems/self-crossing/"
  },
  {
    "id": "223",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def computeArea(self, ax1, ay1, ax2, ay2, bx1, by1, bx2, by2):\n        \"\"\"\n        :type ax1: int\n        :type ay1: int\n        :type ax2: int\n        :type ay2: int\n        :type bx1: int\n        :type by1: int\n        :type bx2: int\n        :type by2: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ComputeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} ax1\n * @param {number} ay1\n * @param {number} ax2\n * @param {number} ay2\n * @param {number} bx1\n * @param {number} by1\n * @param {number} bx2\n * @param {number} by2\n * @return {number}\n */\nvar computeArea = function(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function computeArea(ax1: number, ay1: number, ax2: number, ay2: number, bx1: number, by1: number, bx2: number, by2: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $ax1\n     * @param Integer $ay1\n     * @param Integer $ax2\n     * @param Integer $ay2\n     * @param Integer $bx1\n     * @param Integer $by1\n     * @param Integer $bx2\n     * @param Integer $by2\n     * @return Integer\n     */\n    function computeArea($ax1, $ay1, $ax2, $ay2, $bx1, $by1, $bx2, $by2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func computeArea(_ ax1: Int, _ ay1: Int, _ ax2: Int, _ ay2: Int, _ bx1: Int, _ by1: Int, _ bx2: Int, _ by2: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun computeArea(ax1: Int, ay1: Int, ax2: Int, ay2: Int, bx1: Int, by1: Int, bx2: Int, by2: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func computeArea(ax1 int, ay1 int, ax2 int, ay2 int, bx1 int, by1 int, bx2 int, by2 int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} ax1\n# @param {Integer} ay1\n# @param {Integer} ax2\n# @param {Integer} ay2\n# @param {Integer} bx1\n# @param {Integer} by1\n# @param {Integer} bx2\n# @param {Integer} by2\n# @return {Integer}\ndef compute_area(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def computeArea(ax1: Int, ay1: Int, ax2: Int, ay2: Int, bx1: Int, by1: Int, bx2: Int, by2: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn compute_area(ax1: i32, ay1: i32, ax2: i32, ay2: i32, bx1: i32, by1: i32, bx2: i32, by2: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (compute-area ax1 ay1 ax2 ay2 bx1 by1 bx2 by2)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec compute_area(Ax1 :: integer(), Ay1 :: integer(), Ax2 :: integer(), Ay2 :: integer(), Bx1 :: integer(), By1 :: integer(), Bx2 :: integer(), By2 :: integer()) -> integer().\ncompute_area(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec compute_area(ax1 :: integer, ay1 :: integer, ax2 :: integer, ay2 :: integer, bx1 :: integer, by1 :: integer, bx2 :: integer, by2 :: integer) :: integer\n  def compute_area(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) do\n\n  end\nend"
      }
    ],
    "description": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n \nExample 1:\n\n\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n\nExample 2:\n\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16\n\n \nConstraints:\n\n-104 <= ax1 <= ax2 <= 104\n-104 <= ay1 <= ay2 <= 104\n-104 <= bx1 <= bx2 <= 104\n-104 <= by1 <= by2 <= 104\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["-3\n0\n3\n4\n0\n-1\n9\n2", "-2\n-2\n2\n2\n-2\n-2\n2\n2"],
    "title": "Rectangle Area",
    "topic_tags": ["Math", "Geometry"],
    "updated_at": 1695094142,
    "url": "https://leetcode.com/problems/rectangle-area/"
  },
  {
    "id": "593",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def validSquare(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: List[int]\n        :type p2: List[int]\n        :type p3: List[int]\n        :type p4: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool validSquare(int* p1, int p1Size, int* p2, int p2Size, int* p3, int p3Size, int* p4, int p4Size){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool ValidSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} p1\n * @param {number[]} p2\n * @param {number[]} p3\n * @param {number[]} p4\n * @return {boolean}\n */\nvar validSquare = function(p1, p2, p3, p4) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function validSquare(p1: number[], p2: number[], p3: number[], p4: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $p1\n     * @param Integer[] $p2\n     * @param Integer[] $p3\n     * @param Integer[] $p4\n     * @return Boolean\n     */\n    function validSquare($p1, $p2, $p3, $p4) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func validSquare(_ p1: [Int], _ p2: [Int], _ p3: [Int], _ p4: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun validSquare(p1: IntArray, p2: IntArray, p3: IntArray, p4: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool validSquare(List<int> p1, List<int> p2, List<int> p3, List<int> p4) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func validSquare(p1 []int, p2 []int, p3 []int, p4 []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} p1\n# @param {Integer[]} p2\n# @param {Integer[]} p3\n# @param {Integer[]} p4\n# @return {Boolean}\ndef valid_square(p1, p2, p3, p4)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def validSquare(p1: Array[Int], p2: Array[Int], p3: Array[Int], p4: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn valid_square(p1: Vec<i32>, p2: Vec<i32>, p3: Vec<i32>, p4: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (valid-square p1 p2 p3 p4)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec valid_square(P1 :: [integer()], P2 :: [integer()], P3 :: [integer()], P4 :: [integer()]) -> boolean().\nvalid_square(P1, P2, P3, P4) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec valid_square(p1 :: [integer], p2 :: [integer], p3 :: [integer], p4 :: [integer]) :: boolean\n  def valid_square(p1, p2, p3, p4) do\n\n  end\nend"
      }
    ],
    "description": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\n \nExample 1:\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: true\n\nExample 2:\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\nOutput: false\n\nExample 3:\n\nInput: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\nOutput: true\n\n \nConstraints:\n\np1.length == p2.length == p3.length == p4.length == 2\n-104 <= xi, yi <= 104\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[0,0]\n[1,1]\n[1,0]\n[0,1]",
      "[0,0]\n[1,1]\n[1,0]\n[0,12]",
      "[1,0]\n[-1,0]\n[0,1]\n[0,-1]"
    ],
    "title": "Valid Square",
    "topic_tags": ["Math", "Geometry"],
    "updated_at": 1695094514,
    "url": "https://leetcode.com/problems/valid-square/"
  },
  {
    "id": "329",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestIncreasingPath(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestIncreasingPath(matrix: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function longestIncreasingPath($matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestIncreasingPath(matrix: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestIncreasingPath(List<List<int>> matrix) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestIncreasingPath(matrix [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef longest_increasing_path(matrix)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_increasing_path(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-increasing-path matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_increasing_path(Matrix :: [[integer()]]) -> integer().\nlongest_increasing_path(Matrix) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_increasing_path(matrix :: [[integer]]) :: integer\n  def longest_increasing_path(matrix) do\n\n  end\nend"
      }
    ],
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n \nExample 1:\n\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n\nExample 2:\n\n\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\nExample 3:\n\nInput: matrix = [[1]]\nOutput: 1\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 231 - 1\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[9,9,4],[6,6,8],[2,1,1]]",
      "[[3,4,5],[3,2,6],[2,2,1]]",
      "[[1]]"
    ],
    "title": "Longest Increasing Path in a Matrix",
    "topic_tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "updated_at": 1695094232,
    "url": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix/"
  },
  {
    "id": "332",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findItinerary(vector<vector<string>>& tickets) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> findItinerary(List<List<String>> tickets) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findItinerary(char *** tickets, int ticketsSize, int* ticketsColSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FindItinerary(IList<IList<string>> tickets) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findItinerary(tickets: string[][]): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $tickets\n     * @return String[]\n     */\n    function findItinerary($tickets) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findItinerary(_ tickets: [[String]]) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findItinerary(tickets: List<List<String>>): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findItinerary(List<List<String>> tickets) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findItinerary(tickets [][]string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[][]} tickets\n# @return {String[]}\ndef find_itinerary(tickets)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findItinerary(tickets: List[List[String]]): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_itinerary(tickets: Vec<Vec<String>>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-itinerary tickets)\n  (-> (listof (listof string?)) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_itinerary(Tickets :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()].\nfind_itinerary(Tickets) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_itinerary(tickets :: [[String.t]]) :: [String.t]\n  def find_itinerary(tickets) do\n\n  end\nend"
      }
    ],
    "description": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\nFor example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n \nExample 1:\n\n\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n\nExample 2:\n\n\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n\n \nConstraints:\n\n1 <= tickets.length <= 300\ntickets[i].length == 2\nfromi.length == 3\ntoi.length == 3\nfromi and toi consist of uppercase English letters.\nfromi != toi\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
      "[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]"
    ],
    "title": "Reconstruct Itinerary",
    "topic_tags": ["Depth-First Search", "Graph", "Eulerian Circuit"],
    "updated_at": 1695094237,
    "url": "https://leetcode.com/problems/reconstruct-itinerary/"
  },
  {
    "id": "133",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution(object):\n    def cloneGraph(self, node):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nfrom typing import Optional\nclass Solution:\n    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numNeighbors;\n *     struct Node** neighbors;\n * };\n */\n\nstruct Node *cloneGraph(struct Node *s) {\n\t\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> neighbors;\n\n    public Node() {\n        val = 0;\n        neighbors = new List<Node>();\n    }\n\n    public Node(int _val) {\n        val = _val;\n        neighbors = new List<Node>();\n    }\n\n    public Node(int _val, List<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\npublic class Solution {\n    public Node CloneGraph(Node node) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * // Definition for a Node.\n * function Node(val, neighbors) {\n *    this.val = val === undefined ? 0 : val;\n *    this.neighbors = neighbors === undefined ? [] : neighbors;\n * };\n */\n\n/**\n * @param {Node} node\n * @return {Node}\n */\nvar cloneGraph = function(node) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     neighbors: Node[]\n *     constructor(val?: number, neighbors?: Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.neighbors = (neighbors===undefined ? [] : neighbors)\n *     }\n * }\n */\n\nfunction cloneGraph(node: Node | null): Node | null {\n\t\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $neighbors = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->neighbors = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $node\n     * @return Node\n     */\n    function cloneGraph($node) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var neighbors: [Node?]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.neighbors = []\n *     }\n * }\n */\n\nclass Solution {\n    func cloneGraph(_ node: Node?) -> Node? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var neighbors: ArrayList<Node?> = ArrayList<Node?>()\n * }\n */\n\nclass Solution {\n    fun cloneGraph(node: Node?): Node? {\n        \n    }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Neighbors []*Node\n * }\n */\n\nfunc cloneGraph(node *Node) *Node {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :neighbors\n#     def initialize(val = 0, neighbors = nil)\n#\t\t  @val = val\n#\t\t  neighbors = [] if neighbors.nil?\n#         @neighbors = neighbors\n#     end\n# end\n\n# @param {Node} node\n# @return {Node}\ndef cloneGraph(node)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var neighbors: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def cloneGraph(graph: Node): Node = {\n        \n    }\n}"
      }
    ],
    "description": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n\n \nTest case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n \nExample 1:\n\n\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n\nExample 2:\n\n\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n\nExample 3:\n\nInput: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.\n\n \nConstraints:\n\nThe number of nodes in the graph is in the range [0, 100].\n1 <= Node.val <= 100\nNode.val is unique for each node.\nThere are no repeated edges and no self-loops in the graph.\nThe Graph is connected and all nodes can be visited starting from the given node.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[2,4],[1,3],[2,4],[1,3]]", "[[]]", "[]"],
    "title": "Clone Graph",
    "topic_tags": [
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "updated_at": 1695019644,
    "url": "https://leetcode.com/problems/clone-graph/"
  },
  {
    "id": "207",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {boolean}\n */\nvar canFinish = function(numCourses, prerequisites) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canFinish(numCourses: number, prerequisites: number[][]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Boolean\n     */\n    function canFinish($numCourses, $prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canFinish(numCourses: Int, prerequisites: Array<IntArray>): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canFinish(int numCourses, List<List<int>> prerequisites) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canFinish(numCourses int, prerequisites [][]int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Boolean}\ndef can_finish(num_courses, prerequisites)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-finish numCourses prerequisites)\n  (-> exact-integer? (listof (listof exact-integer?)) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_finish(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> boolean().\ncan_finish(NumCourses, Prerequisites) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_finish(num_courses :: integer, prerequisites :: [[integer]]) :: boolean\n  def can_finish(num_courses, prerequisites) do\n\n  end\nend"
      }
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn true if you can finish all courses. Otherwise, return false.\n \nExample 1:\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\n\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\n \nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= 5000\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nAll the pairs prerequisites[i] are unique.\n\n",
    "difficulty": "Medium",
    "hints": [
      "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
      "Topological Sort via DFS - A great tutorial explaining the basic concepts of Topological Sort.",
      "Topological sort could also be done via BFS."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["2\n[[1,0]]", "2\n[[1,0],[0,1]]"],
    "title": "Course Schedule",
    "topic_tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "updated_at": 1695094119,
    "url": "https://leetcode.com/problems/course-schedule/"
  },
  {
    "id": "409",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestPalindrome(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestPalindrome(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestPalindrome(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestPalindrome(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindrome = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestPalindrome(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestPalindrome(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestPalindrome(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestPalindrome(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestPalindrome(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef longest_palindrome(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestPalindrome(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-palindrome s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> integer().\nlongest_palindrome(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: integer\n  def longest_palindrome(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome here.\n \nExample 1:\n\nInput: s = \"abccccdd\"\nOutput: 7\nExplanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n\nExample 2:\n\nInput: s = \"a\"\nOutput: 1\nExplanation: The longest palindrome that can be built is \"a\", whose length is 1.\n\n \nConstraints:\n\n1 <= s.length <= 2000\ns consists of lowercase and/or uppercase English letters only.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"abccccdd\"", "\"a\""],
    "title": "Longest Palindrome",
    "topic_tags": ["Hash Table", "String", "Greedy"],
    "updated_at": 1695094319,
    "url": "https://leetcode.com/problems/longest-palindrome/"
  },
  {
    "id": "455",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int findContentChildren(vector<int>& g, vector<int>& s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int findContentChildren(int* g, int gSize, int* s, int sSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int FindContentChildren(int[] g, int[] s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} g\n * @param {number[]} s\n * @return {number}\n */\nvar findContentChildren = function(g, s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findContentChildren(g: number[], s: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $g\n     * @param Integer[] $s\n     * @return Integer\n     */\n    function findContentChildren($g, $s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findContentChildren(_ g: [Int], _ s: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findContentChildren(g: IntArray, s: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int findContentChildren(List<int> g, List<int> s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findContentChildren(g []int, s []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} g\n# @param {Integer[]} s\n# @return {Integer}\ndef find_content_children(g, s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findContentChildren(g: Array[Int], s: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_content_children(g: Vec<i32>, s: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-content-children g s)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_content_children(G :: [integer()], S :: [integer()]) -> integer().\nfind_content_children(G, S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_content_children(g :: [integer], s :: [integer]) :: integer\n  def find_content_children(g, s) do\n\n  end\nend"
      }
    ],
    "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n \nExample 1:\n\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\nExample 2:\n\nInput: g = [1,2], s = [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\n \nConstraints:\n\n1 <= g.length <= 3 * 104\n0 <= s.length <= 3 * 104\n1 <= g[i], s[j] <= 231 - 1\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]\n[1,1]", "[1,2]\n[1,2,3]"],
    "title": "Assign Cookies",
    "topic_tags": ["Array", "Two Pointers", "Greedy", "Sorting"],
    "updated_at": 1695094371,
    "url": "https://leetcode.com/problems/assign-cookies/"
  },
  {
    "id": "44",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isMatch(char * s, char * p){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isMatch(s: string, p: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isMatch(String s, String p) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isMatch(s string, p string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n\n  end\nend"
      }
    ],
    "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n \nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\n\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\n\nExample 3:\n\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n \nConstraints:\n\n0 <= s.length, p.length <= 2000\ns contains only lowercase English letters.\np contains only lowercase English letters, '?' or '*'.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aa\"\n\"a\"", "\"aa\"\n\"*\"", "\"cb\"\n\"?a\""],
    "title": "Wildcard Matching",
    "topic_tags": ["String", "Dynamic Programming", "Greedy", "Recursion"],
    "updated_at": 1695018990,
    "url": "https://leetcode.com/problems/wildcard-matching/"
  },
  {
    "id": "135",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int candy(vector<int>& ratings) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int candy(int[] ratings) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int candy(int* ratings, int ratingsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Candy(int[] ratings) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} ratings\n * @return {number}\n */\nvar candy = function(ratings) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function candy(ratings: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $ratings\n     * @return Integer\n     */\n    function candy($ratings) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func candy(_ ratings: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun candy(ratings: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int candy(List<int> ratings) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func candy(ratings []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} ratings\n# @return {Integer}\ndef candy(ratings)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def candy(ratings: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn candy(ratings: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (candy ratings)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec candy(Ratings :: [integer()]) -> integer().\ncandy(Ratings) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec candy(ratings :: [integer]) :: integer\n  def candy(ratings) do\n\n  end\nend"
      }
    ],
    "description": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n \nExample 1:\n\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\nExample 2:\n\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n\n \nConstraints:\n\nn == ratings.length\n1 <= n <= 2 * 104\n0 <= ratings[i] <= 2 * 104\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,0,2]", "[1,2,2]"],
    "title": "Candy",
    "topic_tags": ["Array", "Greedy"],
    "updated_at": 1695019645,
    "url": "https://leetcode.com/problems/candy/"
  },
  {
    "id": "11",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxArea(int* height, int heightSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxArea(height: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxArea(List<int> height) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxArea(height []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n \nExample 1:\n\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\nExample 2:\n\nInput: height = [1,1]\nOutput: 1\n\n \nConstraints:\n\nn == height.length\n2 <= n <= 105\n0 <= height[i] <= 104\n\n",
    "difficulty": "Medium",
    "hints": [
      "If you simulate the problem, it will be O(n^2) which is not efficient.",
      "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
      "How can you calculate the amount of water at each step?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,8,6,2,5,4,8,3,7]", "[1,1]"],
    "title": "Container With Most Water",
    "topic_tags": ["Array", "Two Pointers", "Greedy"],
    "updated_at": 1695017099,
    "url": "https://leetcode.com/problems/container-with-most-water/"
  },
  {
    "id": "45",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int jump(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int jump(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int jump(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Jump(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function jump(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function jump($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func jump(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun jump(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int jump(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func jump(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef jump(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def jump(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn jump(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (jump nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec jump(Nums :: [integer()]) -> integer().\njump(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec jump(nums :: [integer]) :: integer\n  def jump(nums) do\n\n  end\nend"
      }
    ],
    "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n\n0 <= j <= nums[i] and\ni + j < n\n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n \nExample 1:\n\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\n\nInput: nums = [2,3,0,1,4]\nOutput: 2\n\n \nConstraints:\n\n1 <= nums.length <= 104\n0 <= nums[i] <= 1000\nIt's guaranteed that you can reach nums[n - 1].\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,3,1,1,4]", "[2,3,0,1,4]"],
    "title": "Jump Game II",
    "topic_tags": ["Array", "Dynamic Programming", "Greedy"],
    "updated_at": 1695018991,
    "url": "https://leetcode.com/problems/jump-game-ii/"
  },
  {
    "id": "572",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSubtree(self, root, subRoot):\n        \"\"\"\n        :type root: TreeNode\n        :type subRoot: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSubtree(struct TreeNode* root, struct TreeNode* subRoot){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSubtree(TreeNode root, TreeNode subRoot) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} subRoot\n * @return {boolean}\n */\nvar isSubtree = function(root, subRoot) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSubtree(root: TreeNode | null, subRoot: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param TreeNode $subRoot\n     * @return Boolean\n     */\n    function isSubtree($root, $subRoot) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSubtree(_ root: TreeNode?, _ subRoot: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSubtree(root: TreeNode?, subRoot: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSubtree(TreeNode? root, TreeNode? subRoot) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSubtree(root *TreeNode, subRoot *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {TreeNode} sub_root\n# @return {Boolean}\ndef is_subtree(root, sub_root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSubtree(root: TreeNode, subRoot: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_subtree(root: Option<Rc<RefCell<TreeNode>>>, sub_root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-subtree root subRoot)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_subtree(Root :: #tree_node{} | null, SubRoot :: #tree_node{} | null) -> boolean().\nis_subtree(Root, SubRoot) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_subtree(root :: TreeNode.t | nil, sub_root :: TreeNode.t | nil) :: boolean\n  def is_subtree(root, sub_root) do\n\n  end\nend"
      }
    ],
    "description": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n \nExample 1:\n\n\nInput: root = [3,4,5,1,2], subRoot = [4,1,2]\nOutput: true\n\nExample 2:\n\n\nInput: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in the root tree is in the range [1, 2000].\nThe number of nodes in the subRoot tree is in the range [1, 1000].\n-104 <= root.val <= 104\n-104 <= subRoot.val <= 104\n\n",
    "difficulty": "Easy",
    "hints": [
      "Which approach is better here- recursive or iterative?",
      "If recursive approach is better, can you write recursive function with its parameters?",
      "Two trees s and t are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
      "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[3,4,5,1,2]\n[4,1,2]",
      "[3,4,5,1,2,null,null,null,null,0]\n[4,1,2]"
    ],
    "title": "Subtree of Another Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "String Matching",
      "Binary Tree",
      "Hash Function"
    ],
    "updated_at": 1695094498,
    "url": "https://leetcode.com/problems/subtree-of-another-tree/"
  },
  {
    "id": "816",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyHashSet {\npublic:\n    MyHashSet() {\n        \n    }\n    \n    void add(int key) {\n        \n    }\n    \n    void remove(int key) {\n        \n    }\n    \n    bool contains(int key) {\n        \n    }\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet* obj = new MyHashSet();\n * obj->add(key);\n * obj->remove(key);\n * bool param_3 = obj->contains(key);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyHashSet {\n\n    public MyHashSet() {\n        \n    }\n    \n    public void add(int key) {\n        \n    }\n    \n    public void remove(int key) {\n        \n    }\n    \n    public boolean contains(int key) {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.add(key);\n * obj.remove(key);\n * boolean param_3 = obj.contains(key);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyHashSet(object):\n\n    def __init__(self):\n        \n\n    def add(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        \n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        \n\n    def contains(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyHashSet:\n\n    def __init__(self):\n        \n\n    def add(self, key: int) -> None:\n        \n\n    def remove(self, key: int) -> None:\n        \n\n    def contains(self, key: int) -> bool:\n        \n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyHashSet;\n\n\nMyHashSet* myHashSetCreate() {\n    \n}\n\nvoid myHashSetAdd(MyHashSet* obj, int key) {\n  \n}\n\nvoid myHashSetRemove(MyHashSet* obj, int key) {\n  \n}\n\nbool myHashSetContains(MyHashSet* obj, int key) {\n  \n}\n\nvoid myHashSetFree(MyHashSet* obj) {\n    \n}\n\n/**\n * Your MyHashSet struct will be instantiated and called as such:\n * MyHashSet* obj = myHashSetCreate();\n * myHashSetAdd(obj, key);\n \n * myHashSetRemove(obj, key);\n \n * bool param_3 = myHashSetContains(obj, key);\n \n * myHashSetFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyHashSet {\n\n    public MyHashSet() {\n        \n    }\n    \n    public void Add(int key) {\n        \n    }\n    \n    public void Remove(int key) {\n        \n    }\n    \n    public bool Contains(int key) {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.Add(key);\n * obj.Remove(key);\n * bool param_3 = obj.Contains(key);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MyHashSet = function() {\n    \n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n    \n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n    \n};\n\n/** \n * @param {number} key\n * @return {boolean}\n */\nMyHashSet.prototype.contains = function(key) {\n    \n};\n\n/** \n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MyHashSet {\n    constructor() {\n\n    }\n\n    add(key: number): void {\n\n    }\n\n    remove(key: number): void {\n\n    }\n\n    contains(key: number): boolean {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyHashSet {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function add($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function remove($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return Boolean\n     */\n    function contains($key) {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * $obj = MyHashSet();\n * $obj->add($key);\n * $obj->remove($key);\n * $ret_3 = $obj->contains($key);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyHashSet {\n\n    init() {\n        \n    }\n    \n    func add(_ key: Int) {\n        \n    }\n    \n    func remove(_ key: Int) {\n        \n    }\n    \n    func contains(_ key: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * let ret_3: Bool = obj.contains(key)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyHashSet() {\n\n    fun add(key: Int) {\n        \n    }\n\n    fun remove(key: Int) {\n        \n    }\n\n    fun contains(key: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MyHashSet {\n\n  MyHashSet() {\n\n  }\n  \n  void add(int key) {\n\n  }\n  \n  void remove(int key) {\n\n  }\n  \n  bool contains(int key) {\n\n  }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = MyHashSet();\n * obj.add(key);\n * obj.remove(key);\n * bool param3 = obj.contains(key);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyHashSet struct {\n    \n}\n\n\nfunc Constructor() MyHashSet {\n    \n}\n\n\nfunc (this *MyHashSet) Add(key int)  {\n    \n}\n\n\nfunc (this *MyHashSet) Remove(key int)  {\n    \n}\n\n\nfunc (this *MyHashSet) Contains(key int) bool {\n    \n}\n\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Add(key);\n * obj.Remove(key);\n * param_3 := obj.Contains(key);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyHashSet\n    def initialize()\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def add(key)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n        \n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Boolean\n=end\n    def contains(key)\n        \n    end\n\n\nend\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet.new()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyHashSet() {\n\n    def add(key: Int) {\n        \n    }\n\n    def remove(key: Int) {\n        \n    }\n\n    def contains(key: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyHashSet {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyHashSet {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add(&self, key: i32) {\n        \n    }\n    \n    fn remove(&self, key: i32) {\n        \n    }\n    \n    fn contains(&self, key: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet::new();\n * obj.add(key);\n * obj.remove(key);\n * let ret_3: bool = obj.contains(key);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define my-hash-set%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; add : exact-integer? -> void?\n    (define/public (add key)\n\n      )\n    ; remove : exact-integer? -> void?\n    (define/public (remove key)\n\n      )\n    ; contains : exact-integer? -> boolean?\n    (define/public (contains key)\n\n      )))\n\n;; Your my-hash-set% object will be instantiated and called as such:\n;; (define obj (new my-hash-set%))\n;; (send obj add key)\n;; (send obj remove key)\n;; (define param_3 (send obj contains key))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_hash_set_init_() -> any().\nmy_hash_set_init_() ->\n  .\n\n-spec my_hash_set_add(Key :: integer()) -> any().\nmy_hash_set_add(Key) ->\n  .\n\n-spec my_hash_set_remove(Key :: integer()) -> any().\nmy_hash_set_remove(Key) ->\n  .\n\n-spec my_hash_set_contains(Key :: integer()) -> boolean().\nmy_hash_set_contains(Key) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_hash_set_init_(),\n%% my_hash_set_add(Key),\n%% my_hash_set_remove(Key),\n%% Param_3 = my_hash_set_contains(Key),\n\n%% my_hash_set_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MyHashSet do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec add(key :: integer) :: any\n  def add(key) do\n\n  end\n\n  @spec remove(key :: integer) :: any\n  def remove(key) do\n\n  end\n\n  @spec contains(key :: integer) :: boolean\n  def contains(key) do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyHashSet.init_()\n# MyHashSet.add(key)\n# MyHashSet.remove(key)\n# param_3 = MyHashSet.contains(key)\n\n# MyHashSet.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a HashSet without using any built-in hash table libraries.\nImplement MyHashSet class:\n\nvoid add(key) Inserts the value key into the HashSet.\nbool contains(key) Returns whether the value key exists in the HashSet or not.\nvoid remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.\n\n \nExample 1:\n\nInput\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\n\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)\n \nConstraints:\n\n0 <= key <= 106\nAt most 104 calls will be made to add, remove, and contains.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MyHashSet\",\"add\",\"add\",\"contains\",\"contains\",\"add\",\"contains\",\"remove\",\"contains\"]\n[[],[1],[2],[1],[3],[2],[2],[2],[2]]"
    ],
    "title": "Design HashSet",
    "topic_tags": [
      "Array",
      "Hash Table",
      "Linked List",
      "Design",
      "Hash Function"
    ],
    "updated_at": 1695094759,
    "url": "https://leetcode.com/problems/design-hashset/"
  },
  {
    "id": "214",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string shortestPalindrome(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String shortestPalindrome(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * shortestPalindrome(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string ShortestPalindrome(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar shortestPalindrome = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function shortestPalindrome(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function shortestPalindrome($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func shortestPalindrome(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun shortestPalindrome(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String shortestPalindrome(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func shortestPalindrome(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef shortest_palindrome(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def shortestPalindrome(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn shortest_palindrome(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (shortest-palindrome s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec shortest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nshortest_palindrome(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec shortest_palindrome(s :: String.t) :: String.t\n  def shortest_palindrome(s) do\n\n  end\nend"
      }
    ],
    "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\n \nExample 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\nExample 2:\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of lowercase English letters only.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aacecaaa\"", "\"abcd\""],
    "title": "Shortest Palindrome",
    "topic_tags": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "updated_at": 1695094128,
    "url": "https://leetcode.com/problems/shortest-palindrome/"
  },
  {
    "id": "187",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findRepeatedDnaSequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findRepeatedDnaSequences(char * s, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar findRepeatedDnaSequences = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findRepeatedDnaSequences(s: string): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function findRepeatedDnaSequences($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findRepeatedDnaSequences(_ s: String) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findRepeatedDnaSequences(s: String): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findRepeatedDnaSequences(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findRepeatedDnaSequences(s string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String[]}\ndef find_repeated_dna_sequences(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findRepeatedDnaSequences(s: String): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_repeated_dna_sequences(s: String) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-repeated-dna-sequences s)\n  (-> string? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_repeated_dna_sequences(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nfind_repeated_dna_sequences(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_repeated_dna_sequences(s :: String.t) :: [String.t]\n  def find_repeated_dna_sequences(s) do\n\n  end\nend"
      }
    ],
    "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, \"ACGAATTCCG\" is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n \nExample 1:\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\nExample 2:\nInput: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n\n \nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'A', 'C', 'G', or 'T'.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"", "\"AAAAAAAAAAAAA\""],
    "title": "Repeated DNA Sequences",
    "topic_tags": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "updated_at": 1695094090,
    "url": "https://leetcode.com/problems/repeated-dna-sequences/"
  },
  {
    "id": "535",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n\n    // Encodes a URL to a shortened URL.\n    string encode(string longUrl) {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    string decode(string shortUrl) {\n        \n    }\n};\n\n// Your Solution object will be instantiated and called as such:\n// Solution solution;\n// solution.decode(solution.encode(url));"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "public class Codec {\n\n    // Encodes a URL to a shortened URL.\n    public String encode(String longUrl) {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    public String decode(String shortUrl) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(url));"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Codec:\n\n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        \n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        \n\n    def decode(self, shortUrl):\n        \"\"\"Decodes a shortened URL to its original URL.\n        \n        :type shortUrl: str\n        :rtype: str\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Codec:\n\n    def encode(self, longUrl: str) -> str:\n        \"\"\"Encodes a URL to a shortened URL.\n        \"\"\"\n        \n\n    def decode(self, shortUrl: str) -> str:\n        \"\"\"Decodes a shortened URL to its original URL.\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/** Encodes a URL to a shortened URL. */\nchar* encode(char* longUrl) {\n    \n}\n\n/** Decodes a shortened URL to its original URL. */\nchar* decode(char* shortUrl) {\n    \n}\n\n// Your functions will be called as such:\n// char* s = encode(s);\n// decode(s);"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Codec {\n\n    // Encodes a URL to a shortened URL\n    public string encode(string longUrl) {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    public string decode(string shortUrl) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(url));"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Encodes a URL to a shortened URL.\n *\n * @param {string} longUrl\n * @return {string}\n */\nvar encode = function(longUrl) {\n    \n};\n\n/**\n * Decodes a shortened URL to its original URL.\n *\n * @param {string} shortUrl\n * @return {string}\n */\nvar decode = function(shortUrl) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(url));\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Encodes a URL to a shortened URL.\n */\nfunction encode(longUrl: string): string {\n\t\n};\n\n/**\n * Decodes a shortened URL to its original URL.\n */\nfunction decode(shortUrl: string): string {\n\t\n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Codec {\n    /**\n     * Encodes a URL to a shortened URL.\n     * @param String $longUrl\n     * @return String\n     */\n    function encode($longUrl) {\n        \n    }\n    \n    /**\n     * Decodes a shortened URL to its original URL.\n     * @param String $shortUrl\n     * @return String\n     */\n    function decode($shortUrl) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $obj = Codec();\n * $s = $obj->encode($longUrl);\n * $ans = $obj->decode($s);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Codec {\n    // Encodes a URL to a shortened URL.\n    func encode(_ longUrl: String) -> String {\n        \n    }\n    \n    // Decodes a shortened URL to its original URL.\n    func decode(_ shortUrl: String) -> String {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec()\n * val s = obj.encode(longUrl)\n * let ans = obj.decode(s)\n*/"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Codec() {\n    // Encodes a URL to a shortened URL.\n    fun encode(longUrl: String): String {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    fun decode(shortUrl: String): String {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = Codec()\n * var url = obj.encode(longUrl)\n * var ans = obj.decode(url)\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type Codec struct {\n    \n}\n\n\nfunc Constructor() Codec {\n    \n}\n\n// Encodes a URL to a shortened URL.\nfunc (this *Codec) encode(longUrl string) string {\n\t\n}\n\n// Decodes a shortened URL to its original URL.\nfunc (this *Codec) decode(shortUrl string) string {\n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * obj := Constructor();\n * url := obj.encode(longUrl);\n * ans := obj.decode(url);\n */\n"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Encodes a URL to a shortened URL.\n#\n# @param {string} longUrl\n# @return {string}\ndef encode(longUrl)\n    \nend\n\n# Decodes a shortened URL to its original URL.\n#\n# @param {string} shortUrl\n# @return {string}\ndef decode(shortUrl)\n    \nend\n\n\n# Your functions will be called as such:\n# decode(encode(url))"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class Codec {\n    // Encodes a URL to a shortened URL.\n    def encode(longURL: String): String = {\n        \n    }\n    \n    // Decodes a shortened URL to its original URL.\n    def decode(shortURL: String): String = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = new Codec()\n * val s = obj.encode(longURL)\n * val ans = obj.decode(s)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\t\n    // Encodes a URL to a shortened URL.\n    fn encode(&self, longURL: String) -> String {\n        \n    }\n\t\n    // Decodes a shortened URL to its original URL.\n    fn decode(&self, shortURL: String) -> String {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let s: String = obj.encode(strs);\n * let ans: VecVec<String> = obj.decode(s);\n */"
      }
    ],
    "description": "Note: This is a companion problem to the System Design problem: Design TinyURL.\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\nImplement the Solution class:\n\nSolution() Initializes the object of the system.\nString encode(String longUrl) Returns a tiny URL for the given longUrl.\nString decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.\n\n \nExample 1:\n\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\n\nExplanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.\n\n \nConstraints:\n\n1 <= url.length <= 104\nurl is guranteed to be a valid URL.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"https://leetcode.com/problems/design-tinyurl\""],
    "title": "Encode and Decode TinyURL",
    "topic_tags": ["Hash Table", "String", "Design", "Hash Function"],
    "updated_at": 1695094465,
    "url": "https://leetcode.com/problems/encode-and-decode-tinyurl/"
  },
  {
    "id": "1",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function twoSum(nums: number[], target: number): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func twoSum(nums []int, target int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n \nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n \nConstraints:\n\n2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.\n\n \nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
    "difficulty": "Easy",
    "hints": [
      "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
      "So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
      "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,7,11,15]\n9", "[3,2,4]\n6", "[3,3]\n6"],
    "title": "Two Sum",
    "topic_tags": ["Array", "Hash Table"],
    "updated_at": 1695017039,
    "url": "https://leetcode.com/problems/two-sum/"
  },
  {
    "id": "13",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int romanToInt(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function romanToInt(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int romanToInt(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func romanToInt(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n\n  end\nend"
      }
    ],
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n \nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\nExample 3:\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n \nConstraints:\n\n1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\n\n",
    "difficulty": "Easy",
    "hints": [
      "Problem is simpler to solve by working the string from back to front and using a map."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"III\"", "\"LVIII\"", "\"MCMXCIV\""],
    "title": "Roman to Integer",
    "topic_tags": ["Hash Table", "Math", "String"],
    "updated_at": 1695017102,
    "url": "https://leetcode.com/problems/roman-to-integer/"
  },
  {
    "id": "30",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findSubstring(s: string, words: string[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> findSubstring(String s, List<String> words) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findSubstring(s string, words []string) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-substring s words)\n  (-> string? (listof string?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\nfind_substring(S, Words) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n\n  end\nend"
      }
    ],
    "description": "You are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n\nReturn the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n \nExample 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n\nExample 3:\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n\n \nConstraints:\n\n1 <= s.length <= 104\n1 <= words.length <= 5000\n1 <= words[i].length <= 30\ns and words[i] consist of lowercase English letters.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]",
      "\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]",
      "\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]"
    ],
    "title": "Substring with Concatenation of All Words",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695018981,
    "url": "https://leetcode.com/problems/substring-with-concatenation-of-all-words/"
  },
  {
    "id": "37",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void solveSudoku(char** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void solveSudoku(List<List<String>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func solveSudoku(board [][]byte)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (solve-sudoku board)\n  (-> (listof (listof char?)) void?)\n\n  )"
      }
    ],
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n \nExample 1:\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n\n\n \nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
    ],
    "title": "Sudoku Solver",
    "topic_tags": ["Array", "Hash Table", "Backtracking", "Matrix"],
    "updated_at": 1695018985,
    "url": "https://leetcode.com/problems/sudoku-solver/"
  },
  {
    "id": "3",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int lengthOfLongestSubstring(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function lengthOfLongestSubstring(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n \nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"abcabcbb\"", "\"bbbbb\"", "\"pwwkew\""],
    "title": "Longest Substring Without Repeating Characters",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695017042,
    "url": "https://leetcode.com/problems/longest-substring-without-repeating-characters/"
  },
  {
    "id": "12",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * intToRoman(int num){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function intToRoman(num: number): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String intToRoman(int num) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func intToRoman(num int) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n\n  end\nend"
      }
    ],
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.\n \nExample 1:\n\nInput: num = 3\nOutput: \"III\"\nExplanation: 3 is represented as 3 ones.\n\nExample 2:\n\nInput: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.\n\nExample 3:\n\nInput: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n \nConstraints:\n\n1 <= num <= 3999\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "58", "1994"],
    "title": "Integer to Roman",
    "topic_tags": ["Hash Table", "Math", "String"],
    "updated_at": 1695017101,
    "url": "https://leetcode.com/problems/integer-to-roman/"
  },
  {
    "id": "506",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findRelativeRanks(vector<int>& score) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String[] findRelativeRanks(int[] score) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findRelativeRanks(int* score, int scoreSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string[] FindRelativeRanks(int[] score) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findRelativeRanks(score: number[]): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $score\n     * @return String[]\n     */\n    function findRelativeRanks($score) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findRelativeRanks(_ score: [Int]) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findRelativeRanks(score: IntArray): Array<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findRelativeRanks(List<int> score) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findRelativeRanks(score []int) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} score\n# @return {String[]}\ndef find_relative_ranks(score)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findRelativeRanks(score: Array[Int]): Array[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_relative_ranks(score: Vec<i32>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-relative-ranks score)\n  (-> (listof exact-integer?) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_relative_ranks(Score :: [integer()]) -> [unicode:unicode_binary()].\nfind_relative_ranks(Score) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_relative_ranks(score :: [integer]) :: [String.t]\n  def find_relative_ranks(score) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\n \nExample 1:\n\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\nExample 2:\n\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\n\n\n \nConstraints:\n\nn == score.length\n1 <= n <= 104\n0 <= score[i] <= 106\nAll the values in score are unique.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[5,4,3,2,1]", "[10,3,8,9,4]"],
    "title": "Relative Ranks",
    "topic_tags": ["Array", "Sorting", "Heap (Priority Queue)"],
    "updated_at": 1695094436,
    "url": "https://leetcode.com/problems/relative-ranks/"
  },
  {
    "id": "789",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class KthLargest {\npublic:\n    KthLargest(int k, vector<int>& nums) {\n        \n    }\n    \n    int add(int val) {\n        \n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class KthLargest {\n\n    public KthLargest(int k, int[] nums) {\n        \n    }\n    \n    public int add(int val) {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.add(val);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class KthLargest(object):\n\n    def __init__(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def add(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        \n\n    def add(self, val: int) -> int:\n        \n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} KthLargest;\n\n\nKthLargest* kthLargestCreate(int k, int* nums, int numsSize) {\n    \n}\n\nint kthLargestAdd(KthLargest* obj, int val) {\n  \n}\n\nvoid kthLargestFree(KthLargest* obj) {\n    \n}\n\n/**\n * Your KthLargest struct will be instantiated and called as such:\n * KthLargest* obj = kthLargestCreate(k, nums, numsSize);\n * int param_1 = kthLargestAdd(obj, val);\n \n * kthLargestFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class KthLargest {\n\n    public KthLargest(int k, int[] nums) {\n        \n    }\n    \n    public int Add(int val) {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.Add(val);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} k\n * @param {number[]} nums\n */\nvar KthLargest = function(k, nums) {\n    \n};\n\n/** \n * @param {number} val\n * @return {number}\n */\nKthLargest.prototype.add = function(val) {\n    \n};\n\n/** \n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class KthLargest {\n    constructor(k: number, nums: number[]) {\n\n    }\n\n    add(val: number): number {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class KthLargest {\n    /**\n     * @param Integer $k\n     * @param Integer[] $nums\n     */\n    function __construct($k, $nums) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Integer\n     */\n    function add($val) {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * $obj = KthLargest($k, $nums);\n * $ret_1 = $obj->add($val);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass KthLargest {\n\n    init(_ k: Int, _ nums: [Int]) {\n        \n    }\n    \n    func add(_ val: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * let obj = KthLargest(k, nums)\n * let ret_1: Int = obj.add(val)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class KthLargest(k: Int, nums: IntArray) {\n\n    fun add(`val`: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class KthLargest {\n\n  KthLargest(int k, List<int> nums) {\n\n  }\n  \n  int add(int val) {\n\n  }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = KthLargest(k, nums);\n * int param1 = obj.add(val);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type KthLargest struct {\n    \n}\n\n\nfunc Constructor(k int, nums []int) KthLargest {\n    \n}\n\n\nfunc (this *KthLargest) Add(val int) int {\n    \n}\n\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * obj := Constructor(k, nums);\n * param_1 := obj.Add(val);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class KthLargest\n\n=begin\n    :type k: Integer\n    :type nums: Integer[]\n=end\n    def initialize(k, nums)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Integer\n=end\n    def add(val)\n        \n    end\n\n\nend\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest.new(k, nums)\n# param_1 = obj.add(val)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class KthLargest(_k: Int, _nums: Array[Int]) {\n\n    def add(`val`: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct KthLargest {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl KthLargest {\n\n    fn new(k: i32, nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn add(&self, val: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * let obj = KthLargest::new(k, nums);\n * let ret_1: i32 = obj.add(val);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define kth-largest%\n  (class object%\n    (super-new)\n\n    ; k : exact-integer?\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      k\n      nums)\n    \n    ; add : exact-integer? -> exact-integer?\n    (define/public (add val)\n\n      )))\n\n;; Your kth-largest% object will be instantiated and called as such:\n;; (define obj (new kth-largest% [k k] [nums nums]))\n;; (define param_1 (send obj add val))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec kth_largest_init_(K :: integer(), Nums :: [integer()]) -> any().\nkth_largest_init_(K, Nums) ->\n  .\n\n-spec kth_largest_add(Val :: integer()) -> integer().\nkth_largest_add(Val) ->\n  .\n\n\n%% Your functions will be called as such:\n%% kth_largest_init_(K, Nums),\n%% Param_1 = kth_largest_add(Val),\n\n%% kth_largest_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule KthLargest do\n  @spec init_(k :: integer, nums :: [integer]) :: any\n  def init_(k, nums) do\n\n  end\n\n  @spec add(val :: integer) :: integer\n  def add(val) do\n\n  end\nend\n\n# Your functions will be called as such:\n# KthLargest.init_(k, nums)\n# param_1 = KthLargest.add(val)\n\n# KthLargest.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:\n\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.\n\n \nExample 1:\n\nInput\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n\n \nConstraints:\n\n1 <= k <= 104\n0 <= nums.length <= 104\n-104 <= nums[i] <= 104\n-104 <= val <= 104\nAt most 104 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"KthLargest\",\"add\",\"add\",\"add\",\"add\",\"add\"]\n[[3,[4,5,8,2]],[3],[5],[10],[9],[4]]"
    ],
    "title": "Kth Largest Element in a Stream",
    "topic_tags": [
      "Tree",
      "Design",
      "Binary Search Tree",
      "Heap (Priority Queue)",
      "Binary Tree",
      "Data Stream"
    ],
    "updated_at": 1695094720,
    "url": "https://leetcode.com/problems/kth-largest-element-in-a-stream/"
  },
  {
    "id": "23",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n \nExample 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\n\nInput: lists = []\nOutput: []\n\nExample 3:\n\nInput: lists = [[]]\nOutput: []\n\n \nConstraints:\n\nk == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 104.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,4,5],[1,3,4],[2,6]]", "[]", "[[]]"],
    "title": "Merge k Sorted Lists",
    "topic_tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "updated_at": 1695018975,
    "url": "https://leetcode.com/problems/merge-k-sorted-lists/"
  },
  {
    "id": "218",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getSkyline(buildings: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function getSkyline($buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> getSkyline(List<List<int>> buildings) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getSkyline(buildings [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef get_skyline(buildings)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\nget_skyline(Buildings) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\n  def get_skyline(buildings) do\n\n  end\nend"
      }
    ],
    "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n \nExample 1:\n\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\nExample 2:\n\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n \nConstraints:\n\n1 <= buildings.length <= 104\n0 <= lefti < righti <= 231 - 1\n1 <= heighti <= 231 - 1\nbuildings is sorted by lefti in non-decreasing order.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
      "[[0,2,3],[2,5,3]]"
    ],
    "title": "The Skyline Problem",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "updated_at": 1695094134,
    "url": "https://leetcode.com/problems/the-skyline-problem/"
  },
  {
    "id": "215",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int findKthLargest(int* nums, int numsSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int FindKthLargest(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findKthLargest(nums: number[], k: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthLargest($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findKthLargest(nums: IntArray, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int findKthLargest(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findKthLargest(nums []int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_largest(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-kth-largest nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_kth_largest(Nums :: [integer()], K :: integer()) -> integer().\nfind_kth_largest(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\n  def find_kth_largest(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\nCan you solve it without sorting?\n \nExample 1:\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\nExample 2:\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n\n \nConstraints:\n\n1 <= k <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,1,5,6,4]\n2", "[3,2,3,1,2,4,5,5,6]\n4"],
    "title": "Kth Largest Element in an Array",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "updated_at": 1695094130,
    "url": "https://leetcode.com/problems/kth-largest-element-in-an-array/"
  },
  {
    "id": "264",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int nthUglyNumber(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int nthUglyNumber(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def nthUglyNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int nthUglyNumber(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int NthUglyNumber(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar nthUglyNumber = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function nthUglyNumber(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function nthUglyNumber($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func nthUglyNumber(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun nthUglyNumber(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int nthUglyNumber(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func nthUglyNumber(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef nth_ugly_number(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def nthUglyNumber(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn nth_ugly_number(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (nth-ugly-number n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec nth_ugly_number(N :: integer()) -> integer().\nnth_ugly_number(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec nth_ugly_number(n :: integer) :: integer\n  def nth_ugly_number(n) do\n\n  end\nend"
      }
    ],
    "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the nth ugly number.\n \nExample 1:\n\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n\nExample 2:\n\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n \nConstraints:\n\n1 <= n <= 1690\n\n",
    "difficulty": "Medium",
    "hints": [
      "The naive approach is to call isUgly for every number until you reach the nth one. Most numbers are not ugly. Try to focus your effort on generating only the ugly ones.",
      "An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number.",
      "The key is how to maintain the order of the ugly numbers. Try a similar approach of merging from three sorted lists: L1, L2, and L3.",
      "Assume you have Uk, the kth ugly number. Then Uk+1 must be Min(L1 * 2, L2 * 3, L3 * 5)."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10", "1"],
    "title": "Ugly Number II",
    "topic_tags": [
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "updated_at": 1695094179,
    "url": "https://leetcode.com/problems/ugly-number-ii/"
  },
  {
    "id": "278",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nclass Solution {\npublic:\n    int firstBadVersion(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      boolean isBadVersion(int version); */\n\npublic class Solution extends VersionControl {\n    public int firstBadVersion(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n\nclass Solution(object):\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# The isBadVersion API is already defined for you.\n# def isBadVersion(version: int) -> bool:\n\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nint firstBadVersion(int n) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      bool IsBadVersion(int version); */\n\npublic class Solution : VersionControl {\n    public int FirstBadVersion(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        \n    };\n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * The knows API is defined in the parent class Relation.\n * isBadVersion(version: number): boolean {\n *     ...\n * };\n */\n\nvar solution = function(isBadVersion: any) {\n\n    return function(n: number): number {\n        \n    };\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      public function isBadVersion($version){} */\n\nclass Solution extends VersionControl {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function firstBadVersion($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * The knows API is defined in the parent class VersionControl.\n *     func isBadVersion(_ version: Int) -> Bool{}\n */\n\nclass Solution : VersionControl {\n    func firstBadVersion(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      fun isBadVersion(version: Int) : Boolean {} */\n\nclass Solution: VersionControl() {\n    override fun firstBadVersion(n: Int) : Int {\n        \n\t}\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/** \n * Forward declaration of isBadVersion API.\n * @param   version   your guess about first bad version\n * @return \t \t      true if current version is bad \n *\t\t\t          false if current version is good\n * func isBadVersion(version int) bool;\n */\n\nfunc firstBadVersion(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# The is_bad_version API is already defined for you.\n# @param {Integer} version\n# @return {boolean} whether the version is bad\n# def is_bad_version(version):\n\n# @param {Integer} n\n# @return {Integer}\ndef first_bad_version(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      def isBadVersion(version: Int): Boolean = {} */\n\nclass Solution extends VersionControl {\n    def firstBadVersion(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// The API isBadVersion is defined for you.\n// isBadVersion(version:i32)-> bool;\n// to call it use self.isBadVersion(version)\n\nimpl Solution {\n    pub fn first_bad_version(&self, n: i32) -> i32 {\n\t\t\n    }\n}"
      }
    ],
    "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n \nExample 1:\n\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n\nExample 2:\n\nInput: n = 1, bad = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= bad <= n <= 231 - 1\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["5\n4", "1\n1"],
    "title": "First Bad Version",
    "topic_tags": ["Binary Search", "Interactive"],
    "updated_at": 1695094186,
    "url": "https://leetcode.com/problems/first-bad-version/"
  },
  {
    "id": "374",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nint guessNumber(int n){\n\t\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution : GuessGame {\n    public int GuessNumber(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n/**\n * @param {number} n\n * @return {number}\n */\nvar guessNumber = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n\nfunction guessNumber(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * public function guess($num){}\n */\n\nclass Solution extends GuessGame {\n    /**\n     * @param  Integer  $n\n     * @return Integer\n     */\n    function guessNumber($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num -> your guess number\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0 \n * func guess(_ num: Int) -> Int \n */\n\nclass Solution : GuessGame {\n    func guessNumber(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * fun guess(num:Int):Int {}\n */\n\nclass Solution:GuessGame() {\n    override fun guessNumber(n:Int):Int {\n        \n    }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * func guess(num int) int;\n */\n\nfunc guessNumber(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num)\n\ndef guessNumber(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * def guess(num: Int): Int = {}\n */\n\nclass Solution extends GuessGame {\n    def guessNumber(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * unsafe fn guess(num: i32) -> i32 {}\n */\n\nimpl Solution {\n    unsafe fn guessNumber(n: i32) -> i32 {\n        \n    }\n}"
      }
    ],
    "description": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\n\nReturn the number that I picked.\n \nExample 1:\n\nInput: n = 10, pick = 6\nOutput: 6\n\nExample 2:\n\nInput: n = 1, pick = 1\nOutput: 1\n\nExample 3:\n\nInput: n = 2, pick = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= n <= 231 - 1\n1 <= pick <= n\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10\n6", "1\n1", "2\n1"],
    "title": "Guess Number Higher or Lower",
    "topic_tags": ["Binary Search", "Interactive"],
    "updated_at": 1695094271,
    "url": "https://leetcode.com/problems/guess-number-higher-or-lower/"
  },
  {
    "id": "173",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    BSTIterator(TreeNode* root) {\n        \n    }\n    \n    int next() {\n        \n    }\n    \n    bool hasNext() {\n        \n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n\n    public BSTIterator(TreeNode root) {\n        \n    }\n    \n    public int next() {\n        \n    }\n    \n    public boolean hasNext() {\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator(object):\n\n    def __init__(self, root):\n        \"\"\"\n        :type root: TreeNode\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        \n\n    def next(self) -> int:\n        \n\n    def hasNext(self) -> bool:\n        \n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n\ntypedef struct {\n    \n} BSTIterator;\n\n\nBSTIterator* bSTIteratorCreate(struct TreeNode* root) {\n    \n}\n\nint bSTIteratorNext(BSTIterator* obj) {\n  \n}\n\nbool bSTIteratorHasNext(BSTIterator* obj) {\n  \n}\n\nvoid bSTIteratorFree(BSTIterator* obj) {\n    \n}\n\n/**\n * Your BSTIterator struct will be instantiated and called as such:\n * BSTIterator* obj = bSTIteratorCreate(root);\n * int param_1 = bSTIteratorNext(obj);\n \n * bool param_2 = bSTIteratorHasNext(obj);\n \n * bSTIteratorFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class BSTIterator {\n\n    public BSTIterator(TreeNode root) {\n        \n    }\n    \n    public int Next() {\n        \n    }\n    \n    public bool HasNext() {\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.Next();\n * bool param_2 = obj.HasNext();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n */\nvar BSTIterator = function(root) {\n    \n};\n\n/**\n * @return {number}\n */\nBSTIterator.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nBSTIterator.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your BSTIterator object will be instantiated and called as such:\n * var obj = new BSTIterator(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nclass BSTIterator {\n    constructor(root: TreeNode | null) {\n\n    }\n\n    next(): number {\n\n    }\n\n    hasNext(): boolean {\n\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * var obj = new BSTIterator(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass BSTIterator {\n    /**\n     * @param TreeNode $root\n     */\n    function __construct($root) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function next() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * $obj = BSTIterator($root);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->hasNext();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\n\nclass BSTIterator {\n\n    init(_ root: TreeNode?) {\n        \n    }\n    \n    func next() -> Int {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * let obj = BSTIterator(root)\n * let ret_1: Int = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass BSTIterator(root: TreeNode?) {\n\n    fun next(): Int {\n        \n    }\n\n    fun hasNext(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * var obj = BSTIterator(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass BSTIterator {\n\n  BSTIterator(TreeNode? root) {\n\n  }\n  \n  int next() {\n\n  }\n  \n  bool hasNext() {\n\n  }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = BSTIterator(root);\n * int param1 = obj.next();\n * bool param2 = obj.hasNext();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\ntype BSTIterator struct {\n    \n}\n\n\nfunc Constructor(root *TreeNode) BSTIterator {\n    \n}\n\n\nfunc (this *BSTIterator) Next() int {\n    \n}\n\n\nfunc (this *BSTIterator) HasNext() bool {\n    \n}\n\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * obj := Constructor(root);\n * param_1 := obj.Next();\n * param_2 := obj.HasNext();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\nclass BSTIterator\n\n=begin\n    :type root: TreeNode\n=end\n    def initialize(root)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def next()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def has_next()\n        \n    end\n\n\nend\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator.new(root)\n# param_1 = obj.next()\n# param_2 = obj.has_next()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nclass BSTIterator(_root: TreeNode) {\n\n    def next(): Int = {\n        \n    }\n\n    def hasNext(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * var obj = new BSTIterator(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nstruct BSTIterator {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl BSTIterator {\n\n    fn new(root: Option<Rc<RefCell<TreeNode>>>) -> Self {\n        \n    }\n    \n    fn next(&self) -> i32 {\n        \n    }\n    \n    fn has_next(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * let obj = BSTIterator::new(root);\n * let ret_1: i32 = obj.next();\n * let ret_2: bool = obj.has_next();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define bst-iterator%\n  (class object%\n    (super-new)\n\n    ; root : (or/c tree-node? #f)\n    (init-field\n      root)\n    \n    ; next : -> exact-integer?\n    (define/public (next)\n\n      )\n    ; has-next : -> boolean?\n    (define/public (has-next)\n\n      )))\n\n;; Your bst-iterator% object will be instantiated and called as such:\n;; (define obj (new bst-iterator% [root root]))\n;; (define param_1 (send obj next))\n;; (define param_2 (send obj has-next))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec bst_iterator_init_(Root :: #tree_node{} | null) -> any().\nbst_iterator_init_(Root) ->\n  .\n\n-spec bst_iterator_next() -> integer().\nbst_iterator_next() ->\n  .\n\n-spec bst_iterator_has_next() -> boolean().\nbst_iterator_has_next() ->\n  .\n\n\n%% Your functions will be called as such:\n%% bst_iterator_init_(Root),\n%% Param_1 = bst_iterator_next(),\n%% Param_2 = bst_iterator_has_next(),\n\n%% bst_iterator_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule BSTIterator do\n  @spec init_(root :: TreeNode.t | nil) :: any\n  def init_(root) do\n\n  end\n\n  @spec next() :: integer\n  def next() do\n\n  end\n\n  @spec has_next() :: boolean\n  def has_next() do\n\n  end\nend\n\n# Your functions will be called as such:\n# BSTIterator.init_(root)\n# param_1 = BSTIterator.next()\n# param_2 = BSTIterator.has_next()\n\n# BSTIterator.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n \nExample 1:\n\n\nInput\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, and next.\n\n \nFollow up:\n\nCould you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"BSTIterator\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\n[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]"
    ],
    "title": "Binary Search Tree Iterator",
    "topic_tags": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "updated_at": 1695043148,
    "url": "https://leetcode.com/problems/binary-search-tree-iterator/"
  },
  {
    "id": "284",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/*\n * Below is the interface for Iterator, which is already defined for you.\n * **DO NOT** modify the interface for Iterator.\n *\n *  class Iterator {\n *\t\tstruct Data;\n * \t\tData* data;\n *  public:\n *\t\tIterator(const vector<int>& nums);\n * \t\tIterator(const Iterator& iter);\n *\n * \t\t// Returns the next element in the iteration.\n *\t\tint next();\n *\n *\t\t// Returns true if the iteration has more elements.\n *\t\tbool hasNext() const;\n *\t};\n */\n\nclass PeekingIterator : public Iterator {\npublic:\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\n\t    // Initialize any member here.\n\t    // **DO NOT** save a copy of nums and manipulate it directly.\n\t    // You should only use the Iterator interface methods.\n\t    \n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tint peek() {\n        \n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\tint next() {\n\t    \n\t}\n\t\n\tbool hasNext() const {\n\t    \n\t}\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\n\nclass PeekingIterator implements Iterator<Integer> {\n\tpublic PeekingIterator(Iterator<Integer> iterator) {\n\t    // initialize any member here.\n\t    \n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tpublic Integer peek() {\n        \n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\t@Override\n\tpublic Integer next() {\n\t    \n\t}\n\t\n\t@Override\n\tpublic boolean hasNext() {\n\t    \n\t}\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator(object):\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator(object):\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val]."
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator:\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val]."
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/*\n *\tstruct Iterator {\n *\t\t// Returns true if the iteration has more elements.\n *\t\tbool (*hasNext)();\n *\n * \t\t// Returns the next element in the iteration.\n *\t\tint (*next)();\n *\t};\n */\n\nstruct PeekingIterator {\n    \n};\n\nstruct PeekingIterator* Constructor(struct Iterator* iter) {\n    struct PeekingIterator* piter = malloc(sizeof(struct PeekingIterator));\n    piter->iterator = iter;\n    piter->hasPeeked = false;\n    return piter;\n}\n\nint peek(struct PeekingIterator* obj) {\n    \n}\n\nint next(struct PeekingIterator* obj) {\n    \n}\n\nbool hasNext(struct PeekingIterator* obj) {\n    \n}\n\n/**\n * Your PeekingIterator struct will be instantiated and called as such:\n * PeekingIterator* obj = peekingIteratorCreate(arr, arrSize);\n * int param_1 = peek(obj);\n * int param_2 = next(obj);\n * bool param_3 = hasNext(obj);\n * peekingIteratorFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "// C# IEnumerator interface reference:\n// https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=netframework-4.8\n\nclass PeekingIterator {\n    // iterators refers to the first element of the array.\n    public PeekingIterator(IEnumerator<int> iterator) {\n        // initialize any member here.\n    }\n    \n    // Returns the next element in the iteration without advancing the iterator.\n    public int Peek() {\n        \n    }\n    \n    // Returns the next element in the iteration and advances the iterator.\n    public int Next() {\n        \n    }\n    \n    // Returns false if the iterator is refering to the end of the array of true otherwise.\n    public bool HasNext() {\n\t\t\n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * // This is the Iterator's API interface.\n * // You should not implement it, or speculate about its implementation.\n * function Iterator() {\n *    @ return {number}\n *    this.next = function() { // return the next number of the iterator\n *       ...\n *    }; \n *\n *    @return {boolean}\n *    this.hasNext = function() { // return true if it still has numbers\n *       ...\n *    };\n * };\n */\n\n/**\n * @param {Iterator} iterator\n */\nvar PeekingIterator = function(iterator) {\n    \n};\n\n/**\n * @return {number}\n */\nPeekingIterator.prototype.peek = function() {\n    \n};\n\n/**\n * @return {number}\n */\nPeekingIterator.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nPeekingIterator.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(arr)\n * var param_1 = obj.peek()\n * var param_2 = obj.next()\n * var param_3 = obj.hasNext()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * // This is the Iterator's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Iterator {\n *      hasNext(): boolean {}\n *\n *      next(): number {}\n * }\n */\n\nclass PeekingIterator {\n    constructor(iterator: Iterator) {\n\n    }\n\n    peek(): number {\n\n    }\n\n    next(): number {\n\n    }\n\n    hasNext(): boolean {\n\n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(iterator)\n * var param_1 = obj.peek()\n * var param_2 = obj.next()\n * var param_3 = obj.hasNext()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "// PHP ArrayIterator reference:\n// https://www.php.net/arrayiterator\n\nclass PeekingIterator {\n    /**\n     * @param ArrayIterator $arr\n     */\n    function __construct($arr) {\n        \n    }\n    \n    /**\n     * @return Integer\n     */\n    function next() {\n        \n    }\n    \n    /**\n     * @return Integer\n     */\n    function peek() {\n        \n    }\n    \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * $obj = PeekingIterator($arr);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->peek();\n * $ret_3 = $obj->hasNext();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "// Swift IndexingIterator refernence:\n// https://developer.apple.com/documentation/swift/indexingiterator\n\nclass PeekingIterator {\n    init(_ arr: IndexingIterator<Array<Int>>) {\n        \n    }\n    \n    func next() -> Int {\n        \n    }\n    \n    func peek() -> Int {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * let obj = PeekingIterator(arr)\n * let ret_1: Int = obj.next()\n * let ret_2: Int = obj.peek()\n * let ret_3: Bool = obj.hasNext()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "// Kotlin Iterator reference:\n// https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterator/\n\nclass PeekingIterator(iterator:Iterator<Int>):Iterator<Int> {\n    fun peek(): Int {\n    \t\n    }\n    \n    override fun next(): Int {\n        \n    }\n    \n    override fun hasNext(): Boolean {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = PeekingIterator(arr)\n * var param_1 = obj.next()\n * var param_2 = obj.peek()\n * var param_3 = obj.hasNext()\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/*   Below is the interface for Iterator, which is already defined for you.\n *\n *   type Iterator struct {\n *       \n *   }\n *\n *   func (this *Iterator) hasNext() bool {\n *\t\t// Returns true if the iteration has more elements.\n *   }\n *\n *   func (this *Iterator) next() int {\n *\t\t// Returns the next element in the iteration.\n *   }\n */\n\ntype PeekingIterator struct {\n    \n}\n\nfunc Constructor(iter *Iterator) *PeekingIterator {\n    \n}\n\nfunc (this *PeekingIterator) hasNext() bool {\n    \n}\n\nfunc (this *PeekingIterator) next() int {\n    \n}\n\nfunc (this *PeekingIterator) peek() int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator\n# \tdef initialize(v)\n#   \n#   end\n#\n#   def hasNext()\n#\t\tReturns true if the iteration has more elements.\n#   end\n#\n#   def next()\n#   \tReturns the next element in the iteration.\n#   end\n# end\n\nclass PeekingIterator\n    # @param {Iterator} iter\n    def initialize(iter)\n    \t\n    end\n    \n    # Returns true if the iteration has more elements.\n    # @return {boolean}\n    def hasNext()\n    \t\n    end\n    \n    # Returns the next element in the iteration.\n    # @return {integer}\n    def next()\n    \t\n    end\n    \n    # Returns the next element in the iteration without advancing the iterator.\n    # @return {integer}\n    def peek()\n    \t\n    end\nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "// Scala Iterator reference:\n// https://www.scala-lang.org/api/2.12.2/scala/collection/Iterator.html\n\nclass PeekingIterator(_iterator: Iterator[Int]) {\n    def peek(): Int = {\n        \n    }\n    \n    def next(): Int = {\n        \n    }\n    \n    def hasNext(): Boolean = {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(arr)\n * var param_1 = obj.next()\n * var param_2 = obj.peek()\n * var param_3 = obj.hasNext()\n */"
      }
    ],
    "description": "Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\nImplement the PeekingIterator class:\n\nPeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\nint next() Returns the next element in the array and moves the pointer to the next element.\nboolean hasNext() Returns true if there are still elements in the array.\nint peek() Returns the next element in the array without moving the pointer.\n\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\n \nExample 1:\n\nInput\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 2, 2, 3, false]\n\nExplanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\nAll the calls to next and peek are valid.\nAt most 1000 calls will be made to next, hasNext, and peek.\n\n \nFollow up: How would you extend your design to be generic and work with all types, not just integer?",
    "difficulty": "Medium",
    "hints": [
      "Think of \"looking ahead\". You want to cache the next element.",
      "Is one variable sufficient? Why or why not?",
      "Test your design with call order of peek() before next() vs next() before peek().",
      "For a clean implementation, check out Google's guava library source code."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"PeekingIterator\",\"next\",\"peek\",\"next\",\"next\",\"hasNext\"]\n[[[1,2,3]],[],[],[],[],[]]"
    ],
    "title": "Peeking Iterator",
    "topic_tags": ["Array", "Design", "Iterator"],
    "updated_at": 1695094192,
    "url": "https://leetcode.com/problems/peeking-iterator/"
  },
  {
    "id": "218",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getSkyline(buildings: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function getSkyline($buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> getSkyline(List<List<int>> buildings) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getSkyline(buildings [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef get_skyline(buildings)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\nget_skyline(Buildings) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\n  def get_skyline(buildings) do\n\n  end\nend"
      }
    ],
    "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n \nExample 1:\n\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\nExample 2:\n\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n \nConstraints:\n\n1 <= buildings.length <= 104\n0 <= lefti < righti <= 231 - 1\n1 <= heighti <= 231 - 1\nbuildings is sorted by lefti in non-decreasing order.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
      "[[0,2,3],[2,5,3]]"
    ],
    "title": "The Skyline Problem",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "updated_at": 1695094134,
    "url": "https://leetcode.com/problems/the-skyline-problem/"
  },
  {
    "id": "391",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isRectangleCover(int[][] rectangles) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isRectangleCover(int** rectangles, int rectanglesSize, int* rectanglesColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsRectangleCover(int[][] rectangles) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\nvar isRectangleCover = function(rectangles) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isRectangleCover(rectangles: number[][]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Boolean\n     */\n    function isRectangleCover($rectangles) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isRectangleCover(_ rectangles: [[Int]]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isRectangleCover(rectangles: Array<IntArray>): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isRectangleCover(List<List<int>> rectangles) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isRectangleCover(rectangles [][]int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} rectangles\n# @return {Boolean}\ndef is_rectangle_cover(rectangles)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isRectangleCover(rectangles: Array[Array[Int]]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_rectangle_cover(rectangles: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-rectangle-cover rectangles)\n  (-> (listof (listof exact-integer?)) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_rectangle_cover(Rectangles :: [[integer()]]) -> boolean().\nis_rectangle_cover(Rectangles) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_rectangle_cover(rectangles :: [[integer]]) :: boolean\n  def is_rectangle_cover(rectangles) do\n\n  end\nend"
      }
    ],
    "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.\n \nExample 1:\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.\n\nExample 2:\n\n\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.\n\nExample 3:\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.\n\n \nConstraints:\n\n1 <= rectangles.length <= 2 * 104\nrectangles[i].length == 4\n-105 <= xi, yi, ai, bi <= 105\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
      "[[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
      "[[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]"
    ],
    "title": "Perfect Rectangle",
    "topic_tags": ["Array", "Line Sweep"],
    "updated_at": 1695094295,
    "url": "https://leetcode.com/problems/perfect-rectangle/"
  },
  {
    "id": "21",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(list1, list2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $list1\n     * @param ListNode $list2\n     * @return ListNode\n     */\n    function mergeTwoLists($list1, $list2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeTwoLists(ListNode? list1, ListNode? list2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} list1\n# @param {ListNode} list2\n# @return {ListNode}\ndef merge_two_lists(list1, list2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-two-lists list1 list2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_two_lists(List1 :: #list_node{} | null, List2 :: #list_node{} | null) -> #list_node{} | null.\nmerge_two_lists(List1, List2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_two_lists(list1 :: ListNode.t | nil, list2 :: ListNode.t | nil) :: ListNode.t | nil\n  def merge_two_lists(list1, list2) do\n\n  end\nend"
      }
    ],
    "description": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n \nExample 1:\n\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n \nConstraints:\n\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,4]\n[1,3,4]", "[]\n[]", "[]\n[0]"],
    "title": "Merge Two Sorted Lists",
    "topic_tags": ["Linked List", "Recursion"],
    "updated_at": 1695018974,
    "url": "https://leetcode.com/problems/merge-two-sorted-lists/"
  },
  {
    "id": "83",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* deleteDuplicates(struct ListNode* head){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? deleteDuplicates(ListNode? head) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (delete-duplicates head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\ndelete_duplicates(Head) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\n  def delete_duplicates(head) do\n\n  end\nend"
      }
    ],
    "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n \nExample 1:\n\n\nInput: head = [1,1,2]\nOutput: [1,2]\n\nExample 2:\n\n\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 300].\n-100 <= Node.val <= 100\nThe list is guaranteed to be sorted in ascending order.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,2]", "[1,1,2,3,3]"],
    "title": "Remove Duplicates from Sorted List",
    "topic_tags": ["Linked List"],
    "updated_at": 1695019438,
    "url": "https://leetcode.com/problems/remove-duplicates-from-sorted-list/"
  },
  {
    "id": "23",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n \nExample 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\n\nInput: lists = []\nOutput: []\n\nExample 3:\n\nInput: lists = [[]]\nOutput: []\n\n \nConstraints:\n\nk == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 104.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,4,5],[1,3,4],[2,6]]", "[]", "[[]]"],
    "title": "Merge k Sorted Lists",
    "topic_tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "updated_at": 1695018975,
    "url": "https://leetcode.com/problems/merge-k-sorted-lists/"
  },
  {
    "id": "25",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseKGroup(struct ListNode* head, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseKGroup(ListNode head, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function(head, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseKGroup(head: ListNode | null, k: number): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function reverseKGroup($head, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseKGroup(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseKGroup(head: ListNode?, k: Int): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseKGroup(ListNode? head, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef reverse_k_group(head, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_k_group(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-k-group head k)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_k_group(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\nreverse_k_group(Head, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_k_group(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\n  def reverse_k_group(head, k) do\n\n  end\nend"
      }
    ],
    "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n \nExample 1:\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n \nConstraints:\n\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n\n \nFollow-up: Can you solve the problem in O(1) extra memory space?\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4,5]\n2", "[1,2,3,4,5]\n3"],
    "title": "Reverse Nodes in k-Group",
    "topic_tags": ["Linked List", "Recursion"],
    "updated_at": 1695018977,
    "url": "https://leetcode.com/problems/reverse-nodes-in-k-group/"
  },
  {
    "id": "2",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (add-two-numbers l1 l2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\nadd_two_numbers(L1, L2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\n  def add_two_numbers(l1, l2) do\n\n  end\nend"
      }
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n \nExample 1:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n \nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[2,4,3]\n[5,6,4]",
      "[0]\n[0]",
      "[9,9,9,9,9,9,9]\n[9,9,9,9]"
    ],
    "title": "Add Two Numbers",
    "topic_tags": ["Linked List", "Math", "Recursion"],
    "updated_at": 1695017040,
    "url": "https://leetcode.com/problems/add-two-numbers/"
  },
  {
    "id": "19",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RemoveNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $n\n     * @return ListNode\n     */\n    function removeNthFromEnd($head, $n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeNthFromEnd(head: ListNode?, n: Int): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? removeNthFromEnd(ListNode? head, int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_nth_from_end(head: Option<Box<ListNode>>, n: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (remove-nth-from-end head n)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec remove_nth_from_end(Head :: #list_node{} | null, N :: integer()) -> #list_node{} | null.\nremove_nth_from_end(Head, N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec remove_nth_from_end(head :: ListNode.t | nil, n :: integer) :: ListNode.t | nil\n  def remove_nth_from_end(head, n) do\n\n  end\nend"
      }
    ],
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\n \nExample 1:\n\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz\n\n \nFollow up: Could you do this in one pass?\n",
    "difficulty": "Medium",
    "hints": ["Maintain two pointers and update one with a delay of n steps."],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4,5]\n2", "[1]\n1", "[1,2]\n1"],
    "title": "Remove Nth Node From End of List",
    "topic_tags": ["Linked List", "Two Pointers"],
    "updated_at": 1695017110,
    "url": "https://leetcode.com/problems/remove-nth-node-from-end-of-list/"
  },
  {
    "id": "9",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isPalindrome(int x){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isPalindrome(x: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isPalindrome(int x) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isPalindrome(x int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.\n \nExample 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n\nExample 2:\n\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\nExample 3:\n\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n \nConstraints:\n\n-231 <= x <= 231 - 1\n\n \nFollow up: Could you solve it without converting the integer to a string?",
    "difficulty": "Easy",
    "hints": ["Beware of overflow when you reverse the integer."],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["121", "-121", "10"],
    "title": "Palindrome Number",
    "topic_tags": ["Math"],
    "updated_at": 1695017050,
    "url": "https://leetcode.com/problems/palindrome-number/"
  },
  {
    "id": "13",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int romanToInt(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function romanToInt(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int romanToInt(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func romanToInt(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n\n  end\nend"
      }
    ],
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n \nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\nExample 3:\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n \nConstraints:\n\n1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\n\n",
    "difficulty": "Easy",
    "hints": [
      "Problem is simpler to solve by working the string from back to front and using a map."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"III\"", "\"LVIII\"", "\"MCMXCIV\""],
    "title": "Roman to Integer",
    "topic_tags": ["Hash Table", "Math", "String"],
    "updated_at": 1695017102,
    "url": "https://leetcode.com/problems/roman-to-integer/"
  },
  {
    "id": "60",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string getPermutation(int n, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String getPermutation(int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * getPermutation(int n, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string GetPermutation(int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getPermutation = function(n, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getPermutation(n: number, k: number): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getPermutation($n, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getPermutation(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getPermutation(n: Int, k: Int): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String getPermutation(int n, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getPermutation(n int, k int) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_permutation(n, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getPermutation(n: Int, k: Int): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_permutation(n: i32, k: i32) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (get-permutation n k)\n  (-> exact-integer? exact-integer? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_permutation(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nget_permutation(N, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_permutation(n :: integer, k :: integer) :: String.t\n  def get_permutation(n, k) do\n\n  end\nend"
      }
    ],
    "description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n\nGiven n and k, return the kth permutation sequence.\n \nExample 1:\nInput: n = 3, k = 3\nOutput: \"213\"\nExample 2:\nInput: n = 4, k = 9\nOutput: \"2314\"\nExample 3:\nInput: n = 3, k = 1\nOutput: \"123\"\n\n \nConstraints:\n\n1 <= n <= 9\n1 <= k <= n!\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3\n3", "4\n9", "3\n1"],
    "title": "Permutation Sequence",
    "topic_tags": ["Math", "Recursion"],
    "updated_at": 1695019002,
    "url": "https://leetcode.com/problems/permutation-sequence/"
  },
  {
    "id": "149",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxPoints(vector<vector<int>>& points) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxPoints(int[][] points) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxPoints(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxPoints(int** points, int pointsSize, int* pointsColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxPoints(int[][] points) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxPoints(points: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxPoints($points) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxPoints(_ points: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxPoints(points: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxPoints(List<List<int>> points) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxPoints(points [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef max_points(points)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxPoints(points: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_points(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-points points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_points(Points :: [[integer()]]) -> integer().\nmax_points(Points) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_points(points :: [[integer]]) :: integer\n  def max_points(points) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n \nExample 1:\n\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\nExample 2:\n\n\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\n \nConstraints:\n\n1 <= points.length <= 300\npoints[i].length == 2\n-104 <= xi, yi <= 104\nAll the points are unique.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[1,1],[2,2],[3,3]]",
      "[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]"
    ],
    "title": "Max Points on a Line",
    "topic_tags": ["Array", "Hash Table", "Math", "Geometry"],
    "updated_at": 1695019656,
    "url": "https://leetcode.com/problems/max-points-on-a-line/"
  },
  {
    "id": "2",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (add-two-numbers l1 l2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\nadd_two_numbers(L1, L2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\n  def add_two_numbers(l1, l2) do\n\n  end\nend"
      }
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n \nExample 1:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n \nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[2,4,3]\n[5,6,4]",
      "[0]\n[0]",
      "[9,9,9,9,9,9,9]\n[9,9,9,9]"
    ],
    "title": "Add Two Numbers",
    "topic_tags": ["Linked List", "Math", "Recursion"],
    "updated_at": 1695017040,
    "url": "https://leetcode.com/problems/add-two-numbers/"
  },
  {
    "id": "7",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int reverse(int x) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int reverse(int x) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reverse(self, x: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int reverse(int x){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Reverse(int x) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function reverse(x: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun reverse(x: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int reverse(int x) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func reverse(x int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"
      }
    ],
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n \nExample 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21\n\n \nConstraints:\n\n-231 <= x <= 231 - 1\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["123", "-123", "120"],
    "title": "Reverse Integer",
    "topic_tags": ["Math"],
    "updated_at": 1695017047,
    "url": "https://leetcode.com/problems/reverse-integer/"
  },
  {
    "id": "463",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int islandPerimeter(int[][] grid) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int islandPerimeter(int** grid, int gridSize, int* gridColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int IslandPerimeter(int[][] grid) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar islandPerimeter = function(grid) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function islandPerimeter(grid: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function islandPerimeter($grid) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func islandPerimeter(_ grid: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun islandPerimeter(grid: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int islandPerimeter(List<List<int>> grid) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func islandPerimeter(grid [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef island_perimeter(grid)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def islandPerimeter(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn island_perimeter(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (island-perimeter grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec island_perimeter(Grid :: [[integer()]]) -> integer().\nisland_perimeter(Grid) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec island_perimeter(grid :: [[integer]]) :: integer\n  def island_perimeter(grid) do\n\n  end\nend"
      }
    ],
    "description": "You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n \nExample 1:\n\n\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.\n\nExample 2:\n\nInput: grid = [[1]]\nOutput: 4\n\nExample 3:\n\nInput: grid = [[1,0]]\nOutput: 4\n\n \nConstraints:\n\nrow == grid.length\ncol == grid[i].length\n1 <= row, col <= 100\ngrid[i][j] is 0 or 1.\nThere is exactly one island in grid.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
      "[[1]]",
      "[[1,0]]"
    ],
    "title": "Island Perimeter",
    "topic_tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "updated_at": 1695094383,
    "url": "https://leetcode.com/problems/island-perimeter/"
  },
  {
    "id": "566",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[][] matrixReshape(int[][] mat, int r, int c) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def matrixReshape(self, mat, r, c):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** matrixReshape(int** mat, int matSize, int* matColSize, int r, int c, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[][] MatrixReshape(int[][] mat, int r, int c) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} mat\n * @param {number} r\n * @param {number} c\n * @return {number[][]}\n */\nvar matrixReshape = function(mat, r, c) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function matrixReshape(mat: number[][], r: number, c: number): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $r\n     * @param Integer $c\n     * @return Integer[][]\n     */\n    function matrixReshape($mat, $r, $c) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func matrixReshape(_ mat: [[Int]], _ r: Int, _ c: Int) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun matrixReshape(mat: Array<IntArray>, r: Int, c: Int): Array<IntArray> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> matrixReshape(List<List<int>> mat, int r, int c) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func matrixReshape(mat [][]int, r int, c int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} mat\n# @param {Integer} r\n# @param {Integer} c\n# @return {Integer[][]}\ndef matrix_reshape(mat, r, c)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def matrixReshape(mat: Array[Array[Int]], r: Int, c: Int): Array[Array[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn matrix_reshape(mat: Vec<Vec<i32>>, r: i32, c: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (matrix-reshape mat r c)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec matrix_reshape(Mat :: [[integer()]], R :: integer(), C :: integer()) -> [[integer()]].\nmatrix_reshape(Mat, R, C) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec matrix_reshape(mat :: [[integer]], r :: integer, c :: integer) :: [[integer]]\n  def matrix_reshape(mat, r, c) do\n\n  end\nend"
      }
    ],
    "description": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n \nExample 1:\n\n\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]]\n\nExample 2:\n\n\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\nOutput: [[1,2],[3,4]]\n\n \nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\n-1000 <= mat[i][j] <= 1000\n1 <= r, c <= 300\n\n",
    "difficulty": "Easy",
    "hints": [
      "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
      "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
      "Try to use division and modulus to convert 1-d index into 2-d indices.",
      "M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,2],[3,4]]\n1\n4", "[[1,2],[3,4]]\n2\n4"],
    "title": "Reshape the Matrix",
    "topic_tags": ["Array", "Matrix", "Simulation"],
    "updated_at": 1695094494,
    "url": "https://leetcode.com/problems/reshape-the-matrix/"
  },
  {
    "id": "37",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void solveSudoku(char** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void solveSudoku(List<List<String>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func solveSudoku(board [][]byte)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (solve-sudoku board)\n  (-> (listof (listof char?)) void?)\n\n  )"
      }
    ],
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n \nExample 1:\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n\n\n \nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
    ],
    "title": "Sudoku Solver",
    "topic_tags": ["Array", "Hash Table", "Backtracking", "Matrix"],
    "updated_at": 1695018985,
    "url": "https://leetcode.com/problems/sudoku-solver/"
  },
  {
    "id": "85",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaximalRectangle(char[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalRectangle = function(matrix) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maximalRectangle(matrix: string[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalRectangle($matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maximalRectangle(_ matrix: [[Character]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maximalRectangle(matrix: Array<CharArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maximalRectangle(List<List<String>> matrix) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maximalRectangle(matrix [][]byte) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_rectangle(matrix)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn maximal_rectangle(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (maximal-rectangle matrix)\n  (-> (listof (listof char?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec maximal_rectangle(Matrix :: [[char()]]) -> integer().\nmaximal_rectangle(Matrix) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec maximal_rectangle(matrix :: [[char]]) :: integer\n  def maximal_rectangle(matrix) do\n\n  end\nend"
      }
    ],
    "description": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n \nExample 1:\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n\nExample 2:\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\nExample 3:\n\nInput: matrix = [[\"1\"]]\nOutput: 1\n\n \nConstraints:\n\nrows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
      "[[\"0\"]]",
      "[[\"1\"]]"
    ],
    "title": "Maximal Rectangle",
    "topic_tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Matrix",
      "Monotonic Stack"
    ],
    "updated_at": 1695019440,
    "url": "https://leetcode.com/problems/maximal-rectangle/"
  },
  {
    "id": "36",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isValidSudoku(char** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsValidSudoku(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isValidSudoku(board: string[][]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Boolean\n     */\n    function isValidSudoku($board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isValidSudoku(board: Array<CharArray>): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isValidSudoku(List<List<String>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isValidSudoku(board [][]byte) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @return {Boolean}\ndef is_valid_sudoku(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-valid-sudoku board)\n  (-> (listof (listof char?)) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_valid_sudoku(Board :: [[char()]]) -> boolean().\nis_valid_sudoku(Board) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_valid_sudoku(board :: [[char]]) :: boolean\n  def is_valid_sudoku(board) do\n\n  end\nend"
      }
    ],
    "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nNote:\n\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned rules.\n\n \nExample 1:\n\n\nInput: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n\nExample 2:\n\nInput: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n\n \nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit 1-9 or '.'.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
      "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
    ],
    "title": "Valid Sudoku",
    "topic_tags": ["Array", "Hash Table", "Matrix"],
    "updated_at": 1695018985,
    "url": "https://leetcode.com/problems/valid-sudoku/"
  },
  {
    "id": "48",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void rotate(int** matrix, int matrixSize, int* matrixColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void Rotate(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction rotate(matrix: number[][]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void rotate(List<List<int>> matrix) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func rotate(matrix [][]int)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef rotate(matrix)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (rotate matrix)\n  (-> (listof (listof exact-integer?)) void?)\n\n  )"
      }
    ],
    "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n \nExample 1:\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nExample 2:\n\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n \nConstraints:\n\nn == matrix.length == matrix[i].length\n1 <= n <= 20\n-1000 <= matrix[i][j] <= 1000\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[1,2,3],[4,5,6],[7,8,9]]",
      "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]"
    ],
    "title": "Rotate Image",
    "topic_tags": ["Array", "Math", "Matrix"],
    "updated_at": 1695018993,
    "url": "https://leetcode.com/problems/rotate-image/"
  },
  {
    "id": "70",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int climbStairs(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function climbStairs(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int climbStairs(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func climbStairs(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n\n  end\nend"
      }
    ],
    "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n \nExample 1:\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n \nConstraints:\n\n1 <= n <= 45\n\n",
    "difficulty": "Easy",
    "hints": [
      "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["2", "3"],
    "title": "Climbing Stairs",
    "topic_tags": ["Math", "Dynamic Programming", "Memoization"],
    "updated_at": 1695019010,
    "url": "https://leetcode.com/problems/climbing-stairs/"
  },
  {
    "id": "140",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** wordBreak(char * s, char ** wordDict, int wordDictSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function wordBreak(s: string, wordDict: string[]): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return String[]\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> wordBreak(String s, List<String> wordDict) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func wordBreak(s string, wordDict []string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} word_dict\n# @return {String[]}\ndef word_break(s, word_dict)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (word-break s wordDict)\n  (-> string? (listof string?) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nword_break(S, WordDict) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: [String.t]\n  def word_break(s, word_dict) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n \nExample 1:\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\nExample 2:\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n \nConstraints:\n\n1 <= s.length <= 20\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 10\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\nInput is generated in a way that the length of the answer doesn't exceed 105.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
      "\"pineapplepenapple\"\n[\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
      "\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
    ],
    "title": "Word Break II",
    "topic_tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Trie",
      "Memoization"
    ],
    "updated_at": 1695019649,
    "url": "https://leetcode.com/problems/word-break-ii/"
  },
  {
    "id": "329",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestIncreasingPath(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestIncreasingPath(matrix: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function longestIncreasingPath($matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestIncreasingPath(matrix: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestIncreasingPath(List<List<int>> matrix) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestIncreasingPath(matrix [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef longest_increasing_path(matrix)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_increasing_path(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-increasing-path matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_increasing_path(Matrix :: [[integer()]]) -> integer().\nlongest_increasing_path(Matrix) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_increasing_path(matrix :: [[integer]]) :: integer\n  def longest_increasing_path(matrix) do\n\n  end\nend"
      }
    ],
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n \nExample 1:\n\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n\nExample 2:\n\n\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\nExample 3:\n\nInput: matrix = [[1]]\nOutput: 1\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 231 - 1\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[9,9,4],[6,6,8],[2,1,1]]",
      "[[3,4,5],[3,2,6],[2,2,1]]",
      "[[1]]"
    ],
    "title": "Longest Increasing Path in a Matrix",
    "topic_tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "updated_at": 1695094232,
    "url": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix/"
  },
  {
    "id": "139",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool wordBreak(char * s, char ** wordDict, int wordDictSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function wordBreak(s: string, wordDict: string[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return Boolean\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool wordBreak(String s, List<String> wordDict) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func wordBreak(s string, wordDict []string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} word_dict\n# @return {Boolean}\ndef word_break(s, word_dict)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (word-break s wordDict)\n  (-> string? (listof string?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> boolean().\nword_break(S, WordDict) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\n  def word_break(s, word_dict) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n \nExample 1:\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\nExample 2:\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n \nConstraints:\n\n1 <= s.length <= 300\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 20\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"leetcode\"\n[\"leet\",\"code\"]",
      "\"applepenapple\"\n[\"apple\",\"pen\"]",
      "\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
    ],
    "title": "Word Break",
    "topic_tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie",
      "Memoization"
    ],
    "updated_at": 1695019649,
    "url": "https://leetcode.com/problems/word-break/"
  },
  {
    "id": "241",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> diffWaysToCompute(string expression) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> diffWaysToCompute(String expression) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def diffWaysToCompute(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def diffWaysToCompute(self, expression: str) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diffWaysToCompute(char * expression, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> DiffWaysToCompute(string expression) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} expression\n * @return {number[]}\n */\nvar diffWaysToCompute = function(expression) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function diffWaysToCompute(expression: string): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $expression\n     * @return Integer[]\n     */\n    function diffWaysToCompute($expression) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func diffWaysToCompute(_ expression: String) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun diffWaysToCompute(expression: String): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> diffWaysToCompute(String expression) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func diffWaysToCompute(expression string) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} expression\n# @return {Integer[]}\ndef diff_ways_to_compute(expression)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def diffWaysToCompute(expression: String): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn diff_ways_to_compute(expression: String) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (diff-ways-to-compute expression)\n  (-> string? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec diff_ways_to_compute(Expression :: unicode:unicode_binary()) -> [integer()].\ndiff_ways_to_compute(Expression) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec diff_ways_to_compute(expression :: String.t) :: [integer]\n  def diff_ways_to_compute(expression) do\n\n  end\nend"
      }
    ],
    "description": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n \nExample 1:\n\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n\nExample 2:\n\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n\n \nConstraints:\n\n1 <= expression.length <= 20\nexpression consists of digits and the operator '+', '-', and '*'.\nAll the integer values in the input expression are in the range [0, 99].\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"2-1-1\"", "\"2*3-4*5\""],
    "title": "Different Ways to Add Parentheses",
    "topic_tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "updated_at": 1695094169,
    "url": "https://leetcode.com/problems/different-ways-to-add-parentheses/"
  },
  {
    "id": "23",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n \nExample 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\n\nInput: lists = []\nOutput: []\n\nExample 3:\n\nInput: lists = [[]]\nOutput: []\n\n \nConstraints:\n\nk == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 104.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,4,5],[1,3,4],[2,6]]", "[]", "[[]]"],
    "title": "Merge k Sorted Lists",
    "topic_tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "updated_at": 1695018975,
    "url": "https://leetcode.com/problems/merge-k-sorted-lists/"
  },
  {
    "id": "315",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countSmaller(int* nums, int numsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> CountSmaller(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar countSmaller = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function countSmaller(nums: number[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function countSmaller($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func countSmaller(_ nums: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun countSmaller(nums: IntArray): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> countSmaller(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func countSmaller(nums []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef count_smaller(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def countSmaller(nums: Array[Int]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn count_smaller(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (count-smaller nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec count_smaller(Nums :: [integer()]) -> [integer()].\ncount_smaller(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec count_smaller(nums :: [integer]) :: [integer]\n  def count_smaller(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n \nExample 1:\n\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n\nExample 2:\n\nInput: nums = [-1]\nOutput: [0]\n\nExample 3:\n\nInput: nums = [-1,-1]\nOutput: [0,0]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[5,2,6,1]", "[-1]", "[-1,-1]"],
    "title": "Count of Smaller Numbers After Self",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "updated_at": 1695094217,
    "url": "https://leetcode.com/problems/count-of-smaller-numbers-after-self/"
  },
  {
    "id": "148",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* sortList(struct ListNode* head){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode SortList(ListNode head) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function(head) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction sortList(head: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function sortList($head) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func sortList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun sortList(head: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? sortList(ListNode? head) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc sortList(head *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef sort_list(head)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def sortList(head: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn sort_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (sort-list head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec sort_list(Head :: #list_node{} | null) -> #list_node{} | null.\nsort_list(Head) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec sort_list(head :: ListNode.t | nil) :: ListNode.t | nil\n  def sort_list(head) do\n\n  end\nend"
      }
    ],
    "description": "Given the head of a linked list, return the list after sorting it in ascending order.\n \nExample 1:\n\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExample 3:\n\nInput: head = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 5 * 104].\n-105 <= Node.val <= 105\n\n \nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[4,2,1,3]", "[-1,5,3,4,0]", "[]"],
    "title": "Sort List",
    "topic_tags": [
      "Linked List",
      "Two Pointers",
      "Divide and Conquer",
      "Sorting",
      "Merge Sort"
    ],
    "updated_at": 1695019656,
    "url": "https://leetcode.com/problems/sort-list/"
  },
  {
    "id": "239",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] MaxSlidingWindow(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSlidingWindow(nums: number[], k: number): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSlidingWindow($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSlidingWindow(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> maxSlidingWindow(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSlidingWindow(nums []int, k int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_sliding_window(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-sliding-window nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_sliding_window(Nums :: [integer()], K :: integer()) -> [integer()].\nmax_sliding_window(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_sliding_window(nums :: [integer], k :: integer) :: [integer]\n  def max_sliding_window(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\n \nExample 1:\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\nExample 2:\n\nInput: nums = [1], k = 1\nOutput: [1]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n1 <= k <= nums.length\n\n",
    "difficulty": "Hard",
    "hints": [
      "How about using a data structure such as deque (double-ended queue)?",
      "The queue size need not be the same as the window’s size.",
      "Remove redundant elements and the queue should store only elements that need to be considered."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3,-1,-3,5,3,6,7]\n3", "[1]\n1"],
    "title": "Sliding Window Maximum",
    "topic_tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "updated_at": 1695094166,
    "url": "https://leetcode.com/problems/sliding-window-maximum/"
  },
  {
    "id": "496",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def nextGreaterElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* nextGreaterElement(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] NextGreaterElement(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar nextGreaterElement = function(nums1, nums2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function nextGreaterElement(nums1: number[], nums2: number[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function nextGreaterElement($nums1, $nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func nextGreaterElement(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun nextGreaterElement(nums1: IntArray, nums2: IntArray): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> nextGreaterElement(List<int> nums1, List<int> nums2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func nextGreaterElement(nums1 []int, nums2 []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef next_greater_element(nums1, nums2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def nextGreaterElement(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn next_greater_element(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (next-greater-element nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec next_greater_element(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\nnext_greater_element(Nums1, Nums2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec next_greater_element(nums1 :: [integer], nums2 :: [integer]) :: [integer]\n  def next_greater_element(nums1, nums2) do\n\n  end\nend"
      }
    ],
    "description": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n \nExample 1:\n\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n\nExample 2:\n\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n\n \nConstraints:\n\n1 <= nums1.length <= nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 104\nAll integers in nums1 and nums2 are unique.\nAll the integers of nums1 also appear in nums2.\n\n \nFollow up: Could you find an O(nums1.length + nums2.length) solution?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[4,1,2]\n[1,3,4,2]", "[2,4]\n[1,2,3,4]"],
    "title": "Next Greater Element I",
    "topic_tags": ["Array", "Hash Table", "Stack", "Monotonic Stack"],
    "updated_at": 1695094423,
    "url": "https://leetcode.com/problems/next-greater-element-i/"
  },
  {
    "id": "42",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int trap(int* height, int heightSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function trap(height: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int trap(List<int> height) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func trap(height []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n\n  end\nend"
      }
    ],
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n \nExample 1:\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n \nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[0,1,0,2,1,0,1,3,2,1,2,1]", "[4,2,0,3,2,5]"],
    "title": "Trapping Rain Water",
    "topic_tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "updated_at": 1695018988,
    "url": "https://leetcode.com/problems/trapping-rain-water/"
  },
  {
    "id": "84",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int largestRectangleArea(int* heights, int heightsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function largestRectangleArea(heights: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int largestRectangleArea(List<int> heights) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func largestRectangleArea(heights []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (largest-rectangle-area heights)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\nlargest_rectangle_area(Heights) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\n  def largest_rectangle_area(heights) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n \nExample 1:\n\n\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n\nExample 2:\n\n\nInput: heights = [2,4]\nOutput: 4\n\n \nConstraints:\n\n1 <= heights.length <= 105\n0 <= heights[i] <= 104\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[2,1,5,6,2,3]", "[2,4]"],
    "title": "Largest Rectangle in Histogram",
    "topic_tags": ["Array", "Stack", "Monotonic Stack"],
    "updated_at": 1695019439,
    "url": "https://leetcode.com/problems/largest-rectangle-in-histogram/"
  },
  {
    "id": "316",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string removeDuplicateLetters(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String removeDuplicateLetters(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def removeDuplicateLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * removeDuplicateLetters(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string RemoveDuplicateLetters(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicateLetters = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function removeDuplicateLetters(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function removeDuplicateLetters($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func removeDuplicateLetters(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun removeDuplicateLetters(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String removeDuplicateLetters(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func removeDuplicateLetters(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef remove_duplicate_letters(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def removeDuplicateLetters(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn remove_duplicate_letters(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (remove-duplicate-letters s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec remove_duplicate_letters(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nremove_duplicate_letters(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec remove_duplicate_letters(s :: String.t) :: String.t\n  def remove_duplicate_letters(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n \nExample 1:\n\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\n\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of lowercase English letters.\n\n \nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n",
    "difficulty": "Medium",
    "hints": [
      "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"bcabc\"", "\"cbacdcbc\""],
    "title": "Remove Duplicate Letters",
    "topic_tags": ["String", "Stack", "Greedy", "Monotonic Stack"],
    "updated_at": 1695094218,
    "url": "https://leetcode.com/problems/remove-duplicate-letters/"
  },
  {
    "id": "402",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String removeKdigits(String num, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def removeKdigits(self, num, k):\n        \"\"\"\n        :type num: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * removeKdigits(char * num, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string RemoveKdigits(string num, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} num\n * @param {number} k\n * @return {string}\n */\nvar removeKdigits = function(num, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function removeKdigits(num: string, k: number): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @param Integer $k\n     * @return String\n     */\n    function removeKdigits($num, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func removeKdigits(_ num: String, _ k: Int) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun removeKdigits(num: String, k: Int): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String removeKdigits(String num, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func removeKdigits(num string, k int) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} num\n# @param {Integer} k\n# @return {String}\ndef remove_kdigits(num, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def removeKdigits(num: String, k: Int): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn remove_kdigits(num: String, k: i32) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (remove-kdigits num k)\n  (-> string? exact-integer? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec remove_kdigits(Num :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nremove_kdigits(Num, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec remove_kdigits(num :: String.t, k :: integer) :: String.t\n  def remove_kdigits(num, k) do\n\n  end\nend"
      }
    ],
    "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n \nExample 1:\n\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\nExample 2:\n\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\nExample 3:\n\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n\n \nConstraints:\n\n1 <= k <= num.length <= 105\nnum consists of only digits.\nnum does not have any leading zeros except for the zero itself.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"1432219\"\n3", "\"10200\"\n1", "\"10\"\n2"],
    "title": "Remove K Digits",
    "topic_tags": ["String", "Stack", "Greedy", "Monotonic Stack"],
    "updated_at": 1695094311,
    "url": "https://leetcode.com/problems/remove-k-digits/"
  },
  {
    "id": "258",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int addDigits(int num) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int addDigits(int num) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def addDigits(self, num: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int addDigits(int num){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int AddDigits(int num) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function addDigits(num: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function addDigits($num) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func addDigits(_ num: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun addDigits(num: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int addDigits(int num) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func addDigits(num int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num\n# @return {Integer}\ndef add_digits(num)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def addDigits(num: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn add_digits(num: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (add-digits num)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec add_digits(Num :: integer()) -> integer().\nadd_digits(Num) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec add_digits(num :: integer) :: integer\n  def add_digits(num) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n \nExample 1:\n\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.\n\nExample 2:\n\nInput: num = 0\nOutput: 0\n\n \nConstraints:\n\n0 <= num <= 231 - 1\n\n \nFollow up: Could you do it without any loop/recursion in O(1) runtime?\n",
    "difficulty": "Easy",
    "hints": [
      "A naive implementation of the above process is trivial. Could you come up with other methods?",
      "What are all the possible results?",
      "How do they occur, periodically or randomly?",
      "You may find this Wikipedia article useful."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["38", "0"],
    "title": "Add Digits",
    "topic_tags": ["Math", "Simulation", "Number Theory"],
    "updated_at": 1695094173,
    "url": "https://leetcode.com/problems/add-digits/"
  },
  {
    "id": "204",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int countPrimes(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int countPrimes(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int countPrimes(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int CountPrimes(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function countPrimes(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countPrimes($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func countPrimes(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun countPrimes(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int countPrimes(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func countPrimes(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef count_primes(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def countPrimes(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn count_primes(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (count-primes n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec count_primes(N :: integer()) -> integer().\ncount_primes(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec count_primes(n :: integer) :: integer\n  def count_primes(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.\n \nExample 1:\n\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\nExample 2:\n\nInput: n = 0\nOutput: 0\n\nExample 3:\n\nInput: n = 1\nOutput: 0\n\n \nConstraints:\n\n0 <= n <= 5 * 106\n\n",
    "difficulty": "Medium",
    "hints": [
      "Checking all the integers in the range [1, n - 1] is not efficient. Think about a better approach.",
      "Since most of the numbers are not primes, we need a fast approach to exclude the non-prime integers.",
      "Use Sieve of Eratosthenes."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["10", "0", "1"],
    "title": "Count Primes",
    "topic_tags": ["Array", "Math", "Enumeration", "Number Theory"],
    "updated_at": 1695094115,
    "url": "https://leetcode.com/problems/count-primes/"
  },
  {
    "id": "218",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getSkyline(buildings: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function getSkyline($buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> getSkyline(List<List<int>> buildings) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getSkyline(buildings [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef get_skyline(buildings)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\nget_skyline(Buildings) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\n  def get_skyline(buildings) do\n\n  end\nend"
      }
    ],
    "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n \nExample 1:\n\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\nExample 2:\n\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n \nConstraints:\n\n1 <= buildings.length <= 104\n0 <= lefti < righti <= 231 - 1\n1 <= heighti <= 231 - 1\nbuildings is sorted by lefti in non-decreasing order.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
      "[[0,2,3],[2,5,3]]"
    ],
    "title": "The Skyline Problem",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "updated_at": 1695094134,
    "url": "https://leetcode.com/problems/the-skyline-problem/"
  },
  {
    "id": "220",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff, int valueDiff) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool containsNearbyAlmostDuplicate(int* nums, int numsSize, int indexDiff, int valueDiff){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool ContainsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} indexDiff\n * @param {number} valueDiff\n * @return {boolean}\n */\nvar containsNearbyAlmostDuplicate = function(nums, indexDiff, valueDiff) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function containsNearbyAlmostDuplicate(nums: number[], indexDiff: number, valueDiff: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $indexDiff\n     * @param Integer $valueDiff\n     * @return Boolean\n     */\n    function containsNearbyAlmostDuplicate($nums, $indexDiff, $valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func containsNearbyAlmostDuplicate(_ nums: [Int], _ indexDiff: Int, _ valueDiff: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun containsNearbyAlmostDuplicate(nums: IntArray, indexDiff: Int, valueDiff: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool containsNearbyAlmostDuplicate(List<int> nums, int indexDiff, int valueDiff) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func containsNearbyAlmostDuplicate(nums []int, indexDiff int, valueDiff int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} index_diff\n# @param {Integer} value_diff\n# @return {Boolean}\ndef contains_nearby_almost_duplicate(nums, index_diff, value_diff)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def containsNearbyAlmostDuplicate(nums: Array[Int], indexDiff: Int, valueDiff: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn contains_nearby_almost_duplicate(nums: Vec<i32>, index_diff: i32, value_diff: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (contains-nearby-almost-duplicate nums indexDiff valueDiff)\n  (-> (listof exact-integer?) exact-integer? exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec contains_nearby_almost_duplicate(Nums :: [integer()], IndexDiff :: integer(), ValueDiff :: integer()) -> boolean().\ncontains_nearby_almost_duplicate(Nums, IndexDiff, ValueDiff) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec contains_nearby_almost_duplicate(nums :: [integer], index_diff :: integer, value_diff :: integer) :: boolean\n  def contains_nearby_almost_duplicate(nums, index_diff, value_diff) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n\ni != j,\nabs(i - j) <= indexDiff.\nabs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n \nExample 1:\n\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n\nExample 2:\n\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n \nConstraints:\n\n2 <= nums.length <= 105\n-109 <= nums[i] <= 109\n1 <= indexDiff <= nums.length\n0 <= valueDiff <= 109\n\n",
    "difficulty": "Hard",
    "hints": [
      "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
      "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,1]\n3\n0", "[1,5,9,1,5,9]\n2\n3"],
    "title": "Contains Duplicate III",
    "topic_tags": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "updated_at": 1695094137,
    "url": "https://leetcode.com/problems/contains-duplicate-iii/"
  },
  {
    "id": "456",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool find132pattern(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean find132pattern(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def find132pattern(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool find132pattern(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool Find132pattern(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar find132pattern = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function find132pattern(nums: number[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function find132pattern($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func find132pattern(_ nums: [Int]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun find132pattern(nums: IntArray): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool find132pattern(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func find132pattern(nums []int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef find132pattern(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def find132pattern(nums: Array[Int]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find132pattern(nums: Vec<i32>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find132pattern nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find132pattern(Nums :: [integer()]) -> boolean().\nfind132pattern(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find132pattern(nums :: [integer]) :: boolean\n  def find132pattern(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\nReturn true if there is a 132 pattern in nums, otherwise, return false.\n \nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: false\nExplanation: There is no 132 pattern in the sequence.\n\nExample 2:\n\nInput: nums = [3,1,4,2]\nOutput: true\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].\n\nExample 3:\n\nInput: nums = [-1,3,2,0]\nOutput: true\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 2 * 105\n-109 <= nums[i] <= 109\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4]", "[3,1,4,2]", "[-1,3,2,0]"],
    "title": "132 Pattern",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Stack",
      "Monotonic Stack",
      "Ordered Set"
    ],
    "updated_at": 1695094373,
    "url": "https://leetcode.com/problems/132-pattern/"
  },
  {
    "id": "729",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyCalendar {\npublic:\n    MyCalendar() {\n        \n    }\n    \n    bool book(int start, int end) {\n        \n    }\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar* obj = new MyCalendar();\n * bool param_1 = obj->book(start,end);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public boolean book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(start,end);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyCalendar(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyCalendar:\n\n    def __init__(self):\n        \n\n    def book(self, start: int, end: int) -> bool:\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyCalendar;\n\n\nMyCalendar* myCalendarCreate() {\n    \n}\n\nbool myCalendarBook(MyCalendar* obj, int start, int end) {\n  \n}\n\nvoid myCalendarFree(MyCalendar* obj) {\n    \n}\n\n/**\n * Your MyCalendar struct will be instantiated and called as such:\n * MyCalendar* obj = myCalendarCreate();\n * bool param_1 = myCalendarBook(obj, start, end);\n \n * myCalendarFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public bool Book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.Book(start,end);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MyCalendar = function() {\n    \n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(start, end) {\n    \n};\n\n/** \n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MyCalendar {\n    constructor() {\n\n    }\n\n    book(start: number, end: number): boolean {\n\n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyCalendar {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Boolean\n     */\n    function book($start, $end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * $obj = MyCalendar();\n * $ret_1 = $obj->book($start, $end);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyCalendar {\n\n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar()\n * let ret_1: Bool = obj.book(start, end)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyCalendar() {\n\n    fun book(start: Int, end: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = MyCalendar()\n * var param_1 = obj.book(start,end)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MyCalendar {\n\n  MyCalendar() {\n\n  }\n  \n  bool book(int start, int end) {\n\n  }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = MyCalendar();\n * bool param1 = obj.book(start,end);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyCalendar struct {\n    \n}\n\n\nfunc Constructor() MyCalendar {\n    \n}\n\n\nfunc (this *MyCalendar) Book(start int, end int) bool {\n    \n}\n\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyCalendar\n    def initialize()\n        \n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n        \n    end\n\n\nend\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyCalendar() {\n\n    def book(start: Int, end: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyCalendar {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCalendar {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar::new();\n * let ret_1: bool = obj.book(start, end);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define my-calendar%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; book : exact-integer? exact-integer? -> boolean?\n    (define/public (book start end)\n\n      )))\n\n;; Your my-calendar% object will be instantiated and called as such:\n;; (define obj (new my-calendar%))\n;; (define param_1 (send obj book start end))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_calendar_init_() -> any().\nmy_calendar_init_() ->\n  .\n\n-spec my_calendar_book(Start :: integer(), End :: integer()) -> boolean().\nmy_calendar_book(Start, End) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_calendar_init_(),\n%% Param_1 = my_calendar_book(Start, End),\n\n%% my_calendar_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MyCalendar do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec book(start :: integer, end :: integer) :: boolean\n  def book(start, end) do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyCalendar.init_()\n# param_1 = MyCalendar.book(start, end)\n\n# MyCalendar.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\nImplement the MyCalendar class:\n\nMyCalendar() Initializes the calendar object.\nboolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\n\n \nExample 1:\n\nInput\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]\nOutput\n[null, true, false, true]\n\nExplanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.\n \nConstraints:\n\n0 <= start < end <= 109\nAt most 1000 calls will be made to book.\n\n",
    "difficulty": "Medium",
    "hints": [
      "Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MyCalendar\",\"book\",\"book\",\"book\"]\n[[],[10,20],[15,25],[20,30]]"
    ],
    "title": "My Calendar I",
    "topic_tags": ["Binary Search", "Design", "Segment Tree", "Ordered Set"],
    "updated_at": 1695094654,
    "url": "https://leetcode.com/problems/my-calendar-i/"
  },
  {
    "id": "303",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n        \n    }\n    \n    int sumRange(int left, int right) {\n        \n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * int param_1 = obj->sumRange(left,right);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public int sumRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.sumRange(left,right);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def sumRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} NumArray;\n\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n\nint numArraySumRange(NumArray* obj, int left, int right) {\n  \n}\n\nvoid numArrayFree(NumArray* obj) {\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * int param_1 = numArraySumRange(obj, left, right);\n \n * numArrayFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public int SumRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.SumRange(left,right);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {number}\n */\nNumArray.prototype.sumRange = function(left, right) {\n    \n};\n\n/** \n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class NumArray {\n    constructor(nums: number[]) {\n\n    }\n\n    sumRange(left: number, right: number): number {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class NumArray {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function sumRange($left, $right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * $obj = NumArray($nums);\n * $ret_1 = $obj->sumRange($left, $right);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func sumRange(_ left: Int, _ right: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * let ret_1: Int = obj.sumRange(left, right)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class NumArray(nums: IntArray) {\n\n    fun sumRange(left: Int, right: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = NumArray(nums)\n * var param_1 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class NumArray {\n\n  NumArray(List<int> nums) {\n\n  }\n  \n  int sumRange(int left, int right) {\n\n  }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = NumArray(nums);\n * int param1 = obj.sumRange(left,right);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type NumArray struct {\n    \n}\n\n\nfunc Constructor(nums []int) NumArray {\n    \n}\n\n\nfunc (this *NumArray) SumRange(left int, right int) int {\n    \n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.SumRange(left,right);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class NumArray\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Integer\n=end\n    def sum_range(left, right)\n        \n    end\n\n\nend\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray.new(nums)\n# param_1 = obj.sum_range(left, right)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class NumArray(_nums: Array[Int]) {\n\n    def sumRange(left: Int, right: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct NumArray {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumArray {\n\n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn sum_range(&self, left: i32, right: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray::new(nums);\n * let ret_1: i32 = obj.sum_range(left, right);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define num-array%\n  (class object%\n    (super-new)\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      nums)\n    \n    ; sum-range : exact-integer? exact-integer? -> exact-integer?\n    (define/public (sum-range left right)\n\n      )))\n\n;; Your num-array% object will be instantiated and called as such:\n;; (define obj (new num-array% [nums nums]))\n;; (define param_1 (send obj sum-range left right))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec num_array_init_(Nums :: [integer()]) -> any().\nnum_array_init_(Nums) ->\n  .\n\n-spec num_array_sum_range(Left :: integer(), Right :: integer()) -> integer().\nnum_array_sum_range(Left, Right) ->\n  .\n\n\n%% Your functions will be called as such:\n%% num_array_init_(Nums),\n%% Param_1 = num_array_sum_range(Left, Right),\n\n%% num_array_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule NumArray do\n  @spec init_(nums :: [integer]) :: any\n  def init_(nums) do\n\n  end\n\n  @spec sum_range(left :: integer, right :: integer) :: integer\n  def sum_range(left, right) do\n\n  end\nend\n\n# Your functions will be called as such:\n# NumArray.init_(nums)\n# param_1 = NumArray.sum_range(left, right)\n\n# NumArray.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Given an integer array nums, handle multiple queries of the following type:\n\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-105 <= nums[i] <= 105\n0 <= left <= right < nums.length\nAt most 104 calls will be made to sumRange.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]\n[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]"
    ],
    "title": "Range Sum Query - Immutable",
    "topic_tags": ["Array", "Design", "Prefix Sum"],
    "updated_at": 1695094207,
    "url": "https://leetcode.com/problems/range-sum-query-immutable/"
  },
  {
    "id": "724",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int pivotIndex(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int pivotIndex(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int PivotIndex(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pivotIndex = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function pivotIndex(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function pivotIndex($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func pivotIndex(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun pivotIndex(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int pivotIndex(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func pivotIndex(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef pivot_index(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def pivotIndex(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn pivot_index(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (pivot-index nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec pivot_index(Nums :: [integer()]) -> integer().\npivot_index(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec pivot_index(nums :: [integer]) :: integer\n  def pivot_index(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of integers nums, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\nReturn the leftmost pivot index. If no such index exists, return -1.\n \nExample 1:\n\nInput: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.\nExample 3:\n\nInput: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-1000 <= nums[i] <= 1000\n\n \nNote: This question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/\n",
    "difficulty": "Easy",
    "hints": [
      "Create an array sumLeft where sumLeft[i] is the sum of all the numbers to the left of index i.",
      "Create an array sumRight where sumRight[i] is the sum of all the numbers to the right of index i.",
      "For each index i, check if sumLeft[i] equals sumRight[i] return i. If no i found, return -1."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,7,3,6,5,6]", "[1,2,3]", "[2,1,-1]"],
    "title": "Find Pivot Index",
    "topic_tags": ["Array", "Prefix Sum"],
    "updated_at": 1695094648,
    "url": "https://leetcode.com/problems/find-pivot-index/"
  },
  {
    "id": "363",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxSumSubmatrix(int** matrix, int matrixSize, int* matrixColSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxSumSubmatrix(int[][] matrix, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar maxSumSubmatrix = function(matrix, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSumSubmatrix(matrix: number[][], k: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSumSubmatrix($matrix, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSumSubmatrix(_ matrix: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSumSubmatrix(matrix: Array<IntArray>, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxSumSubmatrix(List<List<int>> matrix, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSumSubmatrix(matrix [][]int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} matrix\n# @param {Integer} k\n# @return {Integer}\ndef max_sum_submatrix(matrix, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSumSubmatrix(matrix: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_sum_submatrix(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-sum-submatrix matrix k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_sum_submatrix(Matrix :: [[integer()]], K :: integer()) -> integer().\nmax_sum_submatrix(Matrix, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_sum_submatrix(matrix :: [[integer]], k :: integer) :: integer\n  def max_sum_submatrix(matrix, k) do\n\n  end\nend"
      }
    ],
    "description": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.\n \nExample 1:\n\n\nInput: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n\nExample 2:\n\nInput: matrix = [[2,2,-1]], k = 3\nOutput: 3\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-100 <= matrix[i][j] <= 100\n-105 <= k <= 105\n\n \nFollow up: What if the number of rows is much larger than the number of columns?\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,0,1],[0,-2,3]]\n2", "[[2,2,-1]]\n3"],
    "title": "Max Sum of Rectangle No Larger Than K",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Matrix",
      "Prefix Sum",
      "Ordered Set"
    ],
    "updated_at": 1695094262,
    "url": "https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/"
  },
  {
    "id": "410",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int splitArray(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int splitArray(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int splitArray(int* nums, int numsSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int SplitArray(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar splitArray = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function splitArray(nums: number[], k: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function splitArray($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func splitArray(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun splitArray(nums: IntArray, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int splitArray(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func splitArray(nums []int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef split_array(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def splitArray(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn split_array(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (split-array nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec split_array(Nums :: [integer()], K :: integer()) -> integer().\nsplit_array(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec split_array(nums :: [integer], k :: integer) :: integer\n  def split_array(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\nReturn the minimized largest sum of the split.\nA subarray is a contiguous part of the array.\n \nExample 1:\n\nInput: nums = [7,2,5,10,8], k = 2\nOutput: 18\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5], k = 2\nOutput: 9\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n0 <= nums[i] <= 106\n1 <= k <= min(50, nums.length)\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[7,2,5,10,8]\n2", "[1,2,3,4,5]\n2"],
    "title": "Split Array Largest Sum",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "updated_at": 1695094321,
    "url": "https://leetcode.com/problems/split-array-largest-sum/"
  },
  {
    "id": "209",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minSubArrayLen(self, target, nums):\n        \"\"\"\n        :type target: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int minSubArrayLen(int target, int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MinSubArrayLen(int target, int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(target, nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minSubArrayLen(target: number, nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minSubArrayLen($target, $nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minSubArrayLen(_ target: Int, _ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minSubArrayLen(target: Int, nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minSubArrayLen(int target, List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minSubArrayLen(target int, nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} target\n# @param {Integer[]} nums\n# @return {Integer}\ndef min_sub_array_len(target, nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minSubArrayLen(target: Int, nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_sub_array_len(target: i32, nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-sub-array-len target nums)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_sub_array_len(Target :: integer(), Nums :: [integer()]) -> integer().\nmin_sub_array_len(Target, Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_sub_array_len(target :: integer, nums :: [integer]) :: integer\n  def min_sub_array_len(target, nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n \nExample 1:\n\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n\nExample 2:\n\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n\nExample 3:\n\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n\n \nConstraints:\n\n1 <= target <= 109\n1 <= nums.length <= 105\n1 <= nums[i] <= 104\n\n \nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["7\n[2,3,1,2,4,3]", "4\n[1,4,4]", "11\n[1,1,1,1,1,1,1,1]"],
    "title": "Minimum Size Subarray Sum",
    "topic_tags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"],
    "updated_at": 1695094122,
    "url": "https://leetcode.com/problems/minimum-size-subarray-sum/"
  },
  {
    "id": "238",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* productExceptSelf(int* nums, int numsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] ProductExceptSelf(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function productExceptSelf(nums: number[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun productExceptSelf(nums: IntArray): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> productExceptSelf(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func productExceptSelf(nums []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (product-except-self nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec product_except_self(Nums :: [integer()]) -> [integer()].\nproduct_except_self(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec product_except_self(nums :: [integer]) :: [integer]\n  def product_except_self(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n \nExample 1:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\nExample 2:\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n\n \nConstraints:\n\n2 <= nums.length <= 105\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\n \nFollow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4]", "[-1,1,0,-3,3]"],
    "title": "Product of Array Except Self",
    "topic_tags": ["Array", "Prefix Sum"],
    "updated_at": 1695094165,
    "url": "https://leetcode.com/problems/product-of-array-except-self/"
  },
  {
    "id": "826",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double soupServings(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double soupServings(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def soupServings(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def soupServings(self, n: int) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double soupServings(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double SoupServings(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar soupServings = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function soupServings(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Float\n     */\n    function soupServings($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func soupServings(_ n: Int) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun soupServings(n: Int): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double soupServings(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func soupServings(n int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Float}\ndef soup_servings(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def soupServings(n: Int): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn soup_servings(n: i32) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (soup-servings n)\n  (-> exact-integer? flonum?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec soup_servings(N :: integer()) -> float().\nsoup_servings(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec soup_servings(n :: integer) :: float\n  def soup_servings(n) do\n\n  end\nend"
      }
    ],
    "description": "There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:\n\nServe 100 ml of soup A and 0 ml of soup B,\nServe 75 ml of soup A and 25 ml of soup B,\nServe 50 ml of soup A and 50 ml of soup B, and\nServe 25 ml of soup A and 75 ml of soup B.\n\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\nNote that we do not have an operation where all 100 ml's of soup B are used first.\nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\nInput: n = 50\nOutput: 0.62500\nExplanation: If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n\nExample 2:\n\nInput: n = 100\nOutput: 0.71875\n\n \nConstraints:\n\n0 <= n <= 109\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["50", "100"],
    "title": "Soup Servings",
    "topic_tags": ["Math", "Dynamic Programming", "Probability and Statistics"],
    "updated_at": 1695094773,
    "url": "https://leetcode.com/problems/soup-servings/"
  },
  {
    "id": "225",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyStack {\npublic:\n    MyStack() {\n        \n    }\n    \n    void push(int x) {\n        \n    }\n    \n    int pop() {\n        \n    }\n    \n    int top() {\n        \n    }\n    \n    bool empty() {\n        \n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyStack {\n\n    public MyStack() {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n    \n    public int top() {\n        \n    }\n    \n    public boolean empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyStack:\n\n    def __init__(self):\n        \n\n    def push(self, x: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n    def top(self) -> int:\n        \n\n    def empty(self) -> bool:\n        \n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyStack;\n\n\nMyStack* myStackCreate() {\n    \n}\n\nvoid myStackPush(MyStack* obj, int x) {\n  \n}\n\nint myStackPop(MyStack* obj) {\n  \n}\n\nint myStackTop(MyStack* obj) {\n  \n}\n\nbool myStackEmpty(MyStack* obj) {\n  \n}\n\nvoid myStackFree(MyStack* obj) {\n    \n}\n\n/**\n * Your MyStack struct will be instantiated and called as such:\n * MyStack* obj = myStackCreate();\n * myStackPush(obj, x);\n \n * int param_2 = myStackPop(obj);\n \n * int param_3 = myStackTop(obj);\n \n * bool param_4 = myStackEmpty(obj);\n \n * myStackFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyStack {\n\n    public MyStack() {\n        \n    }\n    \n    public void Push(int x) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n    \n    public int Top() {\n        \n    }\n    \n    public bool Empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Top();\n * bool param_4 = obj.Empty();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MyStack = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyStack.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.top = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyStack.prototype.empty = function() {\n    \n};\n\n/** \n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MyStack {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n\n    top(): number {\n\n    }\n\n    empty(): boolean {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function top() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * $obj = MyStack();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->top();\n * $ret_4 = $obj->empty();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyStack {\n\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n    \n    func top() -> Int {\n        \n    }\n    \n    func empty() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * let obj = MyStack()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.top()\n * let ret_4: Bool = obj.empty()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyStack() {\n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n    fun top(): Int {\n        \n    }\n\n    fun empty(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MyStack {\n\n  MyStack() {\n\n  }\n  \n  void push(int x) {\n\n  }\n  \n  int pop() {\n\n  }\n  \n  int top() {\n\n  }\n  \n  bool empty() {\n\n  }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = MyStack();\n * obj.push(x);\n * int param2 = obj.pop();\n * int param3 = obj.top();\n * bool param4 = obj.empty();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyStack struct {\n    \n}\n\n\nfunc Constructor() MyStack {\n    \n}\n\n\nfunc (this *MyStack) Push(x int)  {\n    \n}\n\n\nfunc (this *MyStack) Pop() int {\n    \n}\n\n\nfunc (this *MyStack) Top() int {\n    \n}\n\n\nfunc (this *MyStack) Empty() bool {\n    \n}\n\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.Empty();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyStack\n    def initialize()\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def top()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def empty()\n        \n    end\n\n\nend\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyStack() {\n\n    def push(x: Int) {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def top(): Int = {\n        \n    }\n\n    def empty(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyStack {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n    \n    fn top(&self) -> i32 {\n        \n    }\n    \n    fn empty(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * let obj = MyStack::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.top();\n * let ret_4: bool = obj.empty();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define my-stack%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push x)\n\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n\n      )\n    ; top : -> exact-integer?\n    (define/public (top)\n\n      )\n    ; empty : -> boolean?\n    (define/public (empty)\n\n      )))\n\n;; Your my-stack% object will be instantiated and called as such:\n;; (define obj (new my-stack%))\n;; (send obj push x)\n;; (define param_2 (send obj pop))\n;; (define param_3 (send obj top))\n;; (define param_4 (send obj empty))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_stack_init_() -> any().\nmy_stack_init_() ->\n  .\n\n-spec my_stack_push(X :: integer()) -> any().\nmy_stack_push(X) ->\n  .\n\n-spec my_stack_pop() -> integer().\nmy_stack_pop() ->\n  .\n\n-spec my_stack_top() -> integer().\nmy_stack_top() ->\n  .\n\n-spec my_stack_empty() -> boolean().\nmy_stack_empty() ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_stack_init_(),\n%% my_stack_push(X),\n%% Param_2 = my_stack_pop(),\n%% Param_3 = my_stack_top(),\n%% Param_4 = my_stack_empty(),\n\n%% my_stack_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MyStack do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec push(x :: integer) :: any\n  def push(x) do\n\n  end\n\n  @spec pop() :: integer\n  def pop() do\n\n  end\n\n  @spec top() :: integer\n  def top() do\n\n  end\n\n  @spec empty() :: boolean\n  def empty() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyStack.init_()\n# MyStack.push(x)\n# param_2 = MyStack.pop()\n# param_3 = MyStack.top()\n# param_4 = MyStack.empty()\n\n# MyStack.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\n\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n \nExample 1:\n\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n \nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.\n\n \nFollow-up: Can you implement the stack using only one queue?\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]"
    ],
    "title": "Implement Stack using Queues",
    "topic_tags": ["Stack", "Design", "Queue"],
    "updated_at": 1695094145,
    "url": "https://leetcode.com/problems/implement-stack-using-queues/"
  },
  {
    "id": "232",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyQueue {\npublic:\n    MyQueue() {\n        \n    }\n    \n    void push(int x) {\n        \n    }\n    \n    int pop() {\n        \n    }\n    \n    int peek() {\n        \n    }\n    \n    bool empty() {\n        \n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyQueue {\n\n    public MyQueue() {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n    \n    public int peek() {\n        \n    }\n    \n    public boolean empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyQueue(object):\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def peek(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyQueue:\n\n    def __init__(self):\n        \n\n    def push(self, x: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n    def peek(self) -> int:\n        \n\n    def empty(self) -> bool:\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyQueue;\n\n\nMyQueue* myQueueCreate() {\n    \n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n  \n}\n\nint myQueuePop(MyQueue* obj) {\n  \n}\n\nint myQueuePeek(MyQueue* obj) {\n  \n}\n\nbool myQueueEmpty(MyQueue* obj) {\n  \n}\n\nvoid myQueueFree(MyQueue* obj) {\n    \n}\n\n/**\n * Your MyQueue struct will be instantiated and called as such:\n * MyQueue* obj = myQueueCreate();\n * myQueuePush(obj, x);\n \n * int param_2 = myQueuePop(obj);\n \n * int param_3 = myQueuePeek(obj);\n \n * bool param_4 = myQueueEmpty(obj);\n \n * myQueueFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyQueue {\n\n    public MyQueue() {\n        \n    }\n    \n    public void Push(int x) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n    \n    public int Peek() {\n        \n    }\n    \n    public bool Empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Peek();\n * bool param_4 = obj.Empty();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MyQueue = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    \n};\n\n/** \n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MyQueue {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n\n    peek(): number {\n\n    }\n\n    empty(): boolean {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyQueue {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function peek() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * $obj = MyQueue();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->peek();\n * $ret_4 = $obj->empty();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyQueue {\n\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n    \n    func peek() -> Int {\n        \n    }\n    \n    func empty() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.peek()\n * let ret_4: Bool = obj.empty()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyQueue() {\n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n    fun peek(): Int {\n        \n    }\n\n    fun empty(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MyQueue {\n\n  MyQueue() {\n\n  }\n  \n  void push(int x) {\n\n  }\n  \n  int pop() {\n\n  }\n  \n  int peek() {\n\n  }\n  \n  bool empty() {\n\n  }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = MyQueue();\n * obj.push(x);\n * int param2 = obj.pop();\n * int param3 = obj.peek();\n * bool param4 = obj.empty();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyQueue struct {\n    \n}\n\n\nfunc Constructor() MyQueue {\n    \n}\n\n\nfunc (this *MyQueue) Push(x int)  {\n    \n}\n\n\nfunc (this *MyQueue) Pop() int {\n    \n}\n\n\nfunc (this *MyQueue) Peek() int {\n    \n}\n\n\nfunc (this *MyQueue) Empty() bool {\n    \n}\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Peek();\n * param_4 := obj.Empty();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyQueue\n    def initialize()\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def peek()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def empty()\n        \n    end\n\n\nend\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyQueue() {\n\n    def push(x: Int) {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def peek(): Int = {\n        \n    }\n\n    def empty(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyQueue {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n    \n    fn peek(&self) -> i32 {\n        \n    }\n    \n    fn empty(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.peek();\n * let ret_4: bool = obj.empty();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define my-queue%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push x)\n\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n\n      )\n    ; peek : -> exact-integer?\n    (define/public (peek)\n\n      )\n    ; empty : -> boolean?\n    (define/public (empty)\n\n      )))\n\n;; Your my-queue% object will be instantiated and called as such:\n;; (define obj (new my-queue%))\n;; (send obj push x)\n;; (define param_2 (send obj pop))\n;; (define param_3 (send obj peek))\n;; (define param_4 (send obj empty))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec my_queue_init_() -> any().\nmy_queue_init_() ->\n  .\n\n-spec my_queue_push(X :: integer()) -> any().\nmy_queue_push(X) ->\n  .\n\n-spec my_queue_pop() -> integer().\nmy_queue_pop() ->\n  .\n\n-spec my_queue_peek() -> integer().\nmy_queue_peek() ->\n  .\n\n-spec my_queue_empty() -> boolean().\nmy_queue_empty() ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_queue_init_(),\n%% my_queue_push(X),\n%% Param_2 = my_queue_pop(),\n%% Param_3 = my_queue_peek(),\n%% Param_4 = my_queue_empty(),\n\n%% my_queue_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MyQueue do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec push(x :: integer) :: any\n  def push(x) do\n\n  end\n\n  @spec pop() :: integer\n  def pop() do\n\n  end\n\n  @spec peek() :: integer\n  def peek() do\n\n  end\n\n  @spec empty() :: boolean\n  def empty() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyQueue.init_()\n# MyQueue.push(x)\n# param_2 = MyQueue.pop()\n# param_3 = MyQueue.peek()\n# param_4 = MyQueue.empty()\n\n# MyQueue.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:\n\nvoid push(int x) Pushes element x to the back of the queue.\nint pop() Removes the element from the front of the queue and returns it.\nint peek() Returns the element at the front of the queue.\nboolean empty() Returns true if the queue is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n \nExample 1:\n\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\n \nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, peek, and empty.\nAll the calls to pop and peek are valid.\n\n \nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]"
    ],
    "title": "Implement Queue using Stacks",
    "topic_tags": ["Stack", "Design", "Queue"],
    "updated_at": 1695094156,
    "url": "https://leetcode.com/problems/implement-queue-using-stacks/"
  },
  {
    "id": "239",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] MaxSlidingWindow(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSlidingWindow(nums: number[], k: number): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSlidingWindow($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSlidingWindow(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> maxSlidingWindow(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSlidingWindow(nums []int, k int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_sliding_window(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-sliding-window nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_sliding_window(Nums :: [integer()], K :: integer()) -> [integer()].\nmax_sliding_window(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_sliding_window(nums :: [integer], k :: integer) :: [integer]\n  def max_sliding_window(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\n \nExample 1:\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\nExample 2:\n\nInput: nums = [1], k = 1\nOutput: [1]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n1 <= k <= nums.length\n\n",
    "difficulty": "Hard",
    "hints": [
      "How about using a data structure such as deque (double-ended queue)?",
      "The queue size need not be the same as the window’s size.",
      "Remove redundant elements and the queue should store only elements that need to be considered."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,3,-1,-3,5,3,6,7]\n3", "[1]\n1"],
    "title": "Sliding Window Maximum",
    "topic_tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "updated_at": 1695094166,
    "url": "https://leetcode.com/problems/sliding-window-maximum/"
  },
  {
    "id": "341",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    NestedIterator(vector<NestedInteger> &nestedList) {\n        \n    }\n    \n    int next() {\n        \n    }\n    \n    bool hasNext() {\n        \n    }\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return empty list if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\npublic class NestedIterator implements Iterator<Integer> {\n\n    public NestedIterator(List<NestedInteger> nestedList) {\n        \n    }\n\n    @Override\n    public Integer next() {\n        \n    }\n\n    @Override\n    public boolean hasNext() {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i = new NestedIterator(nestedList);\n * while (i.hasNext()) v[f()] = i.next();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        \n    \n    def next(self) -> int:\n        \n    \n    def hasNext(self) -> bool:\n         \n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * *********************************************************************\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger *);\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger *);\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\n *\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * int NestedIntegerGetListSize(struct NestedInteger *);\n * };\n */\nstruct NestedIterator {\n    \n};\n\nstruct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {\n    \n}\n\nbool nestedIterHasNext(struct NestedIterator *iter) {\n    \n}\n\nint nestedIterNext(struct NestedIterator *iter) {\n    \n}\n\n/** Deallocates memory previously allocated for the iterator */\nvoid nestedIterFree(struct NestedIterator *iter) {\n    \n}\n\n/**\n * Your NestedIterator will be called like this:\n * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);\n * while (nestedIterHasNext(i)) printf(\"%d\\n\", nestedIterNext(i));\n * nestedIterFree(i);\n */"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     int GetInteger();\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class NestedIterator {\n\n    public NestedIterator(IList<NestedInteger> nestedList) {\n        \n    }\n\n    public bool HasNext() {\n        \n    }\n\n    public int Next() {\n        \n    }\n}\n\n/**\n * Your NestedIterator will be called like this:\n * NestedIterator i = new NestedIterator(nestedList);\n * while (i.HasNext()) v[f()] = i.Next();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @constructor\n * @param {NestedInteger[]} nestedList\n */\nvar NestedIterator = function(nestedList) {\n    \n};\n\n\n/**\n * @this NestedIterator\n * @returns {boolean}\n */\nNestedIterator.prototype.hasNext = function() {\n    \n};\n\n/**\n * @this NestedIterator\n * @returns {integer}\n */\nNestedIterator.prototype.next = function() {\n    \n};\n\n/**\n * Your NestedIterator will be called like this:\n * var i = new NestedIterator(nestedList), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     If value is provided, then it holds a single integer\n *     Otherwise it holds an empty nested list\n *     constructor(value?: number) {\n *         ...\n *     };\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     isInteger(): boolean {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     getInteger(): number | null {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     setInteger(value: number) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     add(elem: NestedInteger) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds,\n *     or an empty list if this NestedInteger holds a single integer\n *     getList(): NestedInteger[] {\n *         ...\n *     };\n * };\n */\n\nclass NestedIterator {\n    constructor(nestedList: NestedInteger[]) {\n\t\t\n    }\n\n    hasNext(): boolean {\n\t\t\n    }\n\n\tnext(): number {\n\t\t\n    }\n}\n\n/**\n * Your ParkingSystem object will be instantiated and called as such:\n * var obj = new NestedIterator(nestedList)\n * var a: number[] = []\n * while (obj.hasNext()) a.push(obj.next());\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *\n *     // if value is not specified, initializes an empty list.\n *     // Otherwise initializes a single integer equal to value.\n *     function __construct($value = null)\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     function isInteger() : bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     function getInteger()\n *\n *     // Set this NestedInteger to hold a single integer.\n *     function setInteger($i) : void\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     function add($ni) : void\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     function getList() : array\n * }\n */\n\nclass NestedIterator {\n    /**\n     * @param NestedInteger[] $nestedList\n     */\n    function __construct($nestedList) {\n        \n    }\n    \n    /**\n     * @return Integer\n     */\n    function next() {\n        \n    }\n    \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * $obj = NestedIterator($nestedList);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->hasNext();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public func isInteger() -> Bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     public func getInteger() -> Int\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public func setInteger(value: Int)\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public func add(elem: NestedInteger)\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     public func getList() -> [NestedInteger]\n * }\n */\n\nclass NestedIterator {\n\n    init(_ nestedList: [NestedInteger]) {\n        \n    }\n    \n    func next() -> Int {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * let obj = NestedIterator(nestedList)\n * let ret_1: Int = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     constructor()\n *\n *     // Constructor initializes a single integer.\n *     constructor(value: Int)\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     fun isInteger(): Boolean\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     fun getInteger(): Int?\n *\n *     // Set this NestedInteger to hold a single integer.\n *     fun setInteger(value: Int): Unit\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     fun add(ni: NestedInteger): Unit\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     fun getList(): List<NestedInteger>?\n * }\n */\n\nclass NestedIterator(nestedList: List<NestedInteger>) {\n    fun next(): Int {\n        \n    }\n    \n    fun hasNext(): Boolean {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * var obj = NestedIterator(nestedList)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * type NestedInteger struct {\n * }\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * func (this NestedInteger) IsInteger() bool {}\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * // So before calling this method, you should have a check\n * func (this NestedInteger) GetInteger() int {}\n *\n * // Set this NestedInteger to hold a single integer.\n * func (n *NestedInteger) SetInteger(value int) {}\n *\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n * func (this *NestedInteger) Add(elem NestedInteger) {}\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The list length is zero if this NestedInteger holds a single integer\n * // You can access NestedInteger's List element directly if you want to modify it\n * func (this NestedInteger) GetList() []*NestedInteger {}\n */\n\ntype NestedIterator struct {\n    \n}\n\nfunc Constructor(nestedList []*NestedInteger) *NestedIterator {\n    \n}\n\nfunc (this *NestedIterator) Next() int {\n    \n}\n\nfunc (this *NestedIterator) HasNext() bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a nested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def get_list()\n#        \"\"\"\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return nil if this NestedInteger holds a single integer\n#        @return {NestedInteger[]}\n#        \"\"\"\n\nclass NestedIterator\n    # @param {NestedInteger[]} nested_list\n    def initialize(nested_list)\n        \n    end\n\n    # @return {Boolean}\n    def has_next\n        \n    end\n\n    # @return {Integer}\n    def next\n        \n    end\nend\n\n# Your NestedIterator will be called like this:\n# i, v = NestedIterator.new(nested_list), []\n# while i.has_next()\n#    v << i.next\n# end"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * trait NestedInteger {\n *\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *   def isInteger: Boolean\n *\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\n *   def getInteger: Int\n *\n *   // Set this NestedInteger to hold a single integer.\n *   def setInteger(i: Int): Unit\n *\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\n *   def getList: Array[NestedInteger]\n *\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *   def add(ni: NestedInteger): Unit\n * }\n */\n\nclass NestedIterator(_nestedList: List[NestedInteger]) {\n    def next(): Int = {\n        \n    }\n    \n    def hasNext(): Boolean = {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * var obj = new NestedIterator(nestedList)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// #[derive(Debug, PartialEq, Eq)]\n// pub enum NestedInteger {\n//   Int(i32),\n//   List(Vec<NestedInteger>)\n// }\nstruct NestedIterator {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NestedIterator {\n\n    fn new(nestedList: Vec<NestedInteger>) -> Self {\n        \n    }\n    \n    fn next(&self) -> i32 {\n        \n    }\n    \n    fn has_next(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * let obj = NestedIterator::new(nestedList);\n * let ret_1: i32 = obj.next();\n * let ret_2: bool = obj.has_next();\n */"
      }
    ],
    "description": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\nImplement the NestedIterator class:\n\nNestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\nint next() Returns the next integer in the nested list.\nboolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\n\nYour code will be tested with the following pseudocode:\n\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n\nIf res matches the expected flattened list, then your code will be judged as correct.\n \nExample 1:\n\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n\nExample 2:\n\nInput: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n\n \nConstraints:\n\n1 <= nestedList.length <= 500\nThe values of the integers in the nested list is in the range [-106, 106].\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,1],2,[1,1]]", "[1,[4,[6]]]"],
    "title": "Flatten Nested List Iterator",
    "topic_tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Design",
      "Queue",
      "Iterator"
    ],
    "updated_at": 1695094244,
    "url": "https://leetcode.com/problems/flatten-nested-list-iterator/"
  },
  {
    "id": "649",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String predictPartyVictory(String senate) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def predictPartyVictory(self, senate):\n        \"\"\"\n        :type senate: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * predictPartyVictory(char * senate){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string PredictPartyVictory(string senate) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} senate\n * @return {string}\n */\nvar predictPartyVictory = function(senate) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function predictPartyVictory(senate: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $senate\n     * @return String\n     */\n    function predictPartyVictory($senate) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func predictPartyVictory(_ senate: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun predictPartyVictory(senate: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String predictPartyVictory(String senate) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func predictPartyVictory(senate string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} senate\n# @return {String}\ndef predict_party_victory(senate)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def predictPartyVictory(senate: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn predict_party_victory(senate: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (predict-party-victory senate)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec predict_party_victory(Senate :: unicode:unicode_binary()) -> unicode:unicode_binary().\npredict_party_victory(Senate) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec predict_party_victory(senate :: String.t) :: String.t\n  def predict_party_victory(senate) do\n\n  end\nend"
      }
    ],
    "description": "In the world of Dota2, there are two parties: the Radiant and the Dire.\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\n\nBan one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.\nAnnounce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\nGiven a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".\n \nExample 1:\n\nInput: senate = \"RD\"\nOutput: \"Radiant\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n\nExample 2:\n\nInput: senate = \"RDD\"\nOutput: \"Dire\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\n \nConstraints:\n\nn == senate.length\n1 <= n <= 104\nsenate[i] is either 'R' or 'D'.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"RD\"", "\"RDD\""],
    "title": "Dota2 Senate",
    "topic_tags": ["String", "Greedy", "Queue"],
    "updated_at": 1695094570,
    "url": "https://leetcode.com/problems/dota2-senate/"
  },
  {
    "id": "215",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int findKthLargest(int* nums, int numsSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int FindKthLargest(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findKthLargest(nums: number[], k: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthLargest($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findKthLargest(nums: IntArray, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int findKthLargest(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findKthLargest(nums []int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_largest(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-kth-largest nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_kth_largest(Nums :: [integer()], K :: integer()) -> integer().\nfind_kth_largest(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\n  def find_kth_largest(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\nCan you solve it without sorting?\n \nExample 1:\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\nExample 2:\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n\n \nConstraints:\n\n1 <= k <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,1,5,6,4]\n2", "[3,2,3,1,2,4,5,5,6]\n4"],
    "title": "Kth Largest Element in an Array",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "updated_at": 1695094130,
    "url": "https://leetcode.com/problems/kth-largest-element-in-an-array/"
  },
  {
    "id": "324",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void wiggleSort(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def wiggleSort(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void wiggleSort(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void WiggleSort(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar wiggleSort = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction wiggleSort(nums: number[]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function wiggleSort(&$nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func wiggleSort(_ nums: inout [Int]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun wiggleSort(nums: IntArray): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void wiggleSort(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func wiggleSort(nums []int)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef wiggle_sort(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def wiggleSort(nums: Array[Int]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn wiggle_sort(nums: &mut Vec<i32>) {\n        \n    }\n}"
      }
    ],
    "description": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\nYou may assume the input array always has a valid answer.\n \nExample 1:\n\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.\n\nExample 2:\n\nInput: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n0 <= nums[i] <= 5000\nIt is guaranteed that there will be an answer for the given input nums.\n\n \nFollow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,5,1,1,6,4]", "[1,3,2,2,3,1]"],
    "title": "Wiggle Sort II",
    "topic_tags": ["Array", "Divide and Conquer", "Sorting", "Quickselect"],
    "updated_at": 1695094225,
    "url": "https://leetcode.com/problems/wiggle-sort-ii/"
  },
  {
    "id": "164",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maximumGap(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maximumGap(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaximumGap(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumGap = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maximumGap(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumGap($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maximumGap(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maximumGap(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maximumGap(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maximumGap(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_gap(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maximumGap(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn maximum_gap(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (maximum-gap nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec maximum_gap(Nums :: [integer()]) -> integer().\nmaximum_gap(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec maximum_gap(nums :: [integer]) :: integer\n  def maximum_gap(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\n \nExample 1:\n\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n\nExample 2:\n\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,6,9,1]", "[10]"],
    "title": "Maximum Gap",
    "topic_tags": ["Array", "Sorting", "Bucket Sort", "Radix Sort"],
    "updated_at": 1695019666,
    "url": "https://leetcode.com/problems/maximum-gap/"
  },
  {
    "id": "381",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class RandomizedCollection {\npublic:\n    RandomizedCollection() {\n        \n    }\n    \n    bool insert(int val) {\n        \n    }\n    \n    bool remove(int val) {\n        \n    }\n    \n    int getRandom() {\n        \n    }\n};\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection* obj = new RandomizedCollection();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class RandomizedCollection {\n\n    public RandomizedCollection() {\n        \n    }\n    \n    public boolean insert(int val) {\n        \n    }\n    \n    public boolean remove(int val) {\n        \n    }\n    \n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection obj = new RandomizedCollection();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class RandomizedCollection(object):\n\n    def __init__(self):\n        \n\n    def insert(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def remove(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class RandomizedCollection:\n\n    def __init__(self):\n        \n\n    def insert(self, val: int) -> bool:\n        \n\n    def remove(self, val: int) -> bool:\n        \n\n    def getRandom(self) -> int:\n        \n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} RandomizedCollection;\n\n\nRandomizedCollection* randomizedCollectionCreate() {\n    \n}\n\nbool randomizedCollectionInsert(RandomizedCollection* obj, int val) {\n  \n}\n\nbool randomizedCollectionRemove(RandomizedCollection* obj, int val) {\n  \n}\n\nint randomizedCollectionGetRandom(RandomizedCollection* obj) {\n  \n}\n\nvoid randomizedCollectionFree(RandomizedCollection* obj) {\n    \n}\n\n/**\n * Your RandomizedCollection struct will be instantiated and called as such:\n * RandomizedCollection* obj = randomizedCollectionCreate();\n * bool param_1 = randomizedCollectionInsert(obj, val);\n \n * bool param_2 = randomizedCollectionRemove(obj, val);\n \n * int param_3 = randomizedCollectionGetRandom(obj);\n \n * randomizedCollectionFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class RandomizedCollection {\n\n    public RandomizedCollection() {\n        \n    }\n    \n    public bool Insert(int val) {\n        \n    }\n    \n    public bool Remove(int val) {\n        \n    }\n    \n    public int GetRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection obj = new RandomizedCollection();\n * bool param_1 = obj.Insert(val);\n * bool param_2 = obj.Remove(val);\n * int param_3 = obj.GetRandom();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar RandomizedCollection = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.insert = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.remove = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nRandomizedCollection.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class RandomizedCollection {\n    constructor() {\n\n    }\n\n    insert(val: number): boolean {\n\n    }\n\n    remove(val: number): boolean {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class RandomizedCollection {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Boolean\n     */\n    function remove($val) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * $obj = RandomizedCollection();\n * $ret_1 = $obj->insert($val);\n * $ret_2 = $obj->remove($val);\n * $ret_3 = $obj->getRandom();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass RandomizedCollection {\n\n    init() {\n        \n    }\n    \n    func insert(_ val: Int) -> Bool {\n        \n    }\n    \n    func remove(_ val: Int) -> Bool {\n        \n    }\n    \n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * let obj = RandomizedCollection()\n * let ret_1: Bool = obj.insert(val)\n * let ret_2: Bool = obj.remove(val)\n * let ret_3: Int = obj.getRandom()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class RandomizedCollection() {\n\n    fun insert(`val`: Int): Boolean {\n        \n    }\n\n    fun remove(`val`: Int): Boolean {\n        \n    }\n\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = RandomizedCollection()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class RandomizedCollection {\n\n  RandomizedCollection() {\n\n  }\n  \n  bool insert(int val) {\n\n  }\n  \n  bool remove(int val) {\n\n  }\n  \n  int getRandom() {\n\n  }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection obj = RandomizedCollection();\n * bool param1 = obj.insert(val);\n * bool param2 = obj.remove(val);\n * int param3 = obj.getRandom();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type RandomizedCollection struct {\n    \n}\n\n\nfunc Constructor() RandomizedCollection {\n    \n}\n\n\nfunc (this *RandomizedCollection) Insert(val int) bool {\n    \n}\n\n\nfunc (this *RandomizedCollection) Remove(val int) bool {\n    \n}\n\n\nfunc (this *RandomizedCollection) GetRandom() int {\n    \n}\n\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class RandomizedCollection\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def remove(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection.new()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.get_random()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class RandomizedCollection() {\n\n    def insert(`val`: Int): Boolean = {\n        \n    }\n\n    def remove(`val`: Int): Boolean = {\n        \n    }\n\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct RandomizedCollection {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RandomizedCollection {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn insert(&self, val: i32) -> bool {\n        \n    }\n    \n    fn remove(&self, val: i32) -> bool {\n        \n    }\n    \n    fn get_random(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * let obj = RandomizedCollection::new();\n * let ret_1: bool = obj.insert(val);\n * let ret_2: bool = obj.remove(val);\n * let ret_3: i32 = obj.get_random();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define randomized-collection%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; insert : exact-integer? -> boolean?\n    (define/public (insert val)\n\n      )\n    ; remove : exact-integer? -> boolean?\n    (define/public (remove val)\n\n      )\n    ; get-random : -> exact-integer?\n    (define/public (get-random)\n\n      )))\n\n;; Your randomized-collection% object will be instantiated and called as such:\n;; (define obj (new randomized-collection%))\n;; (define param_1 (send obj insert val))\n;; (define param_2 (send obj remove val))\n;; (define param_3 (send obj get-random))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec randomized_collection_init_() -> any().\nrandomized_collection_init_() ->\n  .\n\n-spec randomized_collection_insert(Val :: integer()) -> boolean().\nrandomized_collection_insert(Val) ->\n  .\n\n-spec randomized_collection_remove(Val :: integer()) -> boolean().\nrandomized_collection_remove(Val) ->\n  .\n\n-spec randomized_collection_get_random() -> integer().\nrandomized_collection_get_random() ->\n  .\n\n\n%% Your functions will be called as such:\n%% randomized_collection_init_(),\n%% Param_1 = randomized_collection_insert(Val),\n%% Param_2 = randomized_collection_remove(Val),\n%% Param_3 = randomized_collection_get_random(),\n\n%% randomized_collection_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule RandomizedCollection do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec insert(val :: integer) :: boolean\n  def insert(val) do\n\n  end\n\n  @spec remove(val :: integer) :: boolean\n  def remove(val) do\n\n  end\n\n  @spec get_random() :: integer\n  def get_random() do\n\n  end\nend\n\n# Your functions will be called as such:\n# RandomizedCollection.init_()\n# param_1 = RandomizedCollection.insert(val)\n# param_2 = RandomizedCollection.remove(val)\n# param_3 = RandomizedCollection.get_random()\n\n# RandomizedCollection.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\nImplement the RandomizedCollection class:\n\nRandomizedCollection() Initializes the empty RandomizedCollection object.\nbool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\nbool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\nint getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.\n\nYou must implement the functions of the class such that each function works on average O(1) time complexity.\nNote: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\n \nExample 1:\n\nInput\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\n\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n\n \nConstraints:\n\n-231 <= val <= 231 - 1\nAt most 2 * 105 calls in total will be made to insert, remove, and getRandom.\nThere will be at least one element in the data structure when getRandom is called.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"RandomizedCollection\",\"insert\",\"insert\",\"insert\",\"getRandom\",\"remove\",\"getRandom\"]\n[[],[1],[1],[2],[],[1],[]]"
    ],
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "topic_tags": ["Array", "Hash Table", "Math", "Design", "Randomized"],
    "updated_at": 1695094280,
    "url": "https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/"
  },
  {
    "id": "380",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class RandomizedSet {\npublic:\n    RandomizedSet() {\n        \n    }\n    \n    bool insert(int val) {\n        \n    }\n    \n    bool remove(int val) {\n        \n    }\n    \n    int getRandom() {\n        \n    }\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class RandomizedSet {\n\n    public RandomizedSet() {\n        \n    }\n    \n    public boolean insert(int val) {\n        \n    }\n    \n    public boolean remove(int val) {\n        \n    }\n    \n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class RandomizedSet(object):\n\n    def __init__(self):\n        \n\n    def insert(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def remove(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class RandomizedSet:\n\n    def __init__(self):\n        \n\n    def insert(self, val: int) -> bool:\n        \n\n    def remove(self, val: int) -> bool:\n        \n\n    def getRandom(self) -> int:\n        \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} RandomizedSet;\n\n\nRandomizedSet* randomizedSetCreate() {\n    \n}\n\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\n  \n}\n\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\n  \n}\n\nint randomizedSetGetRandom(RandomizedSet* obj) {\n  \n}\n\nvoid randomizedSetFree(RandomizedSet* obj) {\n    \n}\n\n/**\n * Your RandomizedSet struct will be instantiated and called as such:\n * RandomizedSet* obj = randomizedSetCreate();\n * bool param_1 = randomizedSetInsert(obj, val);\n \n * bool param_2 = randomizedSetRemove(obj, val);\n \n * int param_3 = randomizedSetGetRandom(obj);\n \n * randomizedSetFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class RandomizedSet {\n\n    public RandomizedSet() {\n        \n    }\n    \n    public bool Insert(int val) {\n        \n    }\n    \n    public bool Remove(int val) {\n        \n    }\n    \n    public int GetRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param_1 = obj.Insert(val);\n * bool param_2 = obj.Remove(val);\n * int param_3 = obj.GetRandom();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar RandomizedSet = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nRandomizedSet.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class RandomizedSet {\n    constructor() {\n\n    }\n\n    insert(val: number): boolean {\n\n    }\n\n    remove(val: number): boolean {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class RandomizedSet {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Boolean\n     */\n    function remove($val) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * $obj = RandomizedSet();\n * $ret_1 = $obj->insert($val);\n * $ret_2 = $obj->remove($val);\n * $ret_3 = $obj->getRandom();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass RandomizedSet {\n\n    init() {\n        \n    }\n    \n    func insert(_ val: Int) -> Bool {\n        \n    }\n    \n    func remove(_ val: Int) -> Bool {\n        \n    }\n    \n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet()\n * let ret_1: Bool = obj.insert(val)\n * let ret_2: Bool = obj.remove(val)\n * let ret_3: Int = obj.getRandom()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class RandomizedSet() {\n\n    fun insert(`val`: Int): Boolean {\n        \n    }\n\n    fun remove(`val`: Int): Boolean {\n        \n    }\n\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class RandomizedSet {\n\n  RandomizedSet() {\n\n  }\n  \n  bool insert(int val) {\n\n  }\n  \n  bool remove(int val) {\n\n  }\n  \n  int getRandom() {\n\n  }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = RandomizedSet();\n * bool param1 = obj.insert(val);\n * bool param2 = obj.remove(val);\n * int param3 = obj.getRandom();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type RandomizedSet struct {\n    \n}\n\n\nfunc Constructor() RandomizedSet {\n    \n}\n\n\nfunc (this *RandomizedSet) Insert(val int) bool {\n    \n}\n\n\nfunc (this *RandomizedSet) Remove(val int) bool {\n    \n}\n\n\nfunc (this *RandomizedSet) GetRandom() int {\n    \n}\n\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class RandomizedSet\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def remove(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet.new()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.get_random()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class RandomizedSet() {\n\n    def insert(`val`: Int): Boolean = {\n        \n    }\n\n    def remove(`val`: Int): Boolean = {\n        \n    }\n\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct RandomizedSet {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RandomizedSet {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn insert(&self, val: i32) -> bool {\n        \n    }\n    \n    fn remove(&self, val: i32) -> bool {\n        \n    }\n    \n    fn get_random(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet::new();\n * let ret_1: bool = obj.insert(val);\n * let ret_2: bool = obj.remove(val);\n * let ret_3: i32 = obj.get_random();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define randomized-set%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; insert : exact-integer? -> boolean?\n    (define/public (insert val)\n\n      )\n    ; remove : exact-integer? -> boolean?\n    (define/public (remove val)\n\n      )\n    ; get-random : -> exact-integer?\n    (define/public (get-random)\n\n      )))\n\n;; Your randomized-set% object will be instantiated and called as such:\n;; (define obj (new randomized-set%))\n;; (define param_1 (send obj insert val))\n;; (define param_2 (send obj remove val))\n;; (define param_3 (send obj get-random))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec randomized_set_init_() -> any().\nrandomized_set_init_() ->\n  .\n\n-spec randomized_set_insert(Val :: integer()) -> boolean().\nrandomized_set_insert(Val) ->\n  .\n\n-spec randomized_set_remove(Val :: integer()) -> boolean().\nrandomized_set_remove(Val) ->\n  .\n\n-spec randomized_set_get_random() -> integer().\nrandomized_set_get_random() ->\n  .\n\n\n%% Your functions will be called as such:\n%% randomized_set_init_(),\n%% Param_1 = randomized_set_insert(Val),\n%% Param_2 = randomized_set_remove(Val),\n%% Param_3 = randomized_set_get_random(),\n\n%% randomized_set_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule RandomizedSet do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec insert(val :: integer) :: boolean\n  def insert(val) do\n\n  end\n\n  @spec remove(val :: integer) :: boolean\n  def remove(val) do\n\n  end\n\n  @spec get_random() :: integer\n  def get_random() do\n\n  end\nend\n\n# Your functions will be called as such:\n# RandomizedSet.init_()\n# param_1 = RandomizedSet.insert(val)\n# param_2 = RandomizedSet.remove(val)\n# param_3 = RandomizedSet.get_random()\n\n# RandomizedSet.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Implement the RandomizedSet class:\n\nRandomizedSet() Initializes the RandomizedSet object.\nbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\nbool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\nint getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n\nYou must implement the functions of the class such that each function works in average O(1) time complexity.\n \nExample 1:\n\nInput\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n\n \nConstraints:\n\n-231 <= val <= 231 - 1\nAt most 2 * 105 calls will be made to insert, remove, and getRandom.\nThere will be at least one element in the data structure when getRandom is called.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\n[[],[1],[2],[2],[],[1],[2],[]]"
    ],
    "title": "Insert Delete GetRandom O(1)",
    "topic_tags": ["Array", "Hash Table", "Math", "Design", "Randomized"],
    "updated_at": 1695094279,
    "url": "https://leetcode.com/problems/insert-delete-getrandom-o1/"
  },
  {
    "id": "382",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    Solution(ListNode* head) {\n        \n    }\n    \n    int getRandom() {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    public Solution(ListNode head) {\n        \n    }\n    \n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.getRandom();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n\n    def __init__(self, head: Optional[ListNode]):\n        \n\n    def getRandom(self) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(struct ListNode* head) {\n    \n}\n\nint solutionGetRandom(Solution* obj) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(head);\n * int param_1 = solutionGetRandom(obj);\n \n * solutionFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n\n    public Solution(ListNode head) {\n        \n    }\n    \n    public int GetRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.GetRandom();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n    \n};\n\n/**\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nclass Solution {\n    constructor(head: ListNode | null) {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * @param ListNode $head\n     */\n    function __construct($head) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($head);\n * $ret_1 = $obj->getRandom();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\n\nclass Solution {\n\n    init(_ head: ListNode?) {\n        \n    }\n    \n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(head)\n * let ret_1: Int = obj.getRandom()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution(head: ListNode?) {\n\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n\n  Solution(ListNode? head) {\n\n  }\n  \n  int getRandom() {\n\n  }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = Solution(head);\n * int param1 = obj.getRandom();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\ntype Solution struct {\n    \n}\n\n\nfunc Constructor(head *ListNode) Solution {\n    \n}\n\n\nfunc (this *Solution) GetRandom() int {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(head);\n * param_1 := obj.GetRandom();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\nclass Solution\n\n=begin\n    :type head: ListNode\n=end\n    def initialize(head)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(head)\n# param_1 = obj.get_random()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nclass Solution(_head: ListNode) {\n\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nstruct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(head: Option<Box<ListNode>>) -> Self {\n        \n    }\n    \n    fn get_random(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(head);\n * let ret_1: i32 = obj.get_random();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define solution%\n  (class object%\n    (super-new)\n\n    ; head : (or/c list-node? #f)\n    (init-field\n      head)\n    \n    ; get-random : -> exact-integer?\n    (define/public (get-random)\n\n      )))\n\n;; Your solution% object will be instantiated and called as such:\n;; (define obj (new solution% [head head]))\n;; (define param_1 (send obj get-random))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec solution_init_(Head :: #list_node{} | null) -> any().\nsolution_init_(Head) ->\n  .\n\n-spec solution_get_random() -> integer().\nsolution_get_random() ->\n  .\n\n\n%% Your functions will be called as such:\n%% solution_init_(Head),\n%% Param_1 = solution_get_random(),\n\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec init_(head :: ListNode.t | nil) :: any\n  def init_(head) do\n\n  end\n\n  @spec get_random() :: integer\n  def get_random() do\n\n  end\nend\n\n# Your functions will be called as such:\n# Solution.init_(head)\n# param_1 = Solution.get_random()\n\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\nImplement the Solution class:\n\nSolution(ListNode head) Initializes the object with the head of the singly-linked list head.\nint getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n \nExample 1:\n\n\nInput\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n\n \nConstraints:\n\nThe number of nodes in the linked list will be in the range [1, 104].\n-104 <= Node.val <= 104\nAt most 104 calls will be made to getRandom.\n\n \nFollow up:\n\nWhat if the linked list is extremely large and its length is unknown to you?\nCould you solve this efficiently without using extra space?\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"Solution\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\"]\n[[[1,2,3]],[],[],[],[],[]]"
    ],
    "title": "Linked List Random Node",
    "topic_tags": ["Linked List", "Math", "Reservoir Sampling", "Randomized"],
    "updated_at": 1695094282,
    "url": "https://leetcode.com/problems/linked-list-random-node/"
  },
  {
    "id": "21",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(list1, list2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $list1\n     * @param ListNode $list2\n     * @return ListNode\n     */\n    function mergeTwoLists($list1, $list2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeTwoLists(ListNode? list1, ListNode? list2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} list1\n# @param {ListNode} list2\n# @return {ListNode}\ndef merge_two_lists(list1, list2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-two-lists list1 list2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_two_lists(List1 :: #list_node{} | null, List2 :: #list_node{} | null) -> #list_node{} | null.\nmerge_two_lists(List1, List2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_two_lists(list1 :: ListNode.t | nil, list2 :: ListNode.t | nil) :: ListNode.t | nil\n  def merge_two_lists(list1, list2) do\n\n  end\nend"
      }
    ],
    "description": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n \nExample 1:\n\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n \nConstraints:\n\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,4]\n[1,3,4]", "[]\n[]", "[]\n[0]"],
    "title": "Merge Two Sorted Lists",
    "topic_tags": ["Linked List", "Recursion"],
    "updated_at": 1695018974,
    "url": "https://leetcode.com/problems/merge-two-sorted-lists/"
  },
  {
    "id": "203",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* removeElements(struct ListNode* head, int val){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RemoveElements(ListNode head, int val) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function(head, val) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeElements(head: ListNode | null, val: number): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $val\n     * @return ListNode\n     */\n    function removeElements($head, $val) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func removeElements(_ head: ListNode?, _ val: Int) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeElements(head: ListNode?, `val`: Int): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? removeElements(ListNode? head, int val) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeElements(head *ListNode, val int) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} val\n# @return {ListNode}\ndef remove_elements(head, val)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeElements(head: ListNode, `val`: Int): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_elements(head: Option<Box<ListNode>>, val: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (remove-elements head val)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec remove_elements(Head :: #list_node{} | null, Val :: integer()) -> #list_node{} | null.\nremove_elements(Head, Val) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec remove_elements(head :: ListNode.t | nil, val :: integer) :: ListNode.t | nil\n  def remove_elements(head, val) do\n\n  end\nend"
      }
    ],
    "description": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n \nExample 1:\n\n\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n\nExample 2:\n\nInput: head = [], val = 1\nOutput: []\n\nExample 3:\n\nInput: head = [7,7,7,7], val = 7\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 104].\n1 <= Node.val <= 50\n0 <= val <= 50\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,6,3,4,5,6]\n6", "[]\n1", "[7,7,7,7]\n7"],
    "title": "Remove Linked List Elements",
    "topic_tags": ["Linked List", "Recursion"],
    "updated_at": 1695094114,
    "url": "https://leetcode.com/problems/remove-linked-list-elements/"
  },
  {
    "id": "10",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isMatch(char * s, char * p){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isMatch(s: string, p: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isMatch(String s, String p) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isMatch(s string, p string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n\n  end\nend"
      }
    ],
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n'.' Matches any single character.​​​​\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n \nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\nExample 3:\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n \nConstraints:\n\n1 <= s.length <= 20\n1 <= p.length <= 20\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and '*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aa\"\n\"a\"", "\"aa\"\n\"a*\"", "\"ab\"\n\".*\""],
    "title": "Regular Expression Matching",
    "topic_tags": ["String", "Dynamic Programming", "Recursion"],
    "updated_at": 1695017051,
    "url": "https://leetcode.com/problems/regular-expression-matching/"
  },
  {
    "id": "25",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseKGroup(struct ListNode* head, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseKGroup(ListNode head, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function(head, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseKGroup(head: ListNode | null, k: number): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function reverseKGroup($head, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseKGroup(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseKGroup(head: ListNode?, k: Int): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseKGroup(ListNode? head, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef reverse_k_group(head, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_k_group(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-k-group head k)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_k_group(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\nreverse_k_group(Head, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_k_group(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\n  def reverse_k_group(head, k) do\n\n  end\nend"
      }
    ],
    "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n \nExample 1:\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n \nConstraints:\n\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n\n \nFollow-up: Can you solve the problem in O(1) extra memory space?\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4,5]\n2", "[1,2,3,4,5]\n3"],
    "title": "Reverse Nodes in k-Group",
    "topic_tags": ["Linked List", "Recursion"],
    "updated_at": 1695018977,
    "url": "https://leetcode.com/problems/reverse-nodes-in-k-group/"
  },
  {
    "id": "2",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (add-two-numbers l1 l2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\nadd_two_numbers(L1, L2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\n  def add_two_numbers(l1, l2) do\n\n  end\nend"
      }
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n \nExample 1:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n \nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[2,4,3]\n[5,6,4]",
      "[0]\n[0]",
      "[9,9,9,9,9,9,9]\n[9,9,9,9]"
    ],
    "title": "Add Two Numbers",
    "topic_tags": ["Linked List", "Math", "Recursion"],
    "updated_at": 1695017040,
    "url": "https://leetcode.com/problems/add-two-numbers/"
  },
  {
    "id": "24",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* swapPairs(struct ListNode* head){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode SwapPairs(ListNode head) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction swapPairs(head: ListNode | null): ListNode | null {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function swapPairs($head) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func swapPairs(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun swapPairs(head: ListNode?): ListNode? {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? swapPairs(ListNode? head) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef swap_pairs(head)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def swapPairs(head: ListNode): ListNode = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn swap_pairs(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (swap-pairs head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec swap_pairs(Head :: #list_node{} | null) -> #list_node{} | null.\nswap_pairs(Head) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec swap_pairs(head :: ListNode.t | nil) :: ListNode.t | nil\n  def swap_pairs(head) do\n\n  end\nend"
      }
    ],
    "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n \nExample 1:\n\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nExample 2:\n\nInput: head = []\nOutput: []\n\nExample 3:\n\nInput: head = [1]\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 100].\n0 <= Node.val <= 100\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,4]", "[]", "[1]"],
    "title": "Swap Nodes in Pairs",
    "topic_tags": ["Linked List", "Recursion"],
    "updated_at": 1695018976,
    "url": "https://leetcode.com/problems/swap-nodes-in-pairs/"
  },
  {
    "id": "382",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    Solution(ListNode* head) {\n        \n    }\n    \n    int getRandom() {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    public Solution(ListNode head) {\n        \n    }\n    \n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.getRandom();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n\n    def __init__(self, head: Optional[ListNode]):\n        \n\n    def getRandom(self) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(struct ListNode* head) {\n    \n}\n\nint solutionGetRandom(Solution* obj) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(head);\n * int param_1 = solutionGetRandom(obj);\n \n * solutionFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n\n    public Solution(ListNode head) {\n        \n    }\n    \n    public int GetRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.GetRandom();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n    \n};\n\n/**\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nclass Solution {\n    constructor(head: ListNode | null) {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * @param ListNode $head\n     */\n    function __construct($head) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($head);\n * $ret_1 = $obj->getRandom();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\n\nclass Solution {\n\n    init(_ head: ListNode?) {\n        \n    }\n    \n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(head)\n * let ret_1: Int = obj.getRandom()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution(head: ListNode?) {\n\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n\n  Solution(ListNode? head) {\n\n  }\n  \n  int getRandom() {\n\n  }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = Solution(head);\n * int param1 = obj.getRandom();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\ntype Solution struct {\n    \n}\n\n\nfunc Constructor(head *ListNode) Solution {\n    \n}\n\n\nfunc (this *Solution) GetRandom() int {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(head);\n * param_1 := obj.GetRandom();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\nclass Solution\n\n=begin\n    :type head: ListNode\n=end\n    def initialize(head)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(head)\n# param_1 = obj.get_random()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nclass Solution(_head: ListNode) {\n\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nstruct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(head: Option<Box<ListNode>>) -> Self {\n        \n    }\n    \n    fn get_random(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(head);\n * let ret_1: i32 = obj.get_random();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define solution%\n  (class object%\n    (super-new)\n\n    ; head : (or/c list-node? #f)\n    (init-field\n      head)\n    \n    ; get-random : -> exact-integer?\n    (define/public (get-random)\n\n      )))\n\n;; Your solution% object will be instantiated and called as such:\n;; (define obj (new solution% [head head]))\n;; (define param_1 (send obj get-random))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec solution_init_(Head :: #list_node{} | null) -> any().\nsolution_init_(Head) ->\n  .\n\n-spec solution_get_random() -> integer().\nsolution_get_random() ->\n  .\n\n\n%% Your functions will be called as such:\n%% solution_init_(Head),\n%% Param_1 = solution_get_random(),\n\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec init_(head :: ListNode.t | nil) :: any\n  def init_(head) do\n\n  end\n\n  @spec get_random() :: integer\n  def get_random() do\n\n  end\nend\n\n# Your functions will be called as such:\n# Solution.init_(head)\n# param_1 = Solution.get_random()\n\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\nImplement the Solution class:\n\nSolution(ListNode head) Initializes the object with the head of the singly-linked list head.\nint getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n \nExample 1:\n\n\nInput\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n\n \nConstraints:\n\nThe number of nodes in the linked list will be in the range [1, 104].\n-104 <= Node.val <= 104\nAt most 104 calls will be made to getRandom.\n\n \nFollow up:\n\nWhat if the linked list is extremely large and its length is unknown to you?\nCould you solve this efficiently without using extra space?\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"Solution\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\"]\n[[[1,2,3]],[],[],[],[],[]]"
    ],
    "title": "Linked List Random Node",
    "topic_tags": ["Linked List", "Math", "Reservoir Sampling", "Randomized"],
    "updated_at": 1695094282,
    "url": "https://leetcode.com/problems/linked-list-random-node/"
  },
  {
    "id": "398",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    Solution(vector<int>& nums) {\n        \n    }\n    \n    int pick(int target) {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * int param_1 = obj->pick(target);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n\n    public Solution(int[] nums) {\n        \n    }\n    \n    public int pick(int target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.pick(target);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def pick(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def pick(self, target: int) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int* nums, int numsSize) {\n    \n}\n\nint solutionPick(Solution* obj, int target) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(nums, numsSize);\n * int param_1 = solutionPick(obj, target);\n \n * solutionFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n\n    public Solution(int[] nums) {\n        \n    }\n    \n    public int Pick(int target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.Pick(target);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n    \n};\n\n/** \n * @param {number} target\n * @return {number}\n */\nSolution.prototype.pick = function(target) {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class Solution {\n    constructor(nums: number[]) {\n\n    }\n\n    pick(target: number): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function pick($target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($nums);\n * $ret_1 = $obj->pick($target);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass Solution {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func pick(_ target: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(nums)\n * let ret_1: Int = obj.pick(target)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution(nums: IntArray) {\n\n    fun pick(target: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(nums)\n * var param_1 = obj.pick(target)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n\n  Solution(List<int> nums) {\n\n  }\n  \n  int pick(int target) {\n\n  }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = Solution(nums);\n * int param1 = obj.pick(target);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type Solution struct {\n    \n}\n\n\nfunc Constructor(nums []int) Solution {\n    \n}\n\n\nfunc (this *Solution) Pick(target int) int {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.Pick(target);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class Solution\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :type target: Integer\n    :rtype: Integer\n=end\n    def pick(target)\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(nums)\n# param_1 = obj.pick(target)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class Solution(_nums: Array[Int]) {\n\n    def pick(target: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn pick(&self, target: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(nums);\n * let ret_1: i32 = obj.pick(target);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define solution%\n  (class object%\n    (super-new)\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      nums)\n    \n    ; pick : exact-integer? -> exact-integer?\n    (define/public (pick target)\n\n      )))\n\n;; Your solution% object will be instantiated and called as such:\n;; (define obj (new solution% [nums nums]))\n;; (define param_1 (send obj pick target))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec solution_init_(Nums :: [integer()]) -> any().\nsolution_init_(Nums) ->\n  .\n\n-spec solution_pick(Target :: integer()) -> integer().\nsolution_pick(Target) ->\n  .\n\n\n%% Your functions will be called as such:\n%% solution_init_(Nums),\n%% Param_1 = solution_pick(Target),\n\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec init_(nums :: [integer]) :: any\n  def init_(nums) do\n\n  end\n\n  @spec pick(target :: integer) :: integer\n  def pick(target) do\n\n  end\nend\n\n# Your functions will be called as such:\n# Solution.init_(nums)\n# param_1 = Solution.pick(target)\n\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the array nums.\nint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\n\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 104\n-231 <= nums[i] <= 231 - 1\ntarget is an integer from nums.\nAt most 104 calls will be made to pick.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[[1,2,3,3,3]],[3],[1],[3]]"
    ],
    "title": "Random Pick Index",
    "topic_tags": ["Hash Table", "Math", "Reservoir Sampling", "Randomized"],
    "updated_at": 1695094305,
    "url": "https://leetcode.com/problems/random-pick-index/"
  },
  {
    "id": "214",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string shortestPalindrome(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String shortestPalindrome(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * shortestPalindrome(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string ShortestPalindrome(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar shortestPalindrome = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function shortestPalindrome(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function shortestPalindrome($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func shortestPalindrome(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun shortestPalindrome(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String shortestPalindrome(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func shortestPalindrome(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef shortest_palindrome(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def shortestPalindrome(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn shortest_palindrome(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (shortest-palindrome s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec shortest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nshortest_palindrome(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec shortest_palindrome(s :: String.t) :: String.t\n  def shortest_palindrome(s) do\n\n  end\nend"
      }
    ],
    "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\n \nExample 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\nExample 2:\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of lowercase English letters only.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aacecaaa\"", "\"abcd\""],
    "title": "Shortest Palindrome",
    "topic_tags": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "updated_at": 1695094128,
    "url": "https://leetcode.com/problems/shortest-palindrome/"
  },
  {
    "id": "187",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findRepeatedDnaSequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findRepeatedDnaSequences(char * s, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar findRepeatedDnaSequences = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findRepeatedDnaSequences(s: string): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function findRepeatedDnaSequences($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findRepeatedDnaSequences(_ s: String) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findRepeatedDnaSequences(s: String): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findRepeatedDnaSequences(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findRepeatedDnaSequences(s string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String[]}\ndef find_repeated_dna_sequences(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findRepeatedDnaSequences(s: String): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_repeated_dna_sequences(s: String) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-repeated-dna-sequences s)\n  (-> string? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_repeated_dna_sequences(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nfind_repeated_dna_sequences(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_repeated_dna_sequences(s :: String.t) :: [String.t]\n  def find_repeated_dna_sequences(s) do\n\n  end\nend"
      }
    ],
    "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, \"ACGAATTCCG\" is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n \nExample 1:\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\nExample 2:\nInput: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n\n \nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'A', 'C', 'G', or 'T'.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"", "\"AAAAAAAAAAAAA\""],
    "title": "Repeated DNA Sequences",
    "topic_tags": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "updated_at": 1695094090,
    "url": "https://leetcode.com/problems/repeated-dna-sequences/"
  },
  {
    "id": "718",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int findLength(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int findLength(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findLength(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int findLength(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int FindLength(int[] nums1, int[] nums2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findLength = function(nums1, nums2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findLength(nums1: number[], nums2: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function findLength($nums1, $nums2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findLength(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findLength(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int findLength(List<int> nums1, List<int> nums2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findLength(nums1 []int, nums2 []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef find_length(nums1, nums2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findLength(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_length(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-length nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_length(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nfind_length(Nums1, Nums2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_length(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def find_length(nums1, nums2) do\n\n  end\nend"
      }
    ],
    "description": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.\n \nExample 1:\n\nInput: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\nOutput: 3\nExplanation: The repeated subarray with maximum length is [3,2,1].\n\nExample 2:\n\nInput: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\nOutput: 5\nExplanation: The repeated subarray with maximum length is [0,0,0,0,0].\n\n \nConstraints:\n\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 100\n\n",
    "difficulty": "Medium",
    "hints": [
      "Use dynamic programming.  dp[i][j] will be the longest common prefix of A[i:] and B[j:].",
      "The answer is max(dp[i][j]) over all i, j."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,2,1]\n[3,2,1,4,7]", "[0,0,0,0,0]\n[0,0,0,0,0]"],
    "title": "Maximum Length of Repeated Subarray",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "updated_at": 1695094641,
    "url": "https://leetcode.com/problems/maximum-length-of-repeated-subarray/"
  },
  {
    "id": "218",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function getSkyline(buildings: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function getSkyline($buildings) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> getSkyline(List<List<int>> buildings) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func getSkyline(buildings [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef get_skyline(buildings)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\nget_skyline(Buildings) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\n  def get_skyline(buildings) do\n\n  end\nend"
      }
    ],
    "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n \nExample 1:\n\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\nExample 2:\n\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n \nConstraints:\n\n1 <= buildings.length <= 104\n0 <= lefti < righti <= 231 - 1\n1 <= heighti <= 231 - 1\nbuildings is sorted by lefti in non-decreasing order.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
      "[[0,2,3],[2,5,3]]"
    ],
    "title": "The Skyline Problem",
    "topic_tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "updated_at": 1695094134,
    "url": "https://leetcode.com/problems/the-skyline-problem/"
  },
  {
    "id": "315",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countSmaller(int* nums, int numsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> CountSmaller(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar countSmaller = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function countSmaller(nums: number[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function countSmaller($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func countSmaller(_ nums: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun countSmaller(nums: IntArray): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> countSmaller(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func countSmaller(nums []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef count_smaller(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def countSmaller(nums: Array[Int]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn count_smaller(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (count-smaller nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec count_smaller(Nums :: [integer()]) -> [integer()].\ncount_smaller(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec count_smaller(nums :: [integer]) :: [integer]\n  def count_smaller(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n \nExample 1:\n\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n\nExample 2:\n\nInput: nums = [-1]\nOutput: [0]\n\nExample 3:\n\nInput: nums = [-1,-1]\nOutput: [0,0]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[5,2,6,1]", "[-1]", "[-1,-1]"],
    "title": "Count of Smaller Numbers After Self",
    "topic_tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "updated_at": 1695094217,
    "url": "https://leetcode.com/problems/count-of-smaller-numbers-after-self/"
  },
  {
    "id": "307",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n        \n    }\n    \n    void update(int index, int val) {\n        \n    }\n    \n    int sumRange(int left, int right) {\n        \n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public void update(int index, int val) {\n        \n    }\n    \n    public int sumRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.update(index,val);\n * int param_2 = obj.sumRange(left,right);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def update(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def sumRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def update(self, index: int, val: int) -> None:\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} NumArray;\n\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n\nvoid numArrayUpdate(NumArray* obj, int index, int val) {\n  \n}\n\nint numArraySumRange(NumArray* obj, int left, int right) {\n  \n}\n\nvoid numArrayFree(NumArray* obj) {\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * numArrayUpdate(obj, index, val);\n \n * int param_2 = numArraySumRange(obj, left, right);\n \n * numArrayFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public void Update(int index, int val) {\n        \n    }\n    \n    public int SumRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.Update(index,val);\n * int param_2 = obj.SumRange(left,right);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nNumArray.prototype.update = function(index, val) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {number}\n */\nNumArray.prototype.sumRange = function(left, right) {\n    \n};\n\n/** \n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(index,val)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class NumArray {\n    constructor(nums: number[]) {\n\n    }\n\n    update(index: number, val: number): void {\n\n    }\n\n    sumRange(left: number, right: number): number {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(index,val)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class NumArray {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function update($index, $val) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function sumRange($left, $right) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * $obj = NumArray($nums);\n * $obj->update($index, $val);\n * $ret_2 = $obj->sumRange($left, $right);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func update(_ index: Int, _ val: Int) {\n        \n    }\n    \n    func sumRange(_ left: Int, _ right: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * obj.update(index, val)\n * let ret_2: Int = obj.sumRange(left, right)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class NumArray(nums: IntArray) {\n\n    fun update(index: Int, `val`: Int) {\n        \n    }\n\n    fun sumRange(left: Int, right: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = NumArray(nums)\n * obj.update(index,`val`)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class NumArray {\n\n  NumArray(List<int> nums) {\n\n  }\n  \n  void update(int index, int val) {\n\n  }\n  \n  int sumRange(int left, int right) {\n\n  }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = NumArray(nums);\n * obj.update(index,val);\n * int param2 = obj.sumRange(left,right);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type NumArray struct {\n    \n}\n\n\nfunc Constructor(nums []int) NumArray {\n    \n}\n\n\nfunc (this *NumArray) Update(index int, val int)  {\n    \n}\n\n\nfunc (this *NumArray) SumRange(left int, right int) int {\n    \n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * obj.Update(index,val);\n * param_2 := obj.SumRange(left,right);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class NumArray\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def update(index, val)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Integer\n=end\n    def sum_range(left, right)\n        \n    end\n\n\nend\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray.new(nums)\n# obj.update(index, val)\n# param_2 = obj.sum_range(left, right)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class NumArray(_nums: Array[Int]) {\n\n    def update(index: Int, `val`: Int) {\n        \n    }\n\n    def sumRange(left: Int, right: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(index,`val`)\n * var param_2 = obj.sumRange(left,right)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct NumArray {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumArray {\n\n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn update(&self, index: i32, val: i32) {\n        \n    }\n    \n    fn sum_range(&self, left: i32, right: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray::new(nums);\n * obj.update(index, val);\n * let ret_2: i32 = obj.sum_range(left, right);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define num-array%\n  (class object%\n    (super-new)\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      nums)\n    \n    ; update : exact-integer? exact-integer? -> void?\n    (define/public (update index val)\n\n      )\n    ; sum-range : exact-integer? exact-integer? -> exact-integer?\n    (define/public (sum-range left right)\n\n      )))\n\n;; Your num-array% object will be instantiated and called as such:\n;; (define obj (new num-array% [nums nums]))\n;; (send obj update index val)\n;; (define param_2 (send obj sum-range left right))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec num_array_init_(Nums :: [integer()]) -> any().\nnum_array_init_(Nums) ->\n  .\n\n-spec num_array_update(Index :: integer(), Val :: integer()) -> any().\nnum_array_update(Index, Val) ->\n  .\n\n-spec num_array_sum_range(Left :: integer(), Right :: integer()) -> integer().\nnum_array_sum_range(Left, Right) ->\n  .\n\n\n%% Your functions will be called as such:\n%% num_array_init_(Nums),\n%% num_array_update(Index, Val),\n%% Param_2 = num_array_sum_range(Left, Right),\n\n%% num_array_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule NumArray do\n  @spec init_(nums :: [integer]) :: any\n  def init_(nums) do\n\n  end\n\n  @spec update(index :: integer, val :: integer) :: any\n  def update(index, val) do\n\n  end\n\n  @spec sum_range(left :: integer, right :: integer) :: integer\n  def sum_range(left, right) do\n\n  end\nend\n\n# Your functions will be called as such:\n# NumArray.init_(nums)\n# NumArray.update(index, val)\n# param_2 = NumArray.sum_range(left, right)\n\n# NumArray.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "Given an integer array nums, handle multiple queries of the following types:\n\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\nAt most 3 * 104 calls will be made to update and sumRange.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]\n[[[1,3,5]],[0,2],[1,2],[0,2]]"
    ],
    "title": "Range Sum Query - Mutable",
    "topic_tags": ["Array", "Design", "Binary Indexed Tree", "Segment Tree"],
    "updated_at": 1695094211,
    "url": "https://leetcode.com/problems/range-sum-query-mutable/"
  },
  {
    "id": "406",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def reconstructQueue(self, people):\n        \"\"\"\n        :type people: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** reconstructQueue(int** people, int peopleSize, int* peopleColSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[][] ReconstructQueue(int[][] people) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} people\n * @return {number[][]}\n */\nvar reconstructQueue = function(people) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function reconstructQueue(people: number[][]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $people\n     * @return Integer[][]\n     */\n    function reconstructQueue($people) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func reconstructQueue(_ people: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun reconstructQueue(people: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> reconstructQueue(List<List<int>> people) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func reconstructQueue(people [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} people\n# @return {Integer[][]}\ndef reconstruct_queue(people)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn reconstruct_queue(people: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (reconstruct-queue people)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec reconstruct_queue(People :: [[integer()]]) -> [[integer()]].\nreconstruct_queue(People) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec reconstruct_queue(people :: [[integer]]) :: [[integer]]\n  def reconstruct_queue(people) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n \nExample 1:\n\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n\nExample 2:\n\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n\n \nConstraints:\n\n1 <= people.length <= 2000\n0 <= hi <= 106\n0 <= ki < people.length\nIt is guaranteed that the queue can be reconstructed.\n\n",
    "difficulty": "Medium",
    "hints": [
      "What can you say about the position of the shortest person? \r\nIf the position of the shortest person is i, how many people would be in front of the shortest person?",
      "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
      "[[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]"
    ],
    "title": "Queue Reconstruction by Height",
    "topic_tags": [
      "Array",
      "Greedy",
      "Binary Indexed Tree",
      "Segment Tree",
      "Sorting"
    ],
    "updated_at": 1695094317,
    "url": "https://leetcode.com/problems/queue-reconstruction-by-height/"
  },
  {
    "id": "193",
    "category": "Shell",
    "code_snippets": [
      {
        "lang": "Bash",
        "langSlug": "bash",
        "code": "# Read from the file file.txt and output all valid phone numbers to stdout.\n"
      }
    ],
    "description": "Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\nExample:\nAssume that file.txt has the following content:\n\n987-123-4567\n123 456 7890\n(123) 456-7890\n\nYour script should output the following valid phone numbers:\n\n987-123-4567\n(123) 456-7890\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["0"],
    "title": "Valid Phone Numbers",
    "topic_tags": ["Shell"],
    "updated_at": 1695094098,
    "url": "https://leetcode.com/problems/valid-phone-numbers/"
  },
  {
    "id": "195",
    "category": "Shell",
    "code_snippets": [
      {
        "lang": "Bash",
        "langSlug": "bash",
        "code": "# Read from the file file.txt and output the tenth line to stdout.\n"
      }
    ],
    "description": "Given a text file file.txt, print just the 10th line of the file.\nExample:\nAssume that file.txt has the following content:\n\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n\nYour script should output the tenth line, which is:\n\r\nLine 10\r\n\nNote:\r\n1. If the file contains less than 10 lines, what should you output?\r\n2. There's at least three different solutions. Try to explore all possibilities.\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10"
    ],
    "title": "Tenth Line",
    "topic_tags": ["Shell"],
    "updated_at": 1695094102,
    "url": "https://leetcode.com/problems/tenth-line/"
  },
  {
    "id": "192",
    "category": "Shell",
    "code_snippets": [
      {
        "lang": "Bash",
        "langSlug": "bash",
        "code": "# Read from the file words.txt and output the word frequency list to stdout.\n"
      }
    ],
    "description": "Write a bash script to calculate the frequency of each word in a text file words.txt.\nFor simplicity sake, you may assume:\n\nwords.txt contains only lowercase characters and space ' ' characters.\nEach word must consist of lowercase characters only.\nWords are separated by one or more whitespace characters.\n\nExample:\nAssume that words.txt has the following content:\n\nthe day is sunny the the\nthe sunny is is\n\nYour script should output the following, sorted by descending frequency:\n\nthe 4\nis 3\nsunny 2\nday 1\n\nNote:\n\nDon't worry about handling ties, it is guaranteed that each word's frequency count is unique.\nCould you write it in one-line using Unix pipes?\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["a"],
    "title": "Word Frequency",
    "topic_tags": ["Shell"],
    "updated_at": 1695094097,
    "url": "https://leetcode.com/problems/word-frequency/"
  },
  {
    "id": "194",
    "category": "Shell",
    "code_snippets": [
      {
        "lang": "Bash",
        "langSlug": "bash",
        "code": "# Read from the file file.txt and print its transposed content to stdout.\n"
      }
    ],
    "description": "Given a text file file.txt, transpose its content.\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.\nExample:\nIf file.txt has the following content:\n\nname age\nalice 21\nryan 30\n\nOutput the following:\n\nname alice ryan\nage 21 30\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["a"],
    "title": "Transpose File",
    "topic_tags": ["Shell"],
    "updated_at": 1695094101,
    "url": "https://leetcode.com/problems/transpose-file/"
  },
  {
    "id": "399",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def calcEquation(self, equations, values, queries):\n        \"\"\"\n        :type equations: List[List[str]]\n        :type values: List[float]\n        :type queries: List[List[str]]\n        :rtype: List[float]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* calcEquation(char *** equations, int equationsSize, int* equationsColSize, double* values, int valuesSize, char *** queries, int queriesSize, int* queriesColSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double[] CalcEquation(IList<IList<string>> equations, double[] values, IList<IList<string>> queries) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @param {string[][]} queries\n * @return {number[]}\n */\nvar calcEquation = function(equations, values, queries) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function calcEquation(equations: string[][], values: number[], queries: string[][]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $equations\n     * @param Float[] $values\n     * @param String[][] $queries\n     * @return Float[]\n     */\n    function calcEquation($equations, $values, $queries) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func calcEquation(_ equations: [[String]], _ values: [Double], _ queries: [[String]]) -> [Double] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun calcEquation(equations: List<List<String>>, values: DoubleArray, queries: List<List<String>>): DoubleArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<double> calcEquation(List<List<String>> equations, List<double> values, List<List<String>> queries) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func calcEquation(equations [][]string, values []float64, queries [][]string) []float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[][]} equations\n# @param {Float[]} values\n# @param {String[][]} queries\n# @return {Float[]}\ndef calc_equation(equations, values, queries)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def calcEquation(equations: List[List[String]], values: Array[Double], queries: List[List[String]]): Array[Double] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn calc_equation(equations: Vec<Vec<String>>, values: Vec<f64>, queries: Vec<Vec<String>>) -> Vec<f64> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (calc-equation equations values queries)\n  (-> (listof (listof string?)) (listof flonum?) (listof (listof string?)) (listof flonum?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec calc_equation(Equations :: [[unicode:unicode_binary()]], Values :: [float()], Queries :: [[unicode:unicode_binary()]]) -> [float()].\ncalc_equation(Equations, Values, Queries) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec calc_equation(equations :: [[String.t]], values :: [float], queries :: [[String.t]]) :: [float]\n  def calc_equation(equations, values, queries) do\n\n  end\nend"
      }
    ],
    "description": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\nNote: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\n \nExample 1:\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation: \nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined => -1.0\nExample 2:\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000,0.40000,5.00000,0.20000]\n\nExample 3:\n\nInput: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]\n\n \nConstraints:\n\n1 <= equations.length <= 20\nequations[i].length == 2\n1 <= Ai.length, Bi.length <= 5\nvalues.length == equations.length\n0.0 < values[i] <= 20.0\n1 <= queries.length <= 20\nqueries[i].length == 2\n1 <= Cj.length, Dj.length <= 5\nAi, Bi, Cj, Dj consist of lower case English letters and digits.\n\n",
    "difficulty": "Medium",
    "hints": ["Do you recognize this as a graph problem?"],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"a\",\"b\"],[\"b\",\"c\"]]\n[2.0,3.0]\n[[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
      "[[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]]\n[1.5,2.5,5.0]\n[[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
      "[[\"a\",\"b\"]]\n[0.5]\n[[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]"
    ],
    "title": "Evaluate Division",
    "topic_tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Shortest Path"
    ],
    "updated_at": 1695094307,
    "url": "https://leetcode.com/problems/evaluate-division/"
  },
  {
    "id": "744",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int networkDelayTime(int[][] times, int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def networkDelayTime(self, times, n, k):\n        \"\"\"\n        :type times: List[List[int]]\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int networkDelayTime(int** times, int timesSize, int* timesColSize, int n, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int NetworkDelayTime(int[][] times, int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} times\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar networkDelayTime = function(times, n, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function networkDelayTime(times: number[][], n: number, k: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $times\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function networkDelayTime($times, $n, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func networkDelayTime(_ times: [[Int]], _ n: Int, _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun networkDelayTime(times: Array<IntArray>, n: Int, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int networkDelayTime(List<List<int>> times, int n, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func networkDelayTime(times [][]int, n int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} times\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef network_delay_time(times, n, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def networkDelayTime(times: Array[Array[Int]], n: Int, k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn network_delay_time(times: Vec<Vec<i32>>, n: i32, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (network-delay-time times n k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec network_delay_time(Times :: [[integer()]], N :: integer(), K :: integer()) -> integer().\nnetwork_delay_time(Times, N, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec network_delay_time(times :: [[integer]], n :: integer, k :: integer) :: integer\n  def network_delay_time(times, n, k) do\n\n  end\nend"
      }
    ],
    "description": "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\n \nExample 1:\n\n\nInput: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\nOutput: 2\n\nExample 2:\n\nInput: times = [[1,2,1]], n = 2, k = 1\nOutput: 1\n\nExample 3:\n\nInput: times = [[1,2,1]], n = 2, k = 2\nOutput: -1\n\n \nConstraints:\n\n1 <= k <= n <= 100\n1 <= times.length <= 6000\ntimes[i].length == 3\n1 <= ui, vi <= n\nui != vi\n0 <= wi <= 100\nAll the pairs (ui, vi) are unique. (i.e., no multiple edges.)\n\n",
    "difficulty": "Medium",
    "hints": [
      "We visit each node at some time, and if that time is better than the fastest time we've reached this node, we travel along outgoing edges in sorted order.  Alternatively, we could use Dijkstra's algorithm."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[2,1,1],[2,3,1],[3,4,1]]\n4\n2",
      "[[1,2,1]]\n2\n1",
      "[[1,2,1]]\n2\n2"
    ],
    "title": "Network Delay Time",
    "topic_tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "updated_at": 1695094671,
    "url": "https://leetcode.com/problems/network-delay-time/"
  },
  {
    "id": "67",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * addBinary(char * a, char * b){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function addBinary(a: string, b: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String addBinary(String a, String b) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func addBinary(a string, b string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (add-binary a b)\n  (-> string? string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n\n  end\nend"
      }
    ],
    "description": "Given two binary strings a and b, return their sum as a binary string.\n \nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\n \nConstraints:\n\n1 <= a.length, b.length <= 104\na and b consist only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"11\"\n\"1\"", "\"1010\"\n\"1011\""],
    "title": "Add Binary",
    "topic_tags": ["Math", "String", "Bit Manipulation", "Simulation"],
    "updated_at": 1695019007,
    "url": "https://leetcode.com/problems/add-binary/"
  },
  {
    "id": "258",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int addDigits(int num) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int addDigits(int num) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def addDigits(self, num: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int addDigits(int num){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int AddDigits(int num) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function addDigits(num: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function addDigits($num) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func addDigits(_ num: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun addDigits(num: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int addDigits(int num) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func addDigits(num int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num\n# @return {Integer}\ndef add_digits(num)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def addDigits(num: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn add_digits(num: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (add-digits num)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec add_digits(Num :: integer()) -> integer().\nadd_digits(Num) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec add_digits(num :: integer) :: integer\n  def add_digits(num) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n \nExample 1:\n\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.\n\nExample 2:\n\nInput: num = 0\nOutput: 0\n\n \nConstraints:\n\n0 <= num <= 231 - 1\n\n \nFollow up: Could you do it without any loop/recursion in O(1) runtime?\n",
    "difficulty": "Easy",
    "hints": [
      "A naive implementation of the above process is trivial. Could you come up with other methods?",
      "What are all the possible results?",
      "How do they occur, periodically or randomly?",
      "You may find this Wikipedia article useful."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["38", "0"],
    "title": "Add Digits",
    "topic_tags": ["Math", "Simulation", "Number Theory"],
    "updated_at": 1695094173,
    "url": "https://leetcode.com/problems/add-digits/"
  },
  {
    "id": "68",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** fullJustify(char ** words, int wordsSize, int maxWidth, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FullJustify(string[] words, int maxWidth) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function fullJustify(words: string[], maxWidth: number): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun fullJustify(words: Array<String>, maxWidth: Int): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> fullJustify(List<String> words, int maxWidth) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func fullJustify(words []string, maxWidth int) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn full_justify(words: Vec<String>, max_width: i32) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (full-justify words maxWidth)\n  (-> (listof string?) exact-integer? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -> [unicode:unicode_binary()].\nfull_justify(Words, MaxWidth) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\n  def full_justify(words, max_width) do\n\n  end\nend"
      }
    ],
    "description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\nNote:\n\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.\n\n \nExample 1:\n\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput:\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\nExample 2:\n\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput:\n[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\nExample 3:\n\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\nOutput:\n[\n  \"Science  is  what we\",\n  \"understand      well\",\n  \"enough to explain to\",\n  \"a  computer.  Art is\",\n  \"everything  else  we\",\n  \"do                  \"\n]\n \nConstraints:\n\n1 <= words.length <= 300\n1 <= words[i].length <= 20\nwords[i] consists of only English letters and symbols.\n1 <= maxWidth <= 100\nwords[i].length <= maxWidth\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16",
      "[\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n16",
      "[\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n20"
    ],
    "title": "Text Justification",
    "topic_tags": ["Array", "String", "Simulation"],
    "updated_at": 1695019008,
    "url": "https://leetcode.com/problems/text-justification/"
  },
  {
    "id": "750",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int containVirus(vector<vector<int>>& isInfected) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int containVirus(int[][] isInfected) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def containVirus(self, isInfected: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int containVirus(int** isInfected, int isInfectedSize, int* isInfectedColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ContainVirus(int[][] isInfected) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} isInfected\n * @return {number}\n */\nvar containVirus = function(isInfected) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function containVirus(isInfected: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $isInfected\n     * @return Integer\n     */\n    function containVirus($isInfected) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func containVirus(_ isInfected: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun containVirus(isInfected: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int containVirus(List<List<int>> isInfected) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func containVirus(isInfected [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} is_infected\n# @return {Integer}\ndef contain_virus(is_infected)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def containVirus(isInfected: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn contain_virus(is_infected: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (contain-virus isInfected)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec contain_virus(IsInfected :: [[integer()]]) -> integer().\ncontain_virus(IsInfected) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec contain_virus(is_infected :: [[integer]]) :: integer\n  def contain_virus(is_infected) do\n\n  end\nend"
      }
    ],
    "description": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\nReturn the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.\n \nExample 1:\n\n\nInput: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\nOutput: 10\nExplanation: There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n\n\nExample 2:\n\n\nInput: isInfected = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 4\nExplanation: Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells.\n\nExample 3:\n\nInput: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\nOutput: 13\nExplanation: The region on the left only builds two new walls.\n\n \nConstraints:\n\nm == isInfected.length\nn == isInfected[i].length\n1 <= m, n <= 50\nisInfected[i][j] is either 0 or 1.\nThere is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.\n\n",
    "difficulty": "Hard",
    "hints": [
      "The implementation is long - we want to perfrom the following steps:\r\n\r\n* Find all viral regions (connected components), additionally for each region keeping track of the frontier (neighboring uncontaminated cells), and the perimeter of the region.\r\n\r\n* Disinfect the most viral region, adding it's perimeter to the answer.\r\n\r\n* Spread the virus in the remaining regions outward by 1 square."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]",
      "[[1,1,1],[1,0,1],[1,1,1]]",
      "[[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]"
    ],
    "title": "Contain Virus",
    "topic_tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Simulation"
    ],
    "updated_at": 1695094680,
    "url": "https://leetcode.com/problems/contain-virus/"
  },
  {
    "id": "43",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string multiply(string num1, string num2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String multiply(String num1, String num2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * multiply(char * num1, char * num2){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string Multiply(string num1, string num2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function multiply(num1: string, num2: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun multiply(num1: String, num2: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String multiply(String num1, String num2) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func multiply(num1 string, num2 string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def multiply(num1: String, num2: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (multiply num1 num2)\n  (-> string? string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmultiply(Num1, Num2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\n  def multiply(num1, num2) do\n\n  end\nend"
      }
    ],
    "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n \nExample 1:\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\nExample 2:\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n \nConstraints:\n\n1 <= num1.length, num2.length <= 200\nnum1 and num2 consist of digits only.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"2\"\n\"3\"", "\"123\"\n\"456\""],
    "title": "Multiply Strings",
    "topic_tags": ["Math", "String", "Simulation"],
    "updated_at": 1695018989,
    "url": "https://leetcode.com/problems/multiply-strings/"
  },
  {
    "id": "54",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> SpiralOrder(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function spiralOrder(matrix: number[][]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function spiralOrder($matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> spiralOrder(List<List<int>> matrix) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func spiralOrder(matrix [][]int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef spiral_order(matrix)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (spiral-order matrix)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\nspiral_order(Matrix) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\n  def spiral_order(matrix) do\n\n  end\nend"
      }
    ],
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order.\n \nExample 1:\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nExample 2:\n\n\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 10\n-100 <= matrix[i][j] <= 100\n\n",
    "difficulty": "Medium",
    "hints": [
      "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
      "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column, and then we move inwards by 1 and repeat. That's all. That is all the simulation that we need.",
      "Think about when you want to switch the progress on one of the indexes. If you progress on i out of [i, j], you'll shift in the same column. Similarly, by changing values for j, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to simulate edge cases like a single column or a single row to see if anything breaks or not."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[1,2,3],[4,5,6],[7,8,9]]",
      "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]"
    ],
    "title": "Spiral Matrix",
    "topic_tags": ["Array", "Matrix", "Simulation"],
    "updated_at": 1695018997,
    "url": "https://leetcode.com/problems/spiral-matrix/"
  },
  {
    "id": "219",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool containsNearbyDuplicate(int* nums, int numsSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function containsNearbyDuplicate(nums: number[], k: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsNearbyDuplicate($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun containsNearbyDuplicate(nums: IntArray, k: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool containsNearbyDuplicate(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func containsNearbyDuplicate(nums []int, k int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef contains_nearby_duplicate(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn contains_nearby_duplicate(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (contains-nearby-duplicate nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec contains_nearby_duplicate(Nums :: [integer()], K :: integer()) -> boolean().\ncontains_nearby_duplicate(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec contains_nearby_duplicate(nums :: [integer], k :: integer) :: boolean\n  def contains_nearby_duplicate(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n \nExample 1:\n\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n\nExample 2:\n\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n\nExample 3:\n\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-109 <= nums[i] <= 109\n0 <= k <= 105\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,1]\n3", "[1,0,1,1]\n1", "[1,2,3,1,2,3]\n2"],
    "title": "Contains Duplicate II",
    "topic_tags": ["Array", "Hash Table", "Sliding Window"],
    "updated_at": 1695094135,
    "url": "https://leetcode.com/problems/contains-duplicate-ii/"
  },
  {
    "id": "643",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double findMaxAverage(int* nums, int numsSize, int k){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findMaxAverage(nums: number[], k: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double findMaxAverage(List<int> nums, int k) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findMaxAverage(nums []int, k int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_max_average(nums: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-max-average nums k)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_max_average(Nums :: [integer()], K :: integer()) -> float().\nfind_max_average(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_max_average(nums :: [integer], k :: integer) :: float\n  def find_max_average(nums, k) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n \nExample 1:\n\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n\nExample 2:\n\nInput: nums = [5], k = 1\nOutput: 5.00000\n\n \nConstraints:\n\nn == nums.length\n1 <= k <= n <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,12,-5,-6,50,3]\n4", "[5]\n1"],
    "title": "Maximum Average Subarray I",
    "topic_tags": ["Array", "Sliding Window"],
    "updated_at": 1695094563,
    "url": "https://leetcode.com/problems/maximum-average-subarray-i/"
  },
  {
    "id": "30",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findSubstring(s: string, words: string[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> findSubstring(String s, List<String> words) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findSubstring(s string, words []string) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-substring s words)\n  (-> string? (listof string?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\nfind_substring(S, Words) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n\n  end\nend"
      }
    ],
    "description": "You are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n\nReturn the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n \nExample 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n\nExample 3:\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n\n \nConstraints:\n\n1 <= s.length <= 104\n1 <= words.length <= 5000\n1 <= words[i].length <= 30\ns and words[i] consist of lowercase English letters.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]",
      "\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]",
      "\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]"
    ],
    "title": "Substring with Concatenation of All Words",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695018981,
    "url": "https://leetcode.com/problems/substring-with-concatenation-of-all-words/"
  },
  {
    "id": "76",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * minWindow(char * s, char * t){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minWindow(s: string, t: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String minWindow(String s, String t) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minWindow(s string, t string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-window s t)\n  (-> string? string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n\n  end\nend"
      }
    ],
    "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\n \nExample 1:\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n\n \nConstraints:\n\nm == s.length\nn == t.length\n1 <= m, n <= 105\ns and t consist of uppercase and lowercase English letters.\n\n \nFollow up: Could you find an algorithm that runs in O(m + n) time?\n",
    "difficulty": "Hard",
    "hints": [
      "Use two pointers to create a window of letters in s, which would have all the characters from t.",
      "Expand the right pointer until all the characters of t are covered.",
      "Once all the characters are covered, move the left pointer and ensure that all the characters are still covered to minimize the subarray size.",
      "Continue expanding the right and left pointers until you reach the end of s."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"ADOBECODEBANC\"\n\"ABC\"",
      "\"a\"\n\"a\"",
      "\"a\"\n\"aa\""
    ],
    "title": "Minimum Window Substring",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695019432,
    "url": "https://leetcode.com/problems/minimum-window-substring/"
  },
  {
    "id": "3",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int lengthOfLongestSubstring(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function lengthOfLongestSubstring(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n \nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"abcabcbb\"", "\"bbbbb\"", "\"pwwkew\""],
    "title": "Longest Substring Without Repeating Characters",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695017042,
    "url": "https://leetcode.com/problems/longest-substring-without-repeating-characters/"
  },
  {
    "id": "187",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findRepeatedDnaSequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findRepeatedDnaSequences(char * s, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar findRepeatedDnaSequences = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findRepeatedDnaSequences(s: string): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function findRepeatedDnaSequences($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findRepeatedDnaSequences(_ s: String) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findRepeatedDnaSequences(s: String): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findRepeatedDnaSequences(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findRepeatedDnaSequences(s string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String[]}\ndef find_repeated_dna_sequences(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findRepeatedDnaSequences(s: String): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_repeated_dna_sequences(s: String) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-repeated-dna-sequences s)\n  (-> string? (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_repeated_dna_sequences(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nfind_repeated_dna_sequences(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_repeated_dna_sequences(s :: String.t) :: [String.t]\n  def find_repeated_dna_sequences(s) do\n\n  end\nend"
      }
    ],
    "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, \"ACGAATTCCG\" is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n \nExample 1:\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\nExample 2:\nInput: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n\n \nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'A', 'C', 'G', or 'T'.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"", "\"AAAAAAAAAAAAA\""],
    "title": "Repeated DNA Sequences",
    "topic_tags": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "updated_at": 1695094090,
    "url": "https://leetcode.com/problems/repeated-dna-sequences/"
  },
  {
    "id": "88",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer $m\n     * @param Integer[] $nums2\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(&$nums1, $m, $nums2, $n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void merge(List<int> nums1, int m, List<int> nums2, int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums1\n# @param {Integer} m\n# @param {Integer[]} nums2\n# @param {Integer} n\n# @return {Void} Do not return anything, modify nums1 in-place instead.\ndef merge(nums1, m, nums2, n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (merge nums1 m nums2 n)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?) exact-integer? void?)\n\n  )"
      }
    ],
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n \nExample 1:\n\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n\nExample 2:\n\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n\nExample 3:\n\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\n \nConstraints:\n\nnums1.length == m + n\nnums2.length == n\n0 <= m, n <= 200\n1 <= m + n <= 200\n-109 <= nums1[i], nums2[j] <= 109\n\n \nFollow up: Can you come up with an algorithm that runs in O(m + n) time?\n",
    "difficulty": "Easy",
    "hints": [
      "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
      "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[1,2,3,0,0,0]\n3\n[2,5,6]\n3",
      "[1]\n1\n[]\n0",
      "[0]\n0\n[1]\n1"
    ],
    "title": "Merge Sorted Array",
    "topic_tags": ["Array", "Two Pointers", "Sorting"],
    "updated_at": 1695019442,
    "url": "https://leetcode.com/problems/merge-sorted-array/"
  },
  {
    "id": "169",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int majorityElement(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function majorityElement(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int majorityElement(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func majorityElement(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (majority-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec majority_element(Nums :: [integer()]) -> integer().\nmajority_element(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n \nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,3]", "[2,2,1,1,1,2,2]"],
    "title": "Majority Element",
    "topic_tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Counting"
    ],
    "updated_at": 1695019671,
    "url": "https://leetcode.com/problems/majority-element/"
  },
  {
    "id": "164",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maximumGap(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maximumGap(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaximumGap(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumGap = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maximumGap(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumGap($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maximumGap(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maximumGap(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maximumGap(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maximumGap(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_gap(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maximumGap(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn maximum_gap(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (maximum-gap nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec maximum_gap(Nums :: [integer()]) -> integer().\nmaximum_gap(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec maximum_gap(nums :: [integer]) :: integer\n  def maximum_gap(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\n \nExample 1:\n\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n\nExample 2:\n\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,6,9,1]", "[10]"],
    "title": "Maximum Gap",
    "topic_tags": ["Array", "Sorting", "Bucket Sort", "Radix Sort"],
    "updated_at": 1695019666,
    "url": "https://leetcode.com/problems/maximum-gap/"
  },
  {
    "id": "220",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff, int valueDiff) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool containsNearbyAlmostDuplicate(int* nums, int numsSize, int indexDiff, int valueDiff){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool ContainsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} indexDiff\n * @param {number} valueDiff\n * @return {boolean}\n */\nvar containsNearbyAlmostDuplicate = function(nums, indexDiff, valueDiff) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function containsNearbyAlmostDuplicate(nums: number[], indexDiff: number, valueDiff: number): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $indexDiff\n     * @param Integer $valueDiff\n     * @return Boolean\n     */\n    function containsNearbyAlmostDuplicate($nums, $indexDiff, $valueDiff) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func containsNearbyAlmostDuplicate(_ nums: [Int], _ indexDiff: Int, _ valueDiff: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun containsNearbyAlmostDuplicate(nums: IntArray, indexDiff: Int, valueDiff: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool containsNearbyAlmostDuplicate(List<int> nums, int indexDiff, int valueDiff) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func containsNearbyAlmostDuplicate(nums []int, indexDiff int, valueDiff int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} index_diff\n# @param {Integer} value_diff\n# @return {Boolean}\ndef contains_nearby_almost_duplicate(nums, index_diff, value_diff)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def containsNearbyAlmostDuplicate(nums: Array[Int], indexDiff: Int, valueDiff: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn contains_nearby_almost_duplicate(nums: Vec<i32>, index_diff: i32, value_diff: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (contains-nearby-almost-duplicate nums indexDiff valueDiff)\n  (-> (listof exact-integer?) exact-integer? exact-integer? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec contains_nearby_almost_duplicate(Nums :: [integer()], IndexDiff :: integer(), ValueDiff :: integer()) -> boolean().\ncontains_nearby_almost_duplicate(Nums, IndexDiff, ValueDiff) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec contains_nearby_almost_duplicate(nums :: [integer], index_diff :: integer, value_diff :: integer) :: boolean\n  def contains_nearby_almost_duplicate(nums, index_diff, value_diff) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n\ni != j,\nabs(i - j) <= indexDiff.\nabs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n \nExample 1:\n\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n\nExample 2:\n\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n \nConstraints:\n\n2 <= nums.length <= 105\n-109 <= nums[i] <= 109\n1 <= indexDiff <= nums.length\n0 <= valueDiff <= 109\n\n",
    "difficulty": "Hard",
    "hints": [
      "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
      "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,1]\n3\n0", "[1,5,9,1,5,9]\n2\n3"],
    "title": "Contains Duplicate III",
    "topic_tags": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "updated_at": 1695094137,
    "url": "https://leetcode.com/problems/contains-duplicate-iii/"
  },
  {
    "id": "15",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function threeSum(nums: number[]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func threeSum(nums []int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n \nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n \nConstraints:\n\n3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n",
    "difficulty": "Medium",
    "hints": [
      "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
      "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
      "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-1,0,1,2,-1,-4]", "[0,1,1]", "[0,0,0]"],
    "title": "3Sum",
    "topic_tags": ["Array", "Two Pointers", "Sorting"],
    "updated_at": 1695017105,
    "url": "https://leetcode.com/problems/3sum/"
  },
  {
    "id": "16",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int threeSumClosest(int* nums, int numsSize, int target){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int ThreeSumClosest(int[] nums, int target) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function threeSumClosest(nums: number[], target: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumClosest($nums, $target) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func threeSumClosest(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int threeSumClosest(List<int> nums, int target) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func threeSumClosest(nums []int, target int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_closest(nums, target)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def threeSumClosest(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn three_sum_closest(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (three-sum-closest nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec three_sum_closest(Nums :: [integer()], Target :: integer()) -> integer().\nthree_sum_closest(Nums, Target) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec three_sum_closest(nums :: [integer], target :: integer) :: integer\n  def three_sum_closest(nums, target) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.\n \nExample 1:\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\nExample 2:\n\nInput: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n\n \nConstraints:\n\n3 <= nums.length <= 500\n-1000 <= nums[i] <= 1000\n-104 <= target <= 104\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-1,2,1,-4]\n1", "[0,0,0]\n1"],
    "title": "3Sum Closest",
    "topic_tags": ["Array", "Two Pointers", "Sorting"],
    "updated_at": 1695017106,
    "url": "https://leetcode.com/problems/3sum-closest/"
  },
  {
    "id": "20",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isValid(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isValid(s: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isValid(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isValid(s string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-valid s)\n  (-> string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.\n\n \nExample 1:\n\nInput: s = \"()\"\nOutput: true\n\nExample 2:\n\nInput: s = \"()[]{}\"\nOutput: true\n\nExample 3:\n\nInput: s = \"(]\"\nOutput: false\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of parentheses only '()[]{}'.\n\n",
    "difficulty": "Easy",
    "hints": [
      "Use a stack of characters.",
      "When you encounter an opening bracket, push it to the top of the stack.",
      "When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"()\"", "\"()[]{}\"", "\"(]\""],
    "title": "Valid Parentheses",
    "topic_tags": ["String", "Stack"],
    "updated_at": 1695017112,
    "url": "https://leetcode.com/problems/valid-parentheses/"
  },
  {
    "id": "94",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n \nExample 1:\n\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n \nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,null,2,3]", "[]", "[1]"],
    "title": "Binary Tree Inorder Traversal",
    "topic_tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/binary-tree-inorder-traversal/"
  },
  {
    "id": "32",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestValidParentheses(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestValidParentheses(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestValidParentheses(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestValidParentheses(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n \nExample 1:\n\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n\nExample 2:\n\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n\nExample 3:\n\nInput: s = \"\"\nOutput: 0\n\n \nConstraints:\n\n0 <= s.length <= 3 * 104\ns[i] is '(', or ')'.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"(()\"", "\")()())\"", "\"\""],
    "title": "Longest Valid Parentheses",
    "topic_tags": ["String", "Dynamic Programming", "Stack"],
    "updated_at": 1695018982,
    "url": "https://leetcode.com/problems/longest-valid-parentheses/"
  },
  {
    "id": "42",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int trap(int* height, int heightSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function trap(height: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int trap(List<int> height) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func trap(height []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n\n  end\nend"
      }
    ],
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n \nExample 1:\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n \nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[0,1,0,2,1,0,1,3,2,1,2,1]", "[4,2,0,3,2,5]"],
    "title": "Trapping Rain Water",
    "topic_tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "updated_at": 1695018988,
    "url": "https://leetcode.com/problems/trapping-rain-water/"
  },
  {
    "id": "71",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * simplifyPath(char * path){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function simplifyPath(path: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func simplifyPath(_ path: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String simplifyPath(String path) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func simplifyPath(path string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn simplify_path(path: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (simplify-path path)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec simplify_path(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsimplify_path(Path) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec simplify_path(path :: String.t) :: String.t\n  def simplify_path(path) do\n\n  end\nend"
      }
    ],
    "description": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\nThe canonical path should have the following format:\n\nThe path starts with a single slash '/'.\nAny two directories are separated by a single slash '/'.\nThe path does not end with a trailing '/'.\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n\nReturn the simplified canonical path.\n \nExample 1:\n\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.\n\nExample 2:\n\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n\nExample 3:\n\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n\n \nConstraints:\n\n1 <= path.length <= 3000\npath consists of English letters, digits, period '.', slash '/' or '_'.\npath is a valid absolute Unix path.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"/home/\"", "\"/../\"", "\"/home//foo/\""],
    "title": "Simplify Path",
    "topic_tags": ["String", "Stack"],
    "updated_at": 1695019428,
    "url": "https://leetcode.com/problems/simplify-path/"
  },
  {
    "id": "114",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def flatten(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nvoid flatten(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public void Flatten(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar flatten = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/**\n Do not return anything, modify root in-place instead.\n */\nfunction flatten(root: TreeNode | null): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return NULL\n     */\n    function flatten($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func flatten(_ root: TreeNode?) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun flatten(root: TreeNode?): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  void flatten(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc flatten(root *TreeNode)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Void} Do not return anything, modify root in-place instead.\ndef flatten(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def flatten(root: TreeNode): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn flatten(root: &mut Option<Rc<RefCell<TreeNode>>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (flatten root)\n  (-> (or/c tree-node? #f) void?)\n\n  )"
      }
    ],
    "description": "Given the root of a binary tree, flatten the tree into a \"linked list\":\n\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n\n \nExample 1:\n\n\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [0]\nOutput: [0]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\n\n \nFollow up: Can you flatten the tree in-place (with O(1) extra space)?",
    "difficulty": "Medium",
    "hints": [
      "If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,5,3,4,null,6]", "[]", "[0]"],
    "title": "Flatten Binary Tree to Linked List",
    "topic_tags": [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019461,
    "url": "https://leetcode.com/problems/flatten-binary-tree-to-linked-list/"
  },
  {
    "id": "13",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int romanToInt(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function romanToInt(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int romanToInt(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func romanToInt(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n\n  end\nend"
      }
    ],
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n \nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\nExample 3:\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n \nConstraints:\n\n1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\n\n",
    "difficulty": "Easy",
    "hints": [
      "Problem is simpler to solve by working the string from back to front and using a map."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"III\"", "\"LVIII\"", "\"MCMXCIV\""],
    "title": "Roman to Integer",
    "topic_tags": ["Hash Table", "Math", "String"],
    "updated_at": 1695017102,
    "url": "https://leetcode.com/problems/roman-to-integer/"
  },
  {
    "id": "14",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * longestCommonPrefix(char ** strs, int strsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestCommonPrefix(strs: string[]): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String longestCommonPrefix(List<String> strs) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestCommonPrefix(strs []string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n\n  end\nend"
      }
    ],
    "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n \nExample 1:\n\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\n\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n \nConstraints:\n\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"flower\",\"flow\",\"flight\"]",
      "[\"dog\",\"racecar\",\"car\"]"
    ],
    "title": "Longest Common Prefix",
    "topic_tags": ["String", "Trie"],
    "updated_at": 1695017103,
    "url": "https://leetcode.com/problems/longest-common-prefix/"
  },
  {
    "id": "10",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool isMatch(char * s, char * p){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function isMatch(s: string, p: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool isMatch(String s, String p) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func isMatch(s string, p string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n\n  end\nend"
      }
    ],
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n'.' Matches any single character.​​​​\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n \nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\nExample 3:\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n \nConstraints:\n\n1 <= s.length <= 20\n1 <= p.length <= 20\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and '*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aa\"\n\"a\"", "\"aa\"\n\"a*\"", "\"ab\"\n\".*\""],
    "title": "Regular Expression Matching",
    "topic_tags": ["String", "Dynamic Programming", "Recursion"],
    "updated_at": 1695017051,
    "url": "https://leetcode.com/problems/regular-expression-matching/"
  },
  {
    "id": "30",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findSubstring(s: string, words: string[]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> findSubstring(String s, List<String> words) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findSubstring(s string, words []string) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-substring s words)\n  (-> string? (listof string?) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\nfind_substring(S, Words) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n\n  end\nend"
      }
    ],
    "description": "You are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n\nReturn the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n \nExample 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n\nExample 3:\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n\n \nConstraints:\n\n1 <= s.length <= 104\n1 <= words.length <= 5000\n1 <= words[i].length <= 30\ns and words[i] consist of lowercase English letters.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]",
      "\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]",
      "\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]"
    ],
    "title": "Substring with Concatenation of All Words",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695018981,
    "url": "https://leetcode.com/problems/substring-with-concatenation-of-all-words/"
  },
  {
    "id": "3",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int lengthOfLongestSubstring(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function lengthOfLongestSubstring(s: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n \nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"abcabcbb\"", "\"bbbbb\"", "\"pwwkew\""],
    "title": "Longest Substring Without Repeating Characters",
    "topic_tags": ["Hash Table", "String", "Sliding Window"],
    "updated_at": 1695017042,
    "url": "https://leetcode.com/problems/longest-substring-without-repeating-characters/"
  },
  {
    "id": "5",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * longestPalindrome(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestPalindrome(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String longestPalindrome(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestPalindrome(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-palindrome s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, return the longest palindromic substring in s.\n \nExample 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consist of only digits and English letters.\n\n",
    "difficulty": "Medium",
    "hints": [
      "How can we reuse a previously computed palindrome to compute a larger palindrome?",
      "If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?",
      "Complexity based hint:\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"babad\"", "\"cbbd\""],
    "title": "Longest Palindromic Substring",
    "topic_tags": ["String", "Dynamic Programming"],
    "updated_at": 1695017045,
    "url": "https://leetcode.com/problems/longest-palindromic-substring/"
  },
  {
    "id": "28",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int strStr(char * haystack, char * needle){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function strStr(haystack: string, needle: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int strStr(String haystack, String needle) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func strStr(haystack string, needle string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n\n  end\nend"
      }
    ],
    "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n \nExample 1:\n\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\nExample 2:\n\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n \nConstraints:\n\n1 <= haystack.length, needle.length <= 104\nhaystack and needle consist of only lowercase English characters.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"sadbutsad\"\n\"sad\"", "\"leetcode\"\n\"leeto\""],
    "title": "Find the Index of the First Occurrence in a String",
    "topic_tags": ["Two Pointers", "String", "String Matching"],
    "updated_at": 1695018979,
    "url": "https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/"
  },
  {
    "id": "459",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean repeatedSubstringPattern(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool repeatedSubstringPattern(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool RepeatedSubstringPattern(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar repeatedSubstringPattern = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function repeatedSubstringPattern(s: string): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function repeatedSubstringPattern($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func repeatedSubstringPattern(_ s: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun repeatedSubstringPattern(s: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool repeatedSubstringPattern(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func repeatedSubstringPattern(s string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Boolean}\ndef repeated_substring_pattern(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def repeatedSubstringPattern(s: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn repeated_substring_pattern(s: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (repeated-substring-pattern s)\n  (-> string? boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec repeated_substring_pattern(S :: unicode:unicode_binary()) -> boolean().\nrepeated_substring_pattern(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec repeated_substring_pattern(s :: String.t) :: boolean\n  def repeated_substring_pattern(s) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n \nExample 1:\n\nInput: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.\n\nExample 2:\n\nInput: s = \"aba\"\nOutput: false\n\nExample 3:\n\nInput: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of lowercase English letters.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"abab\"", "\"aba\"", "\"abcabcabcabc\""],
    "title": "Repeated Substring Pattern",
    "topic_tags": ["String", "String Matching"],
    "updated_at": 1695094377,
    "url": "https://leetcode.com/problems/repeated-substring-pattern/"
  },
  {
    "id": "214",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string shortestPalindrome(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String shortestPalindrome(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * shortestPalindrome(char * s){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string ShortestPalindrome(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar shortestPalindrome = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function shortestPalindrome(s: string): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function shortestPalindrome($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func shortestPalindrome(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun shortestPalindrome(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String shortestPalindrome(String s) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func shortestPalindrome(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef shortest_palindrome(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def shortestPalindrome(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn shortest_palindrome(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (shortest-palindrome s)\n  (-> string? string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec shortest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nshortest_palindrome(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec shortest_palindrome(s :: String.t) :: String.t\n  def shortest_palindrome(s) do\n\n  end\nend"
      }
    ],
    "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\n \nExample 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\nExample 2:\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of lowercase English letters only.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"aacecaaa\"", "\"abcd\""],
    "title": "Shortest Palindrome",
    "topic_tags": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "updated_at": 1695094128,
    "url": "https://leetcode.com/problems/shortest-palindrome/"
  },
  {
    "id": "686",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int repeatedStringMatch(string a, string b) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int repeatedStringMatch(String a, String b) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def repeatedStringMatch(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int repeatedStringMatch(char * a, char * b){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RepeatedStringMatch(string a, string b) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar repeatedStringMatch = function(a, b) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function repeatedStringMatch(a: string, b: string): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return Integer\n     */\n    function repeatedStringMatch($a, $b) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func repeatedStringMatch(_ a: String, _ b: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun repeatedStringMatch(a: String, b: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int repeatedStringMatch(String a, String b) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func repeatedStringMatch(a string, b string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} a\n# @param {String} b\n# @return {Integer}\ndef repeated_string_match(a, b)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def repeatedStringMatch(a: String, b: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn repeated_string_match(a: String, b: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (repeated-string-match a b)\n  (-> string? string? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec repeated_string_match(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> integer().\nrepeated_string_match(A, B) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec repeated_string_match(a :: String.t, b :: String.t) :: integer\n  def repeated_string_match(a, b) do\n\n  end\nend"
      }
    ],
    "description": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\n \nExample 1:\n\nInput: a = \"abcd\", b = \"cdabcdab\"\nOutput: 3\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.\n\nExample 2:\n\nInput: a = \"a\", b = \"aa\"\nOutput: 2\n\n \nConstraints:\n\n1 <= a.length, b.length <= 104\na and b consist of lowercase English letters.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["\"abcd\"\n\"cdabcdab\"", "\"a\"\n\"aa\""],
    "title": "Repeated String Match",
    "topic_tags": ["String", "String Matching"],
    "updated_at": 1695094612,
    "url": "https://leetcode.com/problems/repeated-string-match/"
  },
  {
    "id": "329",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestIncreasingPath(int[][] matrix) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestIncreasingPath(matrix: number[][]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function longestIncreasingPath($matrix) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestIncreasingPath(matrix: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestIncreasingPath(List<List<int>> matrix) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestIncreasingPath(matrix [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef longest_increasing_path(matrix)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_increasing_path(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-increasing-path matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_increasing_path(Matrix :: [[integer()]]) -> integer().\nlongest_increasing_path(Matrix) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_increasing_path(matrix :: [[integer]]) :: integer\n  def longest_increasing_path(matrix) do\n\n  end\nend"
      }
    ],
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n \nExample 1:\n\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n\nExample 2:\n\n\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\nExample 3:\n\nInput: matrix = [[1]]\nOutput: 1\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 231 - 1\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[9,9,4],[6,6,8],[2,1,1]]",
      "[[3,4,5],[3,2,6],[2,2,1]]",
      "[[1]]"
    ],
    "title": "Longest Increasing Path in a Matrix",
    "topic_tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "updated_at": 1695094232,
    "url": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix/"
  },
  {
    "id": "207",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool CanFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {boolean}\n */\nvar canFinish = function(numCourses, prerequisites) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function canFinish(numCourses: number, prerequisites: number[][]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Boolean\n     */\n    function canFinish($numCourses, $prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun canFinish(numCourses: Int, prerequisites: Array<IntArray>): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool canFinish(int numCourses, List<List<int>> prerequisites) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func canFinish(numCourses int, prerequisites [][]int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Boolean}\ndef can_finish(num_courses, prerequisites)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (can-finish numCourses prerequisites)\n  (-> exact-integer? (listof (listof exact-integer?)) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec can_finish(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> boolean().\ncan_finish(NumCourses, Prerequisites) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec can_finish(num_courses :: integer, prerequisites :: [[integer]]) :: boolean\n  def can_finish(num_courses, prerequisites) do\n\n  end\nend"
      }
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn true if you can finish all courses. Otherwise, return false.\n \nExample 1:\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\n\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\n \nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= 5000\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nAll the pairs prerequisites[i] are unique.\n\n",
    "difficulty": "Medium",
    "hints": [
      "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
      "Topological Sort via DFS - A great tutorial explaining the basic concepts of Topological Sort.",
      "Topological sort could also be done via BFS."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["2\n[[1,0]]", "2\n[[1,0],[0,1]]"],
    "title": "Course Schedule",
    "topic_tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "updated_at": 1695094119,
    "url": "https://leetcode.com/problems/course-schedule/"
  },
  {
    "id": "210",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] FindOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findOrder(numCourses: number, prerequisites: number[][]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Integer[]\n     */\n    function findOrder($numCourses, $prerequisites) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findOrder(numCourses: Int, prerequisites: Array<IntArray>): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> findOrder(int numCourses, List<List<int>> prerequisites) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findOrder(numCourses int, prerequisites [][]int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Integer[]}\ndef find_order(num_courses, prerequisites)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_order(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-order numCourses prerequisites)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_order(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> [integer()].\nfind_order(NumCourses, Prerequisites) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_order(num_courses :: integer, prerequisites :: [[integer]]) :: [integer]\n  def find_order(num_courses, prerequisites) do\n\n  end\nend"
      }
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n \nExample 1:\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n\nExample 2:\n\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n\nExample 3:\n\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\n\n \nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= numCourses * (numCourses - 1)\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nai != bi\nAll the pairs [ai, bi] are distinct.\n\n",
    "difficulty": "Medium",
    "hints": [
      "This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
      "Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
      "Topological sort could also be done via BFS."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["2\n[[1,0]]", "4\n[[1,0],[2,0],[3,1],[3,2]]", "1\n[]"],
    "title": "Course Schedule II",
    "topic_tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "updated_at": 1695094123,
    "url": "https://leetcode.com/problems/course-schedule-ii/"
  },
  {
    "id": "94",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n\n  end\nend"
      }
    ],
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n \nExample 1:\n\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n \nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,null,2,3]", "[]", "[1]"],
    "title": "Binary Tree Inorder Traversal",
    "topic_tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/binary-tree-inorder-traversal/"
  },
  {
    "id": "100",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSameTree(struct TreeNode* p, struct TreeNode* q){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return Boolean\n     */\n    function isSameTree($p, $q) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSameTree(TreeNode? p, TreeNode? q) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {Boolean}\ndef is_same_tree(p, q)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-same-tree p q)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\nis_same_tree(P, Q) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\n  def is_same_tree(p, q) do\n\n  end\nend"
      }
    ],
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n \nExample 1:\n\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExample 2:\n\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExample 3:\n\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]\n[1,2,3]", "[1,2]\n[1,null,2]", "[1,2,1]\n[1,1,2]"],
    "title": "Same Tree",
    "topic_tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019451,
    "url": "https://leetcode.com/problems/same-tree/"
  },
  {
    "id": "124",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint maxPathSum(struct TreeNode* root){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int MaxPathSum(TreeNode root) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction maxPathSum(root: TreeNode | null): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function maxPathSum($root) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func maxPathSum(_ root: TreeNode?) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun maxPathSum(root: TreeNode?): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  int maxPathSum(TreeNode? root) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxPathSum(root *TreeNode) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef max_path_sum(root)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def maxPathSum(root: TreeNode): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (max-path-sum root)\n  (-> (or/c tree-node? #f) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\nmax_path_sum(Root) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\n  def max_path_sum(root) do\n\n  end\nend"
      }
    ],
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n \nExample 1:\n\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\nExample 2:\n\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3]", "[-10,9,20,null,null,15,7]"],
    "title": "Binary Tree Maximum Path Sum",
    "topic_tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "updated_at": 1695019638,
    "url": "https://leetcode.com/problems/binary-tree-maximum-path-sum/"
  },
  {
    "id": "297",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/** Encodes a tree to a single string. */\nchar* serialize(struct TreeNode* root) {\n    \n}\n\n/** Decodes your encoded data to tree. */\nstruct TreeNode* deserialize(char* data) {\n    \n}\n\n// Your functions will be called as such:\n// char* data = serialize(root);\n// deserialize(data);"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public string serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/*\n * Encodes a tree to a single string.\n */\nfunction serialize(root: TreeNode | null): string {\n\n};\n\n/*\n * Decodes your encoded data to tree.\n */\nfunction deserialize(data: string): TreeNode | null {\n\n};\n\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Codec {\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function serialize($root) {\n        \n    }\n  \n    /**\n     * @param String $data\n     * @return TreeNode\n     */\n    function deserialize($data) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $ser = Codec();\n * $deser = Codec();\n * $data = $ser->serialize($root);\n * $ans = $deser->deserialize($data);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Codec {\n    func serialize(_ root: TreeNode?) -> String {\n        \n    }\n    \n    func deserialize(_ data: String) -> TreeNode? {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// var ser = Codec()\n// var deser = Codec()\n// deser.deserialize(ser.serialize(root))"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Codec() {\n\t// Encodes a URL to a shortened URL.\n    fun serialize(root: TreeNode?): String {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = Codec()\n * var deser = Codec()\n * var data = ser.serialize(longUrl)\n * var ans = deser.deserialize(data)\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    \n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    \n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# Encodes a tree to a single string.\n#\n# @param {TreeNode} root\n# @return {string}\ndef serialize(root)\n    \nend\n\n# Decodes your encoded data to tree.\n#\n# @param {string} data\n# @return {TreeNode}\ndef deserialize(data)\n    \nend\n\n\n# Your functions will be called as such:\n# deserialize(serialize(data))"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nclass Codec {\n    // Encodes a list of strings to a single string.\n    def serialize(root: TreeNode): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def deserialize(data: String): TreeNode = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = new Codec()\n * var deser = new Codec()\n * val s = ser.serialize(root)\n * val ans = deser.deserialize(s)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nstruct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n\t\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let data: String = obj.serialize(strs);\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\n */"
      }
    ],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n \nExample 1:\n\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,2,3,null,null,4,5]", "[]"],
    "title": "Serialize and Deserialize Binary Tree",
    "topic_tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "updated_at": 1695094202,
    "url": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"
  },
  {
    "id": "95",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction generateTrees(n: number): Array<TreeNode | null> {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<TreeNode?> generateTrees(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (generate-trees n)\n  (-> exact-integer? (listof (or/c tree-node? #f)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec generate_trees(N :: integer()) -> [#tree_node{} | null].\ngenerate_trees(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec generate_trees(n :: integer) :: [TreeNode.t | nil]\n  def generate_trees(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n \nExample 1:\n\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Unique Binary Search Trees II",
    "topic_tags": [
      "Dynamic Programming",
      "Backtracking",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019447,
    "url": "https://leetcode.com/problems/unique-binary-search-trees-ii/"
  },
  {
    "id": "96",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int numTrees(int n) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int numTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def numTrees(self, n: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int numTrees(int n){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int NumTrees(int n) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function numTrees(n: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun numTrees(n: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int numTrees(int n) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func numTrees(n int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n \nExample 1:\n\n\nInput: n = 3\nOutput: 5\n\nExample 2:\n\nInput: n = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= n <= 19\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["3", "1"],
    "title": "Unique Binary Search Trees",
    "topic_tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "updated_at": 1695019448,
    "url": "https://leetcode.com/problems/unique-binary-search-trees/"
  },
  {
    "id": "14",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char * longestCommonPrefix(char ** strs, int strsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestCommonPrefix(strs: string[]): string {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String longestCommonPrefix(List<String> strs) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestCommonPrefix(strs []string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n\n  end\nend"
      }
    ],
    "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n \nExample 1:\n\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\n\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n \nConstraints:\n\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.\n\n",
    "difficulty": "Easy",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"flower\",\"flow\",\"flight\"]",
      "[\"dog\",\"racecar\",\"car\"]"
    ],
    "title": "Longest Common Prefix",
    "topic_tags": ["String", "Trie"],
    "updated_at": 1695017103,
    "url": "https://leetcode.com/problems/longest-common-prefix/"
  },
  {
    "id": "140",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** wordBreak(char * s, char ** wordDict, int wordDictSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function wordBreak(s: string, wordDict: string[]): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return String[]\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> wordBreak(String s, List<String> wordDict) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func wordBreak(s string, wordDict []string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} word_dict\n# @return {String[]}\ndef word_break(s, word_dict)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (word-break s wordDict)\n  (-> string? (listof string?) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nword_break(S, WordDict) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: [String.t]\n  def word_break(s, word_dict) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n \nExample 1:\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\nExample 2:\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n \nConstraints:\n\n1 <= s.length <= 20\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 10\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\nInput is generated in a way that the length of the answer doesn't exceed 105.\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
      "\"pineapplepenapple\"\n[\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
      "\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
    ],
    "title": "Word Break II",
    "topic_tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Trie",
      "Memoization"
    ],
    "updated_at": 1695019649,
    "url": "https://leetcode.com/problems/word-break-ii/"
  },
  {
    "id": "212",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<String> findWords(char[][] board, String[] words) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findWords(char** board, int boardSize, int* boardColSize, char ** words, int wordsSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<string> FindWords(char[][] board, string[] words) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(board, words) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findWords(board: string[][], words: string[]): string[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String[] $words\n     * @return String[]\n     */\n    function findWords($board, $words) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findWords(board: Array<CharArray>, words: Array<String>): List<String> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<String> findWords(List<List<String>> board, List<String> words) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findWords(board [][]byte, words []string) []string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @param {String[]} words\n# @return {String[]}\ndef find_words(board, words)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_words(board: Vec<Vec<char>>, words: Vec<String>) -> Vec<String> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-words board words)\n  (-> (listof (listof char?)) (listof string?) (listof string?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_words(Board :: [[char()]], Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nfind_words(Board, Words) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_words(board :: [[char]], words :: [String.t]) :: [String.t]\n  def find_words(board, words) do\n\n  end\nend"
      }
    ],
    "description": "Given an m x n board of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n \nExample 1:\n\n\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]\n\nExample 2:\n\n\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n\n \nConstraints:\n\nm == board.length\nn == board[i].length\n1 <= m, n <= 12\nboard[i][j] is a lowercase English letter.\n1 <= words.length <= 3 * 104\n1 <= words[i].length <= 10\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.\n\n",
    "difficulty": "Hard",
    "hints": [
      "You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?",
      "If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: Implement Trie (Prefix Tree) first."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\n[\"oath\",\"pea\",\"eat\",\"rain\"]",
      "[[\"a\",\"b\"],[\"c\",\"d\"]]\n[\"abcb\"]"
    ],
    "title": "Word Search II",
    "topic_tags": ["Array", "String", "Backtracking", "Trie", "Matrix"],
    "updated_at": 1695094125,
    "url": "https://leetcode.com/problems/word-search-ii/"
  },
  {
    "id": "139",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool wordBreak(char * s, char ** wordDict, int wordDictSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function wordBreak(s: string, wordDict: string[]): boolean {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return Boolean\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool wordBreak(String s, List<String> wordDict) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func wordBreak(s string, wordDict []string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {String[]} word_dict\n# @return {Boolean}\ndef word_break(s, word_dict)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (word-break s wordDict)\n  (-> string? (listof string?) boolean?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> boolean().\nword_break(S, WordDict) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\n  def word_break(s, word_dict) do\n\n  end\nend"
      }
    ],
    "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n \nExample 1:\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\nExample 2:\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n \nConstraints:\n\n1 <= s.length <= 300\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 20\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "\"leetcode\"\n[\"leet\",\"code\"]",
      "\"applepenapple\"\n[\"apple\",\"pen\"]",
      "\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
    ],
    "title": "Word Break",
    "topic_tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie",
      "Memoization"
    ],
    "updated_at": 1695019649,
    "url": "https://leetcode.com/problems/word-break/"
  },
  {
    "id": "208",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Trie {\npublic:\n    Trie() {\n        \n    }\n    \n    void insert(string word) {\n        \n    }\n    \n    bool search(string word) {\n        \n    }\n    \n    bool startsWith(string prefix) {\n        \n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void insert(String word) {\n        \n    }\n    \n    public boolean search(String word) {\n        \n    }\n    \n    public boolean startsWith(String prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Trie(object):\n\n    def __init__(self):\n        \n\n    def insert(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: None\n        \"\"\"\n        \n\n    def search(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Trie:\n\n    def __init__(self):\n        \n\n    def insert(self, word: str) -> None:\n        \n\n    def search(self, word: str) -> bool:\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} Trie;\n\n\nTrie* trieCreate() {\n    \n}\n\nvoid trieInsert(Trie* obj, char * word) {\n  \n}\n\nbool trieSearch(Trie* obj, char * word) {\n  \n}\n\nbool trieStartsWith(Trie* obj, char * prefix) {\n  \n}\n\nvoid trieFree(Trie* obj) {\n    \n}\n\n/**\n * Your Trie struct will be instantiated and called as such:\n * Trie* obj = trieCreate();\n * trieInsert(obj, word);\n \n * bool param_2 = trieSearch(obj, word);\n \n * bool param_3 = trieStartsWith(obj, prefix);\n \n * trieFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void Insert(string word) {\n        \n    }\n    \n    public bool Search(string word) {\n        \n    }\n    \n    public bool StartsWith(string prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.Insert(word);\n * bool param_2 = obj.Search(word);\n * bool param_3 = obj.StartsWith(prefix);\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar Trie = function() {\n    \n};\n\n/** \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n    \n};\n\n/** \n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function(prefix) {\n    \n};\n\n/** \n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class Trie {\n    constructor() {\n\n    }\n\n    insert(word: string): void {\n\n    }\n\n    search(word: string): boolean {\n\n    }\n\n    startsWith(prefix: string): boolean {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Trie {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return NULL\n     */\n    function insert($word) {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @return Boolean\n     */\n    function startsWith($prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * $obj = Trie();\n * $obj->insert($word);\n * $ret_2 = $obj->search($word);\n * $ret_3 = $obj->startsWith($prefix);\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass Trie {\n\n    init() {\n        \n    }\n    \n    func insert(_ word: String) {\n        \n    }\n    \n    func search(_ word: String) -> Bool {\n        \n    }\n    \n    func startsWith(_ prefix: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie()\n * obj.insert(word)\n * let ret_2: Bool = obj.search(word)\n * let ret_3: Bool = obj.startsWith(prefix)\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Trie() {\n\n    fun insert(word: String) {\n        \n    }\n\n    fun search(word: String): Boolean {\n        \n    }\n\n    fun startsWith(prefix: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Trie {\n\n  Trie() {\n\n  }\n  \n  void insert(String word) {\n\n  }\n  \n  bool search(String word) {\n\n  }\n  \n  bool startsWith(String prefix) {\n\n  }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = Trie();\n * obj.insert(word);\n * bool param2 = obj.search(word);\n * bool param3 = obj.startsWith(prefix);\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type Trie struct {\n    \n}\n\n\nfunc Constructor() Trie {\n    \n}\n\n\nfunc (this *Trie) Insert(word string)  {\n    \n}\n\n\nfunc (this *Trie) Search(word string) bool {\n    \n}\n\n\nfunc (this *Trie) StartsWith(prefix string) bool {\n    \n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(word);\n * param_2 := obj.Search(word);\n * param_3 := obj.StartsWith(prefix);\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class Trie\n    def initialize()\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Void\n=end\n    def insert(word)\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Boolean\n=end\n    def search(word)\n        \n    end\n\n\n=begin\n    :type prefix: String\n    :rtype: Boolean\n=end\n    def starts_with(prefix)\n        \n    end\n\n\nend\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie.new()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.starts_with(prefix)"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class Trie() {\n\n    def insert(word: String) {\n        \n    }\n\n    def search(word: String): Boolean = {\n        \n    }\n\n    def startsWith(prefix: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct Trie {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Trie {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn insert(&self, word: String) {\n        \n    }\n    \n    fn search(&self, word: String) -> bool {\n        \n    }\n    \n    fn starts_with(&self, prefix: String) -> bool {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie::new();\n * obj.insert(word);\n * let ret_2: bool = obj.search(word);\n * let ret_3: bool = obj.starts_with(prefix);\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define trie%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; insert : string? -> void?\n    (define/public (insert word)\n\n      )\n    ; search : string? -> boolean?\n    (define/public (search word)\n\n      )\n    ; starts-with : string? -> boolean?\n    (define/public (starts-with prefix)\n\n      )))\n\n;; Your trie% object will be instantiated and called as such:\n;; (define obj (new trie%))\n;; (send obj insert word)\n;; (define param_2 (send obj search word))\n;; (define param_3 (send obj starts-with prefix))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec trie_init_() -> any().\ntrie_init_() ->\n  .\n\n-spec trie_insert(Word :: unicode:unicode_binary()) -> any().\ntrie_insert(Word) ->\n  .\n\n-spec trie_search(Word :: unicode:unicode_binary()) -> boolean().\ntrie_search(Word) ->\n  .\n\n-spec trie_starts_with(Prefix :: unicode:unicode_binary()) -> boolean().\ntrie_starts_with(Prefix) ->\n  .\n\n\n%% Your functions will be called as such:\n%% trie_init_(),\n%% trie_insert(Word),\n%% Param_2 = trie_search(Word),\n%% Param_3 = trie_starts_with(Prefix),\n\n%% trie_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Trie do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec insert(word :: String.t) :: any\n  def insert(word) do\n\n  end\n\n  @spec search(word :: String.t) :: boolean\n  def search(word) do\n\n  end\n\n  @spec starts_with(prefix :: String.t) :: boolean\n  def starts_with(prefix) do\n\n  end\nend\n\n# Your functions will be called as such:\n# Trie.init_()\n# Trie.insert(word)\n# param_2 = Trie.search(word)\n# param_3 = Trie.starts_with(prefix)\n\n# Trie.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\n\nTrie() Initializes the trie object.\nvoid insert(String word) Inserts the string word into the trie.\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n\n \nExample 1:\n\nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n\n \nConstraints:\n\n1 <= word.length, prefix.length <= 2000\nword and prefix consist only of lowercase English letters.\nAt most 3 * 104 calls in total will be made to insert, search, and startsWith.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\n[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]"
    ],
    "title": "Implement Trie (Prefix Tree)",
    "topic_tags": ["Hash Table", "String", "Design", "Trie"],
    "updated_at": 1695094120,
    "url": "https://leetcode.com/problems/implement-trie-prefix-tree/"
  },
  {
    "id": "26",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int removeDuplicates(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function removeDuplicates(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func removeDuplicates(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (remove-duplicates nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      }
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\nChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n\nCustom Judge:\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\nnums is sorted in non-decreasing order.\n\n",
    "difficulty": "Easy",
    "hints": [
      "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n\n",
      "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
      "Essentially, once an element is encountered, you simply need to bypass its duplicates and move on to the next unique element."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,1,2]", "[0,0,1,1,1,2,2,3,3,4]"],
    "title": "Remove Duplicates from Sorted Array",
    "topic_tags": ["Array", "Two Pointers"],
    "updated_at": 1695018977,
    "url": "https://leetcode.com/problems/remove-duplicates-from-sorted-array/"
  },
  {
    "id": "27",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int removeElement(int[] nums, int val) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int removeElement(int* nums, int numsSize, int val){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int RemoveElement(int[] nums, int val) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function(nums, val) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function removeElement(nums: number[], val: number): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $val\n     * @return Integer\n     */\n    function removeElement(&$nums, $val) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun removeElement(nums: IntArray, `val`: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int removeElement(List<int> nums, int val) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func removeElement(nums []int, val int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} val\n# @return {Integer}\ndef remove_element(nums, val)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def removeElement(nums: Array[Int], `val`: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn remove_element(nums: &mut Vec<i32>, val: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (remove-element nums val)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
      }
    ],
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n\nChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n\nCustom Judge:\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n \nExample 1:\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\n\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n \nConstraints:\n\n0 <= nums.length <= 100\n0 <= nums[i] <= 50\n0 <= val <= 100\n\n",
    "difficulty": "Easy",
    "hints": [
      "The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to remove that element per-say, right?",
      "We can move all the occurrences of this element to the end of the array. Use two pointers!\r\n",
      "Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[3,2,2,3]\n3", "[0,1,2,2,3,0,4,2]\n2"],
    "title": "Remove Element",
    "topic_tags": ["Array", "Two Pointers"],
    "updated_at": 1695018978,
    "url": "https://leetcode.com/problems/remove-element/"
  },
  {
    "id": "42",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int trap(int* height, int heightSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function trap(height: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int trap(List<int> height) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func trap(height []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n\n  end\nend"
      }
    ],
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n \nExample 1:\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n \nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[0,1,0,2,1,0,1,3,2,1,2,1]", "[4,2,0,3,2,5]"],
    "title": "Trapping Rain Water",
    "topic_tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "updated_at": 1695018988,
    "url": "https://leetcode.com/problems/trapping-rain-water/"
  },
  {
    "id": "295",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MedianFinder {\npublic:\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        \n    }\n    \n    double findMedian() {\n        \n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MedianFinder(object):\n\n    def __init__(self):\n        \n\n    def addNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n    def findMedian(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MedianFinder:\n\n    def __init__(self):\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MedianFinder;\n\n\nMedianFinder* medianFinderCreate() {\n    \n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n  \n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n  \n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n\n/**\n * Your MedianFinder struct will be instantiated and called as such:\n * MedianFinder* obj = medianFinderCreate();\n * medianFinderAddNum(obj, num);\n \n * double param_2 = medianFinderFindMedian(obj);\n \n * medianFinderFree(obj);\n*/"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void AddNum(int num) {\n        \n    }\n    \n    public double FindMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.AddNum(num);\n * double param_2 = obj.FindMedian();\n */"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "\nvar MedianFinder = function() {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n    \n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n    \n};\n\n/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "class MedianFinder {\n    constructor() {\n\n    }\n\n    addNum(num: number): void {\n\n    }\n\n    findMedian(): number {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MedianFinder {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addNum($num) {\n        \n    }\n  \n    /**\n     * @return Float\n     */\n    function findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * $obj = MedianFinder();\n * $obj->addNum($num);\n * $ret_2 = $obj->findMedian();\n */"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MedianFinder {\n\n    init() {\n        \n    }\n    \n    func addNum(_ num: Int) {\n        \n    }\n    \n    func findMedian() -> Double {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder()\n * obj.addNum(num)\n * let ret_2: Double = obj.findMedian()\n */"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MedianFinder() {\n\n    fun addNum(num: Int) {\n        \n    }\n\n    fun findMedian(): Double {\n        \n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class MedianFinder {\n\n  MedianFinder() {\n\n  }\n  \n  void addNum(int num) {\n\n  }\n  \n  double findMedian() {\n\n  }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = MedianFinder();\n * obj.addNum(num);\n * double param2 = obj.findMedian();\n */"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MedianFinder struct {\n    \n}\n\n\nfunc Constructor() MedianFinder {\n    \n}\n\n\nfunc (this *MedianFinder) AddNum(num int)  {\n    \n}\n\n\nfunc (this *MedianFinder) FindMedian() float64 {\n    \n}\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(num);\n * param_2 := obj.FindMedian();\n */"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MedianFinder\n    def initialize()\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_num(num)\n        \n    end\n\n\n=begin\n    :rtype: Float\n=end\n    def find_median()\n        \n    end\n\n\nend\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder.new()\n# obj.add_num(num)\n# param_2 = obj.find_median()"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MedianFinder() {\n\n    def addNum(num: Int) {\n        \n    }\n\n    def findMedian(): Double = {\n        \n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MedianFinder {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MedianFinder {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_num(&self, num: i32) {\n        \n    }\n    \n    fn find_median(&self) -> f64 {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder::new();\n * obj.add_num(num);\n * let ret_2: f64 = obj.find_median();\n */"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define median-finder%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; add-num : exact-integer? -> void?\n    (define/public (add-num num)\n\n      )\n    ; find-median : -> flonum?\n    (define/public (find-median)\n\n      )))\n\n;; Your median-finder% object will be instantiated and called as such:\n;; (define obj (new median-finder%))\n;; (send obj add-num num)\n;; (define param_2 (send obj find-median))"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec median_finder_init_() -> any().\nmedian_finder_init_() ->\n  .\n\n-spec median_finder_add_num(Num :: integer()) -> any().\nmedian_finder_add_num(Num) ->\n  .\n\n-spec median_finder_find_median() -> float().\nmedian_finder_find_median() ->\n  .\n\n\n%% Your functions will be called as such:\n%% median_finder_init_(),\n%% median_finder_add_num(Num),\n%% Param_2 = median_finder_find_median(),\n\n%% median_finder_init_ will be called before every test case, in which you can do some necessary initializations."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule MedianFinder do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec add_num(num :: integer) :: any\n  def add_num(num) do\n\n  end\n\n  @spec find_median() :: float\n  def find_median() do\n\n  end\nend\n\n# Your functions will be called as such:\n# MedianFinder.init_()\n# MedianFinder.add_num(num)\n# param_2 = MedianFinder.find_median()\n\n# MedianFinder.init_ will be called before every test case, in which you can do some necessary initializations."
      }
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nFor example, for arr = [2,3,4], the median is 3.\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n\nImplement the MedianFinder class:\n\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n\n \nExample 1:\n\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n\n \nConstraints:\n\n-105 <= num <= 105\nThere will be at least one element in the data structure before calling findMedian.\nAt most 5 * 104 calls will be made to addNum and findMedian.\n\n \nFollow up:\n\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]"
    ],
    "title": "Find Median from Data Stream",
    "topic_tags": [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream"
    ],
    "updated_at": 1695094200,
    "url": "https://leetcode.com/problems/find-median-from-data-stream/"
  },
  {
    "id": "11",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxArea(int* height, int heightSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxArea(height: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxArea(List<int> height) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxArea(height []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n\n  end\nend"
      }
    ],
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n \nExample 1:\n\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\nExample 2:\n\nInput: height = [1,1]\nOutput: 1\n\n \nConstraints:\n\nn == height.length\n2 <= n <= 105\n0 <= height[i] <= 104\n\n",
    "difficulty": "Medium",
    "hints": [
      "If you simulate the problem, it will be O(n^2) which is not efficient.",
      "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
      "How can you calculate the amount of water at each step?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[1,8,6,2,5,4,8,3,7]", "[1,1]"],
    "title": "Container With Most Water",
    "topic_tags": ["Array", "Two Pointers", "Greedy"],
    "updated_at": 1695017099,
    "url": "https://leetcode.com/problems/container-with-most-water/"
  },
  {
    "id": "15",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function threeSum(nums: number[]): number[][] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func threeSum(nums []int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n \nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n \nConstraints:\n\n3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n",
    "difficulty": "Medium",
    "hints": [
      "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
      "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
      "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[-1,0,1,2,-1,-4]", "[0,1,1]", "[0,0,0]"],
    "title": "3Sum",
    "topic_tags": ["Array", "Two Pointers", "Sorting"],
    "updated_at": 1695017105,
    "url": "https://leetcode.com/problems/3sum/"
  },
  {
    "id": "685",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] findRedundantDirectedConnection(int[][] edges) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findRedundantDirectedConnection(int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] FindRedundantDirectedConnection(int[][] edges) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantDirectedConnection = function(edges) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findRedundantDirectedConnection(edges: number[][]): number[] {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findRedundantDirectedConnection($edges) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findRedundantDirectedConnection(_ edges: [[Int]]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findRedundantDirectedConnection(edges: Array<IntArray>): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> findRedundantDirectedConnection(List<List<int>> edges) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findRedundantDirectedConnection(edges [][]int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_redundant_directed_connection(edges)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findRedundantDirectedConnection(edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_redundant_directed_connection(edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-redundant-directed-connection edges)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_redundant_directed_connection(Edges :: [[integer()]]) -> [integer()].\nfind_redundant_directed_connection(Edges) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_redundant_directed_connection(edges :: [[integer]]) :: [integer]\n  def find_redundant_directed_connection(edges) do\n\n  end\nend"
      }
    ],
    "description": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n \nExample 1:\n\n\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n\nExample 2:\n\n\nInput: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\nOutput: [4,1]\n\n \nConstraints:\n\nn == edges.length\n3 <= n <= 1000\nedges[i].length == 2\n1 <= ui, vi <= n\nui != vi\n\n",
    "difficulty": "Hard",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[[1,2],[1,3],[2,3]]", "[[1,2],[2,3],[3,4],[4,1],[1,5]]"],
    "title": "Redundant Connection II",
    "topic_tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "updated_at": 1695094611,
    "url": "https://leetcode.com/problems/redundant-connection-ii/"
  },
  {
    "id": "770",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int minSwapsCouples(vector<int>& row) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int minSwapsCouples(int[] row) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int minSwapsCouples(int* row, int rowSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MinSwapsCouples(int[] row) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} row\n * @return {number}\n */\nvar minSwapsCouples = function(row) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minSwapsCouples(row: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $row\n     * @return Integer\n     */\n    function minSwapsCouples($row) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minSwapsCouples(_ row: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minSwapsCouples(row: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minSwapsCouples(List<int> row) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minSwapsCouples(row []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} row\n# @return {Integer}\ndef min_swaps_couples(row)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minSwapsCouples(row: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_swaps_couples(row: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-swaps-couples row)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_swaps_couples(Row :: [integer()]) -> integer().\nmin_swaps_couples(Row) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_swaps_couples(row :: [integer]) :: integer\n  def min_swaps_couples(row) do\n\n  end\nend"
      }
    ],
    "description": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\n \nExample 1:\n\nInput: row = [0,2,1,3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\n\nExample 2:\n\nInput: row = [3,2,0,1]\nOutput: 0\nExplanation: All couples are already seated side by side.\n\n \nConstraints:\n\n2n == row.length\n2 <= n <= 30\nn is even.\n0 <= row[i] < 2n\nAll the elements of row are unique.\n\n",
    "difficulty": "Hard",
    "hints": [
      "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[0,2,1,3]", "[3,2,0,1]"],
    "title": "Couples Holding Hands",
    "topic_tags": [
      "Greedy",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "updated_at": 1695094698,
    "url": "https://leetcode.com/problems/couples-holding-hands/"
  },
  {
    "id": "128",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestConsecutive(int* nums, int numsSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestConsecutive(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestConsecutive(nums: number[]): number {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestConsecutive($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestConsecutive(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestConsecutive(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestConsecutive(List<int> nums) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestConsecutive(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_consecutive(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestConsecutive(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-consecutive nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_consecutive(Nums :: [integer()]) -> integer().\nlongest_consecutive(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_consecutive(nums :: [integer]) :: integer\n  def longest_consecutive(nums) do\n\n  end\nend"
      }
    ],
    "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.\n \nExample 1:\n\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\nExample 2:\n\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n\n \nConstraints:\n\n0 <= nums.length <= 105\n-109 <= nums[i] <= 109\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": ["[100,4,200,1,3,2]", "[0,3,7,2,5,8,4,6,0,1]"],
    "title": "Longest Consecutive Sequence",
    "topic_tags": ["Array", "Hash Table", "Union Find"],
    "updated_at": 1695019640,
    "url": "https://leetcode.com/problems/longest-consecutive-sequence/"
  },
  {
    "id": "130",
    "category": "Algorithms",
    "code_snippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public void solve(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "void solve(char** board, int boardSize, int* boardColSize){\n\n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public void Solve(char[][] board) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solve(board: string[][]): void {\n\n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solve(&$board) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func solve(_ board: inout [[Character]]) {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun solve(board: Array<CharArray>): Unit {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  void solve(List<List<String>> board) {\n\n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func solve(board [][]byte)  {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve(board)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def solve(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn solve(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (solve board)\n  (-> (listof (listof char?)) void?)\n\n  )"
      }
    ],
    "description": "Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\n \nExample 1:\n\n\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nExplanation: Notice that an 'O' should not be flipped if:\n- It is on the border, or\n- It is adjacent to an 'O' that should not be flipped.\nThe bottom 'O' is on the border, so it is not flipped.\nThe other three 'O' form a surrounded region, so they are flipped.\n\nExample 2:\n\nInput: board = [[\"X\"]]\nOutput: [[\"X\"]]\n\n \nConstraints:\n\nm == board.length\nn == board[i].length\n1 <= m, n <= 200\nboard[i][j] is 'X' or 'O'.\n\n",
    "difficulty": "Medium",
    "hints": [],
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "mysql",
      "mssql",
      "oraclesql",
      "c",
      "csharp",
      "javascript",
      "typescript",
      "bash",
      "php",
      "swift",
      "kotlin",
      "dart",
      "golang",
      "ruby",
      "scala",
      "html",
      "pythonml",
      "rust",
      "racket",
      "erlang",
      "elixir",
      "pythondata",
      "react",
      "vanillajs"
    ],
    "paid_only": false,
    "test_cases": [
      "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
      "[[\"X\"]]"
    ],
    "title": "Surrounded Regions",
    "topic_tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "updated_at": 1695019642,
    "url": "https://leetcode.com/problems/surrounded-regions/"
  }
]